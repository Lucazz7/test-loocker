{"version":3,"sources":["../../src/rtl/nodeSession.ts"],"names":["strPost","strDelete","NodeSession","AuthSession","constructor","settings","transport","NodeTransport","AuthToken","apiPath","defaultApiVersion","activeToken","_sudoToken","access_token","_authToken","isAuthenticated","token","isActive","authenticate","props","getToken","headers","Authorization","isSudo","sudoId","login","reset","_login","toString","logout","result","_logout","sudoLogout","newId","section","readConfig","clientId","strLookerClientId","client_id","clientSecret","strLookerClientSecret","client_secret","message","body","ok","request","undefined","setToken","promise","encodeURI","init","accessToken"],"mappings":";;;;;;;AA2BA;;AAOA;;AACA;;AACA;;AAKA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,OAAmB,GAAG,MAA5B;AACA,IAAMC,SAAqB,GAAG,QAA9B;;AAsBO,MAAMC,WAAN,SAA0BC,wBAA1B,CAAsC;AAK3CC,EAAAA,WAAW,CAAQC,QAAR,EAAgCC,SAAhC,EAAwD;AACjE,UAAMD,QAAN,EAAgBC,SAAS,IAAI,IAAIC,4BAAJ,CAAkBF,QAAlB,CAA7B;AADiE,SAAhDA,QAAgD,GAAhDA,QAAgD;;AAAA,qCAJhC,EAIgC;;AAAA,wCAH3C,IAAIG,oBAAJ,EAG2C;;AAAA,wCAF3C,IAAIA,oBAAJ,EAE2C;;AAEjE,SAAKC,OAAL,kBAAuBC,4BAAvB;AACD;;AAKD,MAAIC,WAAJ,GAAkB;AAChB,QAAI,KAAKC,UAAL,CAAgBC,YAApB,EAAkC;AAChC,aAAO,KAAKD,UAAZ;AACD;;AACD,WAAO,KAAKE,UAAZ;AACD;;AAKDC,EAAAA,eAAe,GAAG;AAEhB,QAAMC,KAAK,GAAG,KAAKL,WAAnB;AACA,QAAI,EAAEK,KAAK,IAAIA,KAAK,CAACH,YAAjB,CAAJ,EAAoC,OAAO,KAAP;AACpC,WAAOG,KAAK,CAACC,QAAN,EAAP;AACD;;AAQKC,EAAAA,YAAN,CAAmBC,KAAnB,EAAyC;AAAA;;AAAA;AACvC,UAAMH,KAAK,SAAS,KAAI,CAACI,QAAL,EAApB;;AACA,UAAIJ,KAAK,IAAIA,KAAK,CAACH,YAAnB,EAAiC;AAC/BM,QAAAA,KAAK,CAACE,OAAN,CAAcC,aAAd,oBAAwCN,KAAK,CAACH,YAA9C;AACD;;AACD,aAAOM,KAAP;AALuC;AAMxC;;AAEDI,EAAAA,MAAM,GAAG;AACP,WAAO,CAAC,CAAC,KAAKC,MAAP,IAAiB,KAAKZ,UAAL,CAAgBK,QAAhB,EAAxB;AACD;;AAMKG,EAAAA,QAAN,GAAiB;AAAA;;AAAA;AACf,UAAI,CAAC,MAAI,CAACL,eAAL,EAAL,EAA6B;AAC3B,cAAM,MAAI,CAACU,KAAL,EAAN;AACD;;AACD,aAAO,MAAI,CAACd,WAAZ;AAJe;AAKhB;;AAKDe,EAAAA,KAAK,GAAG;AACN,SAAKF,MAAL,GAAc,EAAd;;AACA,SAAKV,UAAL,CAAgBY,KAAhB;;AACA,SAAKd,UAAL,CAAgBc,KAAhB;AACD;;AAOKD,EAAAA,KAAN,CAAYD,MAAZ,EAAsC;AAAA;;AAAA;AACpC,UAAIA,MAAM,IAAIA,MAAM,KAAK,MAAI,CAACA,MAA1B,IAAoC,CAAC,MAAI,CAACT,eAAL,EAAzC,EAAiE;AAC/D,YAAIS,MAAJ,EAAY;AACV,gBAAM,MAAI,CAACG,MAAL,CAAYH,MAAM,CAACI,QAAP,EAAZ,CAAN;AACD,SAFD,MAEO;AACL,gBAAM,MAAI,CAACD,MAAL,EAAN;AACD;AACF;;AACD,aAAO,MAAI,CAAChB,WAAZ;AARoC;AASrC;;AAKKkB,EAAAA,MAAN,GAAe;AAAA;;AAAA;AACb,UAAIC,MAAM,GAAG,KAAb;;AACA,UAAI,MAAI,CAACf,eAAL,EAAJ,EAA4B;AAC1Be,QAAAA,MAAM,SAAS,MAAI,CAACC,OAAL,EAAf;AACD;;AACD,aAAOD,MAAP;AALa;AAMd;;AAEaE,EAAAA,UAAd,GAA2B;AAAA;;AAAA;AACzB,UAAIF,MAAM,GAAG,KAAb;;AACA,UAAI,MAAI,CAACP,MAAL,EAAJ,EAAmB;AACjBO,QAAAA,MAAM,SAAS,MAAI,CAACD,MAAL,EAAf;;AACA,QAAA,MAAI,CAACjB,UAAL,CAAgBc,KAAhB;AACD;;AACD,aAAOI,MAAP;AANyB;AAO1B;;AAGaH,EAAAA,MAAd,CAAqBM,KAArB,EAAqC;AAAA;;AAAA;AAEnC,YAAM,MAAI,CAACD,UAAL,EAAN;;AAEA,UAAIC,KAAK,KAAK,MAAI,CAACT,MAAnB,EAA2B;AAEzB,QAAA,MAAI,CAACA,MAAL,GAAcS,KAAK,IAAI,EAAvB;AACD;;AAED,UAAI,CAAC,MAAI,CAACnB,UAAL,CAAgBG,QAAhB,EAAL,EAAiC;AAC/B,QAAA,MAAI,CAACS,KAAL;;AAEA,YAAMQ,OAAO,GAAG,MAAI,CAAC7B,QAAL,CAAc8B,UAAd,EAAhB;;AACA,YAAMC,QAAQ,GAAG,0BAAOC,8BAAP,EAA0BH,OAAO,CAACI,SAAlC,CAAjB;AACA,YAAMC,YAAY,GAAG,0BAAOC,kCAAP,EAA8BN,OAAO,CAACO,aAAtC,CAArB;;AACA,YAAI,CAACL,QAAD,IAAa,CAACG,YAAlB,EAAgC;AAC9B,gBAAM,yBAAS;AACbG,YAAAA,OAAO,EAAE;AADI,WAAT,CAAN;AAGD;;AACD,YAAMC,IAAI,GAAG,6BAAa;AACxBL,UAAAA,SAAS,EAAEF,QADa;AAExBK,UAAAA,aAAa,EAAEF;AAFS,SAAb,CAAb;AAKA,YAAMvB,KAAK,SAAS,MAAI,CAAC4B,EAAL,CAClB,MAAI,CAACtC,SAAL,CAAeuC,OAAf,CACE7C,OADF,YAEK,MAAI,CAACS,OAFV,aAGEqC,SAHF,EAIEH,IAJF,CADkB,CAApB;;AAQA,QAAA,MAAI,CAAC7B,UAAL,CAAgBiC,QAAhB,CAAyB/B,KAAzB;AACD;;AAED,UAAI,MAAI,CAACQ,MAAT,EAAiB;AAEf,YAAMR,MAAK,GAAG,MAAI,CAACL,WAAnB;;AACA,YAAMqC,OAAO,GAAG,MAAI,CAAC1C,SAAL,CAAeuC,OAAf,CACd7C,OADc,EAEdiD,SAAS,WAAI,MAAI,CAACxC,OAAT,oBAA0BwB,KAA1B,EAFK,EAGd,IAHc,EAId,IAJc,EAMbiB,IAAD,IAAyB;AACvB,cAAIlC,MAAK,CAACH,YAAV,EAAwB;AACtBqC,YAAAA,IAAI,CAAC7B,OAAL,CAAaC,aAAb,oBAAuCN,MAAK,CAACH,YAA7C;AACD;;AACD,iBAAOqC,IAAP;AACD,SAXa,EAYd,MAAI,CAAC7C,QAZS,CAAhB;;AAeA,YAAM8C,WAAW,SAAS,MAAI,CAACP,EAAL,CAAQI,OAAR,CAA1B;;AAEA,QAAA,MAAI,CAACpC,UAAL,CAAgBmC,QAAhB,CAAyBI,WAAzB;AACD;;AAED,aAAO,MAAI,CAACxC,WAAZ;AA3DmC;AA4DpC;;AAEaoB,EAAAA,OAAd,GAAwB;AAAA;;AAAA;AACtB,UAAMf,KAAK,GAAG,MAAI,CAACL,WAAnB;;AACA,UAAMqC,OAAO,GAAG,MAAI,CAAC1C,SAAL,CAAeuC,OAAf,CACd5C,SADc,YAEX,MAAI,CAACQ,OAFM,cAGd,IAHc,EAId,IAJc,EAMbyC,IAAD,IAAyB;AACvB,YAAIlC,KAAK,CAACH,YAAV,EAAwB;AACtBqC,UAAAA,IAAI,CAAC7B,OAAL,CAAaC,aAAb,oBAAuCN,KAAK,CAACH,YAA7C;AACD;;AACD,eAAOqC,IAAP;AACD,OAXa,EAYd,MAAI,CAAC7C,QAZS,CAAhB;;AAeA,YAAM,MAAI,CAACuC,EAAL,CAAQI,OAAR,CAAN;;AAGA,UAAI,MAAI,CAACxB,MAAT,EAAiB;AAEf,QAAA,MAAI,CAACA,MAAL,GAAc,EAAd;;AACA,QAAA,MAAI,CAACZ,UAAL,CAAgBc,KAAhB;;AACA,YAAI,CAAC,MAAI,CAACZ,UAAL,CAAgBG,QAAhB,EAAL,EAAiC;AAC/B,gBAAM,MAAI,CAACQ,KAAL,EAAN;AACD;AACF,OAPD,MAOO;AAEL,QAAA,MAAI,CAACC,KAAL;AACD;;AACD,aAAO,IAAP;AA/BsB;AAgCvB;;AAvM0C","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2020 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport { IError } from '../sdk/4.0/models'\nimport {\n  IRequestProps,\n  ITransport,\n  sdkError,\n  HttpMethod,\n  encodeParams,\n} from './transport'\nimport { AuthToken } from './authToken'\nimport { NodeTransport } from './nodeTransport'\nimport {\n  IApiSettings,\n  strLookerClientId,\n  strLookerClientSecret,\n} from './apiSettings'\nimport { AuthSession } from './authSession'\nimport { defaultApiVersion } from './constants'\nimport { getenv } from './nodeSettings'\n\nconst strPost: HttpMethod = 'POST'\nconst strDelete: HttpMethod = 'DELETE'\n\n/**\n * Same as the Looker API access token object\n * Re-declared here to be independent of model generation\n */\ninterface IAccessToken {\n  /**\n   * Access Token used for API calls\n   */\n  access_token?: string\n  /**\n   * Type of token\n   */\n  token_type?: string\n\n  /**\n   * Number of seconds before the token expires\n   */\n  expires_in?: number\n}\n\nexport class NodeSession extends AuthSession {\n  private readonly apiPath: string = ''\n  _authToken: AuthToken = new AuthToken()\n  _sudoToken: AuthToken = new AuthToken()\n\n  constructor(public settings: IApiSettings, transport?: ITransport) {\n    super(settings, transport || new NodeTransport(settings))\n    this.apiPath = `/api/${defaultApiVersion}`\n  }\n\n  /**\n   * Abstraction of AuthToken retrieval to support sudo mode\n   */\n  get activeToken() {\n    if (this._sudoToken.access_token) {\n      return this._sudoToken\n    }\n    return this._authToken\n  }\n\n  /**\n   * Is there an active authentication token?\n   */\n  isAuthenticated() {\n    // TODO I think this can be simplified\n    const token = this.activeToken\n    if (!(token && token.access_token)) return false\n    return token.isActive()\n  }\n\n  /**\n   * Add authentication data to the pending API request\n   * @param props initialized API request properties\n   *\n   * @returns the updated request properties\n   */\n  async authenticate(props: IRequestProps) {\n    const token = await this.getToken()\n    if (token && token.access_token) {\n      props.headers.Authorization = `Bearer ${token.access_token}`\n    }\n    return props\n  }\n\n  isSudo() {\n    return !!this.sudoId && this._sudoToken.isActive()\n  }\n\n  /**\n   * retrieve the current authentication token. If there is no active token, performs default\n   * login to retrieve the token\n   */\n  async getToken() {\n    if (!this.isAuthenticated()) {\n      await this.login()\n    }\n    return this.activeToken\n  }\n\n  /**\n   * Reset the authentication session\n   */\n  reset() {\n    this.sudoId = ''\n    this._authToken.reset()\n    this._sudoToken.reset()\n  }\n\n  /**\n   * Activate the authentication token for the API3 or sudo user\n   * @param sudoId {string | number}: optional. If provided, impersonates the user specified\n   *\n   */\n  async login(sudoId?: string | number) {\n    if (sudoId || sudoId !== this.sudoId || !this.isAuthenticated()) {\n      if (sudoId) {\n        await this._login(sudoId.toString())\n      } else {\n        await this._login()\n      }\n    }\n    return this.activeToken\n  }\n\n  /**\n   * Logout the active user. If the active user is sudo, the session reverts to the API3 user\n   */\n  async logout() {\n    let result = false\n    if (this.isAuthenticated()) {\n      result = await this._logout()\n    }\n    return result\n  }\n\n  private async sudoLogout() {\n    let result = false\n    if (this.isSudo()) {\n      result = await this.logout() // Logout the current sudo\n      this._sudoToken.reset()\n    }\n    return result\n  }\n\n  // internal login method that manages default auth token and sudo workflow\n  private async _login(newId?: string) {\n    // for linty freshness, always logout sudo if set\n    await this.sudoLogout()\n\n    if (newId !== this.sudoId) {\n      // Assign new requested sudo id\n      this.sudoId = newId || ''\n    }\n\n    if (!this._authToken.isActive()) {\n      this.reset()\n      // only retain client API3 credentials for the lifetime of the login request\n      const section = this.settings.readConfig()\n      const clientId = getenv(strLookerClientId, section.client_id)\n      const clientSecret = getenv(strLookerClientSecret, section.client_secret)\n      if (!clientId || !clientSecret) {\n        throw sdkError({\n          message: 'API credentials client_id and/or client_secret are not set',\n        })\n      }\n      const body = encodeParams({\n        client_id: clientId,\n        client_secret: clientSecret,\n      })\n      // authenticate client\n      const token = await this.ok(\n        this.transport.request<IAccessToken, IError>(\n          strPost,\n          `${this.apiPath}/login`,\n          undefined,\n          body\n        )\n      )\n      this._authToken.setToken(token)\n    }\n\n    if (this.sudoId) {\n      // Use the API user auth to sudo\n      const token = this.activeToken\n      const promise = this.transport.request<IAccessToken, IError>(\n        strPost,\n        encodeURI(`${this.apiPath}/login/${newId}`),\n        null,\n        null,\n        // ensure the auth token is included in the sudo request\n        (init: IRequestProps) => {\n          if (token.access_token) {\n            init.headers.Authorization = `Bearer ${token.access_token}`\n          }\n          return init\n        },\n        this.settings // TODO this may not be needed here\n      )\n\n      const accessToken = await this.ok(promise)\n\n      this._sudoToken.setToken(accessToken)\n    }\n\n    return this.activeToken\n  }\n\n  private async _logout() {\n    const token = this.activeToken\n    const promise = this.transport.request<string, IError>(\n      strDelete,\n      `${this.apiPath}/logout`,\n      null,\n      null,\n      // ensure the auth token is included in the logout promise\n      (init: IRequestProps) => {\n        if (token.access_token) {\n          init.headers.Authorization = `Bearer ${token.access_token}`\n        }\n        return init\n      },\n      this.settings\n    )\n\n    await this.ok(promise)\n\n    // If no error was thrown, logout was successful\n    if (this.sudoId) {\n      // User was logged out, so set auth back to default\n      this.sudoId = ''\n      this._sudoToken.reset()\n      if (!this._authToken.isActive()) {\n        await this.login()\n      }\n    } else {\n      // completely logged out\n      this.reset()\n    }\n    return true\n  }\n}\n"],"file":"nodeSession.js"}