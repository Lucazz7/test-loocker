"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NodeSettingsIniFile = exports.NodeSettings = exports.ApiConfigSection = exports.ApiConfig = exports.getenv = void 0;

var fs = _interopRequireWildcard(require("fs"));

var ini = _interopRequireWildcard(require("ini"));

var _apiSettings = require("./apiSettings");

var _constants = require("./constants");

var _transport = require("./transport");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var getenv = function getenv(name) {
  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
  var val = process.env[name];
  return val === undefined ? defaultValue : val;
};

exports.getenv = getenv;

var ApiConfig = contents => ini.parse(contents);

exports.ApiConfig = ApiConfig;

var ApiConfigSection = (contents, section) => {
  var config = ApiConfig(contents);

  if (!section) {
    section = Object.keys(config)[0];
  }

  var settings = config[section];

  if (!settings) {
    throw new Error("No section named \"".concat(section, "\" was found"));
  }

  if (settings.api_version) {
    console.warn('api_version is no longer read from a configuration file by the SDK');
  }

  return settings;
};

exports.ApiConfigSection = ApiConfigSection;

var readEnvConfig = () => {
  var values = {};
  Object.keys(_apiSettings.ApiConfigMap).forEach(key => {
    var envKey = _apiSettings.ApiConfigMap[key];

    if (process.env[envKey] !== undefined) {
      values[key] = (0, _constants.unquote)(process.env[envKey]);
    }
  });
  return values;
};

var readIniConfig = (fileName, section) => {
  var config = readEnvConfig();

  if (fileName && fs.existsSync(fileName)) {
    config = _objectSpread(_objectSpread({}, ApiConfigSection(fs.readFileSync(fileName, 'utf8'), section)), config);
  }

  Object.keys(config).forEach(key => {
    var val = config[key];

    if (typeof val === 'string') {
      config[key] = (0, _constants.unquote)(val);
    }
  });
  return config;
};

class NodeSettings extends _apiSettings.ApiSettings {
  constructor(contents, section) {
    var settings;

    if (contents) {
      if (typeof contents === 'string') {
        settings = ApiConfigSection(contents, section);
      } else {
        settings = contents;
      }

      settings = _objectSpread(_objectSpread({}, readEnvConfig()), settings);
    } else {
      settings = readEnvConfig();
    }

    super(_objectSpread(_objectSpread({}, (0, _apiSettings.DefaultSettings)()), settings));
  }

  readConfig(_section) {
    return readEnvConfig();
  }

}

exports.NodeSettings = NodeSettings;

class NodeSettingsIniFile extends NodeSettings {
  constructor() {
    var fileName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    var section = arguments.length > 1 ? arguments[1] : undefined;

    if (fileName && !fs.existsSync(fileName)) {
      throw (0, _transport.sdkError)({
        message: "File ".concat(fileName, " was not found")
      });
    }

    fileName = fileName || './looker.ini';
    var settings = (0, _apiSettings.ValueSettings)(readIniConfig(fileName, section));
    super(settings, section);

    _defineProperty(this, "fileName", void 0);

    this.fileName = fileName;
  }

  readConfig(section) {
    return readIniConfig(this.fileName, section);
  }

}

exports.NodeSettingsIniFile = NodeSettingsIniFile;
//# sourceMappingURL=nodeSettings.js.map