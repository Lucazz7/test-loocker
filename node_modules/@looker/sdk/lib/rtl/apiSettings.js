"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApiSettings = exports.ValueSettings = exports.configValue = exports.DefaultSettings = exports.strBadConfiguration = exports.ApiConfigMap = exports.strLookerClientSecret = exports.strLookerClientId = exports.strLookerTimeout = exports.strLookerVerifySsl = exports.strLookerBaseUrl = void 0;

var _transport = require("./transport");

var _constants = require("./constants");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var strLookerBaseUrl = "".concat(_constants.environmentPrefix, "_BASE_URL");
exports.strLookerBaseUrl = strLookerBaseUrl;
var strLookerVerifySsl = "".concat(_constants.environmentPrefix, "_VERIFY_SSL");
exports.strLookerVerifySsl = strLookerVerifySsl;
var strLookerTimeout = "".concat(_constants.environmentPrefix, "_TIMEOUT");
exports.strLookerTimeout = strLookerTimeout;
var strLookerClientId = "".concat(_constants.environmentPrefix, "_CLIENT_ID");
exports.strLookerClientId = strLookerClientId;
var strLookerClientSecret = "".concat(_constants.environmentPrefix, "_CLIENT_SECRET");
exports.strLookerClientSecret = strLookerClientSecret;
var ApiConfigMap = {
  base_url: strLookerBaseUrl,
  client_id: strLookerClientId,
  client_secret: strLookerClientSecret,
  timeout: strLookerTimeout,
  verify_ssl: strLookerVerifySsl
};
exports.ApiConfigMap = ApiConfigMap;
var strBadConfiguration = "".concat(_transport.agentPrefix, " configuration error:\nMissing required configuration values like base_url\n");
exports.strBadConfiguration = strBadConfiguration;

var DefaultSettings = () => ({
  agentTag: "".concat(_transport.agentPrefix, " ").concat(_constants.lookerVersion),
  base_url: '',
  timeout: _transport.defaultTimeout,
  verify_ssl: true
});

exports.DefaultSettings = DefaultSettings;

var configValue = (values, name) => {
  var val = values[ApiConfigMap[name]] || values[name];
  return typeof val === 'string' ? (0, _constants.unquote)(val) : val;
};

exports.configValue = configValue;

var ValueSettings = values => {
  var settings = DefaultSettings();
  settings.base_url = configValue(values, 'base_url') || settings.base_url;
  settings.verify_ssl = (0, _constants.boolDefault)(configValue(values, 'verify_ssl'), true);
  settings.agentTag = "".concat(_transport.agentPrefix, " ").concat(_constants.lookerVersion);
  var timeout = configValue(values, 'timeout');
  settings.timeout = timeout ? parseInt(timeout, 10) : _transport.defaultTimeout;
  return settings;
};

exports.ValueSettings = ValueSettings;

class ApiSettings {
  constructor(settings) {
    var _settings$verify_ssl, _settings$timeout;

    _defineProperty(this, "base_url", '');

    _defineProperty(this, "verify_ssl", true);

    _defineProperty(this, "timeout", _transport.defaultTimeout);

    _defineProperty(this, "agentTag", "".concat(_transport.agentPrefix, " ").concat(_constants.lookerVersion));

    this.base_url = 'base_url' in settings ? (0, _constants.unquote)(settings.base_url) : this.base_url;
    this.verify_ssl = 'verify_ssl' in settings ? (0, _constants.isTrue)((0, _constants.unquote)((_settings$verify_ssl = settings.verify_ssl) === null || _settings$verify_ssl === void 0 ? void 0 : _settings$verify_ssl.toString())) : this.verify_ssl;
    this.timeout = 'timeout' in settings ? parseInt((0, _constants.unquote)((_settings$timeout = settings.timeout) === null || _settings$timeout === void 0 ? void 0 : _settings$timeout.toString()), 10) : this.timeout;
    if ('agentTag' in settings && settings.agentTag) this.agentTag = settings.agentTag;

    if (!this.isConfigured()) {
      throw new Error(strBadConfiguration);
    }
  }

  isConfigured() {
    return !!this.base_url;
  }

  readConfig(_section) {
    return {};
  }

}

exports.ApiSettings = ApiSettings;
//# sourceMappingURL=apiSettings.js.map