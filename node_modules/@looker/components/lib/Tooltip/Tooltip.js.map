{"version":3,"sources":["../../src/Tooltip/Tooltip.tsx"],"names":["useTooltip","arrow","canClose","content","isOpen","initializeOpen","width","textAlign","disabled","surfaceStyles","id","triggerElement","placement","propsPlacement","setIsOpen","surfaceElement","surfaceCallbackRef","newTriggerElement","callbackRef","element","handleOpen","handleClose","handleMouseOut","event","related","relatedTarget","contains","window","requestAnimationFrame","usePopperProps","anchor","options","modifiers","enabled","name","flipVariations","arrowProps","popperInstanceRef","style","targetRef","ref","guaranteedId","popper","onMouseOut","onBlur","onFocus","onMouseOver","tooltip","isRenderProp","children","Tooltip","props","tooltipProps","target","tooltipPropsLabeled","className","console","warn"],"mappings":";;;;;;;;AA4BA;;AASA;;AACA;;AAOA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;AA+EO,SAASA,UAAT,OAYa;AAAA,MAZO;AACzBC,IAAAA,KAAK,GAAG,IADiB;AAEzBC,IAAAA,QAFyB;AAGzBC,IAAAA,OAHyB;AAIzBC,IAAAA,MAAM,EAAEC,cAAc,GAAG,KAJA;AAKzBC,IAAAA,KALyB;AAMzBC,IAAAA,SANyB;AAOzBC,IAAAA,QAPyB;AAQzBC,IAAAA,aARyB;AASzBC,IAAAA,EATyB;AAUzBC,IAAAA,cAVyB;AAWzBC,IAAAA,SAAS,EAAEC,cAAc,GAAG;AAXH,GAYP;AAClB,MAAM,CAACT,MAAD,EAASU,SAAT,IAAsB,qBAAST,cAAT,CAA5B;AACA,MAAM,CAACU,cAAD,EAAiBC,kBAAjB,IAAuC,4BAA7C;AACA,MAAM,CAACC,iBAAD,EAAoBC,WAApB,IAAmC,4BAAzC;AAEA,MAAMC,OAAO,GACX,OAAOR,cAAP,KAA0B,WAA1B,GAAwCM,iBAAxC,GAA4DN,cAD9D;;AAGA,MAAMS,UAAU,GAAG,MAAMN,SAAS,CAAC,IAAD,CAAlC;;AACA,MAAMO,WAAW,GAAG,MAAM;AACxB,QAAInB,QAAQ,IAAI,CAACA,QAAQ,EAAzB,EAA6B;AAC7BY,IAAAA,SAAS,CAAC,KAAD,CAAT;AACD,GAHD;;AAKA,MAAMQ,cAAc,GAAIC,KAAD,IAA6B;AAClD,QAAI,CAACnB,MAAL,EAAa;AAEb,QAAMoB,OAAO,GAAGD,KAAK,CAACE,aAAtB;;AAEA,QAAIN,OAAO,KAAKA,OAAO,KAAKK,OAAZ,IAAuBL,OAAO,CAACO,QAAR,CAAiBF,OAAjB,CAA5B,CAAX,EAA2E;AACzE;AACD;;AAED,QACET,cAAc,KACbA,cAAc,KAAKS,OAAnB,IAA8BT,cAAc,CAACW,QAAf,CAAwBF,OAAxB,CADjB,CADhB,EAGE;AACA;AACD;;AAEDG,IAAAA,MAAM,CAACC,qBAAP,CAA6B,MAAM;AACjCP,MAAAA,WAAW;AACZ,KAFD;AAGD,GAnBD;;AAqBA,MAAMQ,cAA8B,GAAG,oBACrC,OAAO;AACLC,IAAAA,MAAM,EAAEX,OADH;AAELlB,IAAAA,KAFK;AAGL8B,IAAAA,OAAO,EAAE;AACPC,MAAAA,SAAS,EAAE,CACT;AACEC,QAAAA,OAAO,EAAE,IADX;AAEEC,QAAAA,IAAI,EAAE,MAFR;AAGEH,QAAAA,OAAO,EAAE;AACPI,UAAAA,cAAc,EAAE;AADT;AAHX,OADS,CADJ;AAUPvB,MAAAA,SAAS,EAAEC;AAVJ;AAHJ,GAAP,CADqC,EAiBrC,CAACZ,KAAD,EAAQkB,OAAR,EAAiBN,cAAjB,CAjBqC,CAAvC;AAmBA,MAAM;AACJuB,IAAAA,UADI;AAEJxB,IAAAA,SAFI;AAGJyB,IAAAA,iBAHI;AAIJC,IAAAA,KAJI;AAKJC,IAAAA;AALI,MAMF,sBAAUV,cAAV,CANJ;AAQA,MAAMW,GAAG,GAAG,yBAAaD,SAAb,EAAwBvB,kBAAxB,CAAZ;AAEA,MAAMyB,YAAY,GAAG,kBAAM/B,EAAN,CAArB;AAEA,MAAMgC,MAAM,GACVtC,MAAM,IAAID,OAAV,IAAqB,CAACK,QAAtB,GACE,6BAAC,cAAD,QACE,6BAAC,8BAAD;AACE,IAAA,KAAK,EAAEP,KADT;AAEE,IAAA,UAAU,EAAEmC,UAFd;AAGE,IAAA,aAAa,EAAE;AAAEO,MAAAA,UAAU,EAAErB;AAAd,KAHjB;AAIE,IAAA,SAAS,EAAEV,SAJb;AAKE,IAAA,GAAG,EAAE4B,GALP;AAME,IAAA,KAAK,EAAEF,KANT;AAOE,IAAA,eAAe,EAAC,SAPlB;AAQE,IAAA,YAAY,EAAC,QARf;AASE,IAAA,SAAS,EAAE,CATb;AAUE,IAAA,KAAK,EAAC;AAVR,KAWM7B,aAXN,GAaE,6BAAC,8BAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,EAAE,EAAEgC,YAFN;AAGE,IAAA,KAAK,EAAEnC,KAHT;AAIE,IAAA,SAAS,EAAEC;AAJb,KAMGJ,OANH,CAbF,CADF,CADF,GAyBI,IA1BN;AA4BA,SAAO;AACL,wBAAoBsC,YADf;AAELrC,IAAAA,MAFK;AAGLwC,IAAAA,MAAM,EAAEvB,WAHH;AAILwB,IAAAA,OAAO,EAAEzB,UAJJ;AAKLuB,IAAAA,UAAU,EAAErB,cALP;AAMLwB,IAAAA,WAAW,EAAE1B,UANR;AAOLiB,IAAAA,iBAPK;AAQLG,IAAAA,GAAG,EAAEtB,WARA;AASL6B,IAAAA,OAAO,EAAEL;AATJ,GAAP;AAWD;;AAED,SAASM,YAAT,CACEC,QADF,EAEiC;AAC/B,SAAO,OAAOA,QAAP,KAAoB,UAA3B;AACD;;AAEM,IAAMC,OAAyB,GAAG,WAA4B;AAAA,MAA3B;AAAED,IAAAA;AAAF,GAA2B;AAAA,MAAZE,KAAY;;AACnE,MAAMC,YAAY,GAAGpD,UAAU,CAACmD,KAAD,CAA/B;AAEA,MAAIE,MAAM,GAAGJ,QAAb;;AAEA,MAAMK,mBAAmB,qBACpB,mBAAKF,YAAL,EAAmB,CAAC,SAAD,EAAY,mBAAZ,EAAiC,QAAjC,CAAnB,CADoB,CAAzB;;AAIA,MAAI,2BAAeH,QAAf,CAAJ,EAA8B;AAC5BI,IAAAA,MAAM,GAAG,yBAAaJ,QAAb,kCACJK,mBADI;AAEPC,MAAAA,SAAS,EAAEH,YAAY,CAAChD,MAAb,aACJ6C,QAAQ,CAACE,KAAT,CAAeI,SADX,cAEPN,QAAQ,CAACE,KAAT,CAAeI;AAJZ,OAAT;AAMD,GAPD,MAOO,IAAIP,YAAY,CAACC,QAAD,CAAhB,EAA4B;AACjCI,IAAAA,MAAM,GAAGJ,QAAQ,iCACZK,mBADY;AAEfC,MAAAA,SAAS,EAAEH,YAAY,CAAChD,MAAb,GAAsB,OAAtB,GAAgC;AAF5B,OAAjB;AAID,GALM,MAKA;AAELoD,IAAAA,OAAO,CAACC,IAAR,qBACc,OAAOJ,MADrB;AAGD;;AAED,SACE,4DACGD,YAAY,CAACL,OADhB,EAEGM,MAFH,CADF;AAMD,CAlCM","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2020 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport { TextAlignProperty } from 'csstype'\nimport { Placement } from '@popperjs/core'\nimport React, {\n  cloneElement,\n  FC,\n  isValidElement,\n  useMemo,\n  useState,\n  ReactNode,\n  Ref,\n} from 'react'\nimport omit from 'lodash/omit'\nimport {\n  useCallbackRef,\n  useID,\n  usePopper,\n  UsePopperProps,\n  useForkedRef,\n} from '../utils'\nimport { OverlaySurface, SurfaceStyleProps } from '../Overlay/OverlaySurface'\nimport { Portal } from '../Portal'\nimport { TooltipContent } from './TooltipContent'\n\nexport interface UseTooltipProps {\n  /**\n   * Display and arrow that points to the trigger element on popovers\n   * @default true\n   */\n  arrow?: boolean\n\n  /**\n   * Specify a callback to be called before trying to close the Tooltip. This allows for\n   * use-cases where the user might lose work (think common \"Save before closing warning\" type flow)\n   * Specify a callback to be called each time this Tooltip is closed\n   */\n  canClose?: () => boolean\n\n  isOpen?: boolean\n  /**\n   * Can be one of: top, bottom, left, right, auto, with the modifiers: start,\n   * end. This value comes directly from popperjs. See\n   * https://popper.js.org/popper-documentation.html#Popper.placements for more\n   * info.\n   */\n  placement?: Placement\n  /**\n   * Content to display inside the tooltip. Can be a string or JSX.\n   */\n  content?: ReactNode\n  /**\n   * Specify a fixed content width.\n   * @default auto\n   */\n  width?: string\n  /**\n   * Specify the text alignment within tooltips.\n   * @default center\n   */\n  textAlign?: TextAlignProperty\n\n  /**\n   * The id of the span containing the tooltip text (if absent, a random id will be generated)\n   */\n  id?: string\n\n  /**\n   * The trigger element ref to use (if absent, one will be created and returned)\n   */\n  triggerElement?: HTMLElement | null\n\n  /**\n   * If true, the useTooltip hook will return nothing\n   */\n  disabled?: boolean\n\n  /**\n   * Customizes the style of the tooltip\n   */\n  surfaceStyles?: SurfaceStyleProps\n}\n\ntype TooltipRenderProp = (tooltipProps: {\n  'aria-describedby': string\n  className?: string\n  onBlur: () => void\n  onFocus: () => void\n  onMouseOut: (event: React.MouseEvent<Element, MouseEvent>) => void\n  onMouseOver: () => void\n  ref: Ref<any>\n}) => ReactNode\n\nexport interface TooltipProps extends UseTooltipProps {\n  content: ReactNode\n  /**\n   * Component to wrap. The HOC will listen for mouse events on this component, maintain the\n   * state of isOpen accordingly, and pass that state into the children or \"trigger\" element\n   */\n  children: ReactNode | TooltipRenderProp\n}\n\nexport function useTooltip({\n  arrow = true,\n  canClose,\n  content,\n  isOpen: initializeOpen = false,\n  width,\n  textAlign,\n  disabled,\n  surfaceStyles,\n  id,\n  triggerElement,\n  placement: propsPlacement = 'bottom',\n}: UseTooltipProps) {\n  const [isOpen, setIsOpen] = useState(initializeOpen)\n  const [surfaceElement, surfaceCallbackRef] = useCallbackRef()\n  const [newTriggerElement, callbackRef] = useCallbackRef()\n  // If the triggerElement is passed in props, use that instead of the new element\n  const element =\n    typeof triggerElement === 'undefined' ? newTriggerElement : triggerElement\n\n  const handleOpen = () => setIsOpen(true)\n  const handleClose = () => {\n    if (canClose && !canClose()) return\n    setIsOpen(false)\n  }\n\n  const handleMouseOut = (event: React.MouseEvent) => {\n    if (!isOpen) return\n\n    const related = event.relatedTarget\n\n    if (element && (element === related || element.contains(related as Node))) {\n      return\n    }\n\n    if (\n      surfaceElement &&\n      (surfaceElement === related || surfaceElement.contains(related as Node))\n    ) {\n      return\n    }\n\n    window.requestAnimationFrame(() => {\n      handleClose()\n    })\n  }\n\n  const usePopperProps: UsePopperProps = useMemo(\n    () => ({\n      anchor: element,\n      arrow,\n      options: {\n        modifiers: [\n          {\n            enabled: true,\n            name: 'flip',\n            options: {\n              flipVariations: true,\n            },\n          },\n        ],\n        placement: propsPlacement,\n      },\n    }),\n    [arrow, element, propsPlacement]\n  )\n  const {\n    arrowProps,\n    placement,\n    popperInstanceRef,\n    style,\n    targetRef,\n  } = usePopper(usePopperProps)\n\n  const ref = useForkedRef(targetRef, surfaceCallbackRef)\n\n  const guaranteedId = useID(id)\n\n  const popper =\n    isOpen && content && !disabled ? (\n      <Portal>\n        <OverlaySurface\n          arrow={arrow}\n          arrowProps={arrowProps}\n          eventHandlers={{ onMouseOut: handleMouseOut }}\n          placement={placement}\n          ref={ref}\n          style={style}\n          backgroundColor=\"inverse\"\n          borderRadius=\"medium\"\n          boxShadow={3}\n          color=\"inverseOn\"\n          {...surfaceStyles}\n        >\n          <TooltipContent\n            role=\"tooltip\"\n            id={guaranteedId}\n            width={width}\n            textAlign={textAlign}\n          >\n            {content}\n          </TooltipContent>\n        </OverlaySurface>\n      </Portal>\n    ) : null\n\n  return {\n    'aria-describedby': guaranteedId,\n    isOpen,\n    onBlur: handleClose,\n    onFocus: handleOpen,\n    onMouseOut: handleMouseOut,\n    onMouseOver: handleOpen,\n    popperInstanceRef,\n    ref: callbackRef,\n    tooltip: popper,\n  }\n}\n\nfunction isRenderProp(\n  children: ReactNode | TooltipRenderProp\n): children is TooltipRenderProp {\n  return typeof children === 'function'\n}\n\nexport const Tooltip: FC<TooltipProps> = ({ children, ...props }) => {\n  const tooltipProps = useTooltip(props)\n\n  let target = children\n\n  const tooltipPropsLabeled = {\n    ...omit(tooltipProps, ['tooltip', 'popperInstanceRef', 'isOpen']),\n  }\n\n  if (isValidElement(children)) {\n    target = cloneElement(children, {\n      ...tooltipPropsLabeled,\n      className: tooltipProps.isOpen\n        ? `${children.props.className} hover`\n        : children.props.className,\n    })\n  } else if (isRenderProp(children)) {\n    target = children({\n      ...tooltipPropsLabeled,\n      className: tooltipProps.isOpen ? 'hover' : '',\n    })\n  } else {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `Element \"${typeof target}\" can't be used as target for Tooltip`\n    )\n  }\n\n  return (\n    <>\n      {tooltipProps.tooltip}\n      {target}\n    </>\n  )\n}\n"],"file":"Tooltip.js"}