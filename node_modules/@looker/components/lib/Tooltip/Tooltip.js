"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTooltip = useTooltip;
exports.Tooltip = void 0;

var _react = _interopRequireWildcard(require("react"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _utils = require("../utils");

var _OverlaySurface = require("../Overlay/OverlaySurface");

var _Portal = require("../Portal");

var _TooltipContent = require("./TooltipContent");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function useTooltip(_ref) {
  var {
    arrow = true,
    canClose,
    content,
    isOpen: initializeOpen = false,
    width,
    textAlign,
    disabled,
    surfaceStyles,
    id,
    triggerElement,
    placement: propsPlacement = 'bottom'
  } = _ref;
  var [isOpen, setIsOpen] = (0, _react.useState)(initializeOpen);
  var [surfaceElement, surfaceCallbackRef] = (0, _utils.useCallbackRef)();
  var [newTriggerElement, callbackRef] = (0, _utils.useCallbackRef)();
  var element = typeof triggerElement === 'undefined' ? newTriggerElement : triggerElement;

  var handleOpen = () => setIsOpen(true);

  var handleClose = () => {
    if (canClose && !canClose()) return;
    setIsOpen(false);
  };

  var handleMouseOut = event => {
    if (!isOpen) return;
    var related = event.relatedTarget;

    if (element && (element === related || element.contains(related))) {
      return;
    }

    if (surfaceElement && (surfaceElement === related || surfaceElement.contains(related))) {
      return;
    }

    window.requestAnimationFrame(() => {
      handleClose();
    });
  };

  var usePopperProps = (0, _react.useMemo)(() => ({
    anchor: element,
    arrow,
    options: {
      modifiers: [{
        enabled: true,
        name: 'flip',
        options: {
          flipVariations: true
        }
      }],
      placement: propsPlacement
    }
  }), [arrow, element, propsPlacement]);
  var {
    arrowProps,
    placement,
    popperInstanceRef,
    style,
    targetRef
  } = (0, _utils.usePopper)(usePopperProps);
  var ref = (0, _utils.useForkedRef)(targetRef, surfaceCallbackRef);
  var guaranteedId = (0, _utils.useID)(id);
  var popper = isOpen && content && !disabled ? _react.default.createElement(_Portal.Portal, null, _react.default.createElement(_OverlaySurface.OverlaySurface, _extends({
    arrow: arrow,
    arrowProps: arrowProps,
    eventHandlers: {
      onMouseOut: handleMouseOut
    },
    placement: placement,
    ref: ref,
    style: style,
    backgroundColor: "inverse",
    borderRadius: "medium",
    boxShadow: 3,
    color: "inverseOn"
  }, surfaceStyles), _react.default.createElement(_TooltipContent.TooltipContent, {
    role: "tooltip",
    id: guaranteedId,
    width: width,
    textAlign: textAlign
  }, content))) : null;
  return {
    'aria-describedby': guaranteedId,
    isOpen,
    onBlur: handleClose,
    onFocus: handleOpen,
    onMouseOut: handleMouseOut,
    onMouseOver: handleOpen,
    popperInstanceRef,
    ref: callbackRef,
    tooltip: popper
  };
}

function isRenderProp(children) {
  return typeof children === 'function';
}

var Tooltip = (_ref2) => {
  var {
    children
  } = _ref2,
      props = _objectWithoutProperties(_ref2, ["children"]);

  var tooltipProps = useTooltip(props);
  var target = children;

  var tooltipPropsLabeled = _objectSpread({}, (0, _omit.default)(tooltipProps, ['tooltip', 'popperInstanceRef', 'isOpen']));

  if ((0, _react.isValidElement)(children)) {
    target = (0, _react.cloneElement)(children, _objectSpread(_objectSpread({}, tooltipPropsLabeled), {}, {
      className: tooltipProps.isOpen ? "".concat(children.props.className, " hover") : children.props.className
    }));
  } else if (isRenderProp(children)) {
    target = children(_objectSpread(_objectSpread({}, tooltipPropsLabeled), {}, {
      className: tooltipProps.isOpen ? 'hover' : ''
    }));
  } else {
    console.warn("Element \"".concat(typeof target, "\" can't be used as target for Tooltip"));
  }

  return _react.default.createElement(_react.default.Fragment, null, tooltipProps.tooltip, target);
};

exports.Tooltip = Tooltip;
//# sourceMappingURL=Tooltip.js.map