import { TextAlignProperty } from 'csstype';
import { Placement } from '@popperjs/core';
import React, { FC, ReactNode, Ref } from 'react';
import { SurfaceStyleProps } from '../Overlay/OverlaySurface';
export interface UseTooltipProps {
    arrow?: boolean;
    canClose?: () => boolean;
    isOpen?: boolean;
    placement?: Placement;
    content?: ReactNode;
    width?: string;
    textAlign?: TextAlignProperty;
    id?: string;
    triggerElement?: HTMLElement | null;
    disabled?: boolean;
    surfaceStyles?: SurfaceStyleProps;
}
declare type TooltipRenderProp = (tooltipProps: {
    'aria-describedby': string;
    className?: string;
    onBlur: () => void;
    onFocus: () => void;
    onMouseOut: (event: React.MouseEvent<Element, MouseEvent>) => void;
    onMouseOver: () => void;
    ref: Ref<any>;
}) => ReactNode;
export interface TooltipProps extends UseTooltipProps {
    content: ReactNode;
    children: ReactNode | TooltipRenderProp;
}
export declare function useTooltip({ arrow, canClose, content, isOpen: initializeOpen, width, textAlign, disabled, surfaceStyles, id, triggerElement, placement: propsPlacement, }: UseTooltipProps): {
    'aria-describedby': string;
    isOpen: boolean;
    onBlur: () => void;
    onFocus: () => void;
    onMouseOut: (event: React.MouseEvent<Element, MouseEvent>) => void;
    onMouseOver: () => void;
    popperInstanceRef: React.MutableRefObject<import("@popperjs/core").Instance | undefined>;
    ref: (node: HTMLElement | null) => void;
    tooltip: JSX.Element | null;
};
export declare const Tooltip: FC<TooltipProps>;
export {};
