"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Calendar = void 0;

var _react = _interopRequireDefault(require("react"));

var _reactDayPicker = _interopRequireWildcard(require("react-day-picker"));

require("react-day-picker/lib/style.css");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _has = _interopRequireDefault(require("lodash/has"));

var _polished = require("polished");

var _noop = _interopRequireDefault(require("lodash/noop"));

var _designTokens = require("@looker/design-tokens");

var _InputText = require("../Form/Inputs/InputText");

var _calendarSize = require("./calendar-size");

var _CalendarContext = require("./CalendarContext");

var _CalendarNav = require("./CalendarNav");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NoopComponent = () => null;

var InternalCalendar = (_ref) => {
  var {
    localization = {},
    onDayClick,
    className,
    size,
    showNextButton = true,
    showPreviousButton = true,
    onMonthChange,
    onNextClick,
    onNowClick,
    onPrevClick,
    viewMonth,
    selectedDates,
    disabled
  } = _ref;
  var renderDateRange = selectedDates && (0, _has.default)(selectedDates, 'from');
  var modifiers = renderDateRange ? selectedDates : {};

  var disableCallback = function disableCallback() {
    var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _noop.default;
    return function () {
      return disabled ? (0, _noop.default)() : cb(...arguments);
    };
  };

  var formatMonthTitle = month => {
    if (localization.months) {
      return "".concat(localization.months[month.getMonth()], " ").concat(month.getFullYear());
    } else {
      return _reactDayPicker.LocaleUtils.formatMonthTitle(month);
    }
  };

  return _react.default.createElement(_CalendarContext.CalendarContext.Provider, {
    value: {
      onNextClick: disableCallback(onNextClick),
      onNowClick: disableCallback(onNowClick),
      onPrevClick: disableCallback(onPrevClick),
      showNextButton: !disabled && showNextButton,
      showPreviousButton: !disabled && showPreviousButton,
      size
    }
  }, _react.default.createElement(_reactDayPicker.default, _extends({}, localization, {
    localeUtils: _objectSpread(_objectSpread({}, _reactDayPicker.LocaleUtils), {}, {
      formatMonthTitle
    }),
    className: "".concat(renderDateRange && 'render-date-range', " ").concat(className),
    selectedDays: selectedDates,
    month: viewMonth,
    showOutsideDays: true,
    onDayClick: disableCallback(onDayClick),
    navbarElement: _CalendarNav.CalendarNav,
    captionElement: NoopComponent,
    modifiers: modifiers,
    onMonthChange: onMonthChange
  })));
};

var Calendar = (0, _styledComponents.default)(InternalCalendar).withConfig({
  displayName: "Calendar",
  componentId: "sc-16c71io-0"
})(["", " ", " .DayPicker-wrapper{border:1px solid transparent;padding:0;&:focus{outline:none;", "}}.DayPicker-Month{margin:0;padding:0;}.DayPicker-Body{display:grid;grid-gap:1px;}.DayPicker-Week,.DayPicker-WeekdaysRow{display:grid;grid-template-columns:repeat(7,auto);}.DayPicker-Day{", " align-items:center;border:1px solid transparent;color:", ";cursor:", ";display:grid;justify-items:center;line-height:1;padding:0;transition:background-color 110ms linear;&.DayPicker-Day--outside{color:", ";}&--today{color:", ";}&--selected:not(.DayPicker-Day--disabled):not(.DayPicker-Day--outside){background-color:", ";position:static;&:hover{background-color:", ";}}&:focus{border-color:", ";border-width:2px;outline:none;}}&.render-date-range{.DayPicker-Day--selected{border-radius:0;&:not(.DayPicker-Day--from):first-child{border-bottom-left-radius:", ";border-top-left-radius:", ";}&:not(.DayPicker-Day--to):last-child{border-bottom-right-radius:", ";border-top-right-radius:", ";}&.DayPicker-Day--outside,&:not(.DayPicker-Day--to):not(.DayPicker-Day--from){background-color:", ";color:", ";}&:not(.DayPicker-Day--to):not(.DayPicker-Day--from):not(.DayPicker-Day--outside){color:", ";}}.DayPicker-Day--from{border-bottom-left-radius:50%;border-top-left-radius:50%;}.DayPicker-Day--to{border-bottom-right-radius:50%;border-top-right-radius:50%;}}&:not(.DayPicker--interactionDisabled){.DayPicker-Day:not(.DayPicker-Day--disabled):not(.DayPicker-Day--selected):not(.DayPicker-Day--outside):hover{&:hover{background-color:", ";color:", ";}}}"], _designTokens.reset, _calendarSize.calendarSpacing, (_ref2) => {
  var {
    disabled
  } = _ref2;
  return !disabled && _InputText.inputTextFocus;
}, _calendarSize.calendarSize, (_ref3) => {
  var {
    theme: {
      colors
    },
    disabled
  } = _ref3;
  return disabled ? colors.text4 : colors.text2;
}, (_ref4) => {
  var {
    disabled
  } = _ref4;
  return disabled ? 'default' : 'pointer';
}, (_ref5) => {
  var {
    theme: {
      colors
    }
  } = _ref5;
  return colors.text6;
}, (_ref6) => {
  var {
    theme: {
      colors
    },
    disabled
  } = _ref6;
  return !disabled && colors.key;
}, (_ref7) => {
  var {
    theme: {
      colors
    },
    disabled
  } = _ref7;
  return disabled ? colors.neutral : colors.key;
}, (_ref8) => {
  var {
    theme: {
      colors
    },
    disabled
  } = _ref8;
  return disabled ? colors.neutralInteractive : colors.keyInteractive;
}, (_ref9) => {
  var {
    theme: {
      colors
    },
    disabled
  } = _ref9;
  return disabled ? colors.neutralBorder : colors.keyBorder;
}, (_ref10) => {
  var {
    theme: {
      radii
    }
  } = _ref10;
  return radii.medium;
}, (_ref11) => {
  var {
    theme: {
      radii
    }
  } = _ref11;
  return radii.medium;
}, (_ref12) => {
  var {
    theme: {
      radii
    }
  } = _ref12;
  return radii.medium;
}, (_ref13) => {
  var {
    theme: {
      radii
    }
  } = _ref13;
  return radii.medium;
}, (_ref14) => {
  var {
    theme: {
      colors
    },
    disabled
  } = _ref14;
  return disabled ? colors.neutralAccent : colors.keyAccent;
}, (_ref15) => {
  var {
    theme: {
      colors
    }
  } = _ref15;
  return (0, _polished.mix)(0.65, colors.keyAccent, colors.neutralInteractive);
}, (_ref16) => {
  var {
    theme: {
      colors
    }
  } = _ref16;
  return colors.neutralInteractive;
}, (_ref17) => {
  var {
    theme: {
      colors
    },
    disabled
  } = _ref17;
  return disabled ? 'transparent' : colors.keyAccent;
}, (_ref18) => {
  var {
    theme: {
      colors
    },
    disabled
  } = _ref18;
  return !disabled && colors.key;
});
exports.Calendar = Calendar;
Calendar.defaultProps = {
  size: 'medium'
};
//# sourceMappingURL=Calendar.js.map