"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CalendarNav = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _Tooltip = require("../Tooltip");

var _Button = require("../Button");

var _Text = require("../Text");

var _CalendarContext = require("./CalendarContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var headingSizeMap = size => {
  switch (size) {
    case 'small':
      return 'h6';

    case 'medium':
      return 'h5';

    case 'large':
      return 'h4';

    default:
      return 'h5';
  }
};

var CalendarNav = (_ref) => {
  var {
    month,
    labels,
    localeUtils,
    nextMonth,
    previousMonth
  } = _ref;
  var {
    size,
    onNowClick = _noop.default,
    onNextClick = _noop.default,
    onPrevClick = _noop.default,
    showPreviousButton,
    showNextButton
  } = (0, _react.useContext)(_CalendarContext.CalendarContext);

  var handleNextClick = e => {
    e.preventDefault();
    onNextClick(nextMonth);
  };

  var handlePreviousClick = e => {
    e.preventDefault();
    onPrevClick(previousMonth);
  };

  var handleLabelClick = () => {
    onNowClick(new Date(Date.now()));
  };

  return _react.default.createElement(NavGrid, null, _react.default.createElement(NextButtonWrapper, null, showPreviousButton && _react.default.createElement(_Button.IconButton, {
    icon: "CaretLeft",
    label: labels.previousMonth,
    color: "neutral",
    size: size,
    onClick: handlePreviousClick
  })), _react.default.createElement(_Tooltip.Tooltip, {
    content: "View Current Month"
  }, _react.default.createElement(_Button.ButtonTransparent, {
    onClick: handleLabelClick,
    color: "neutral"
  }, _react.default.createElement(_Text.Heading, {
    as: headingSizeMap(size),
    fontWeight: "semiBold"
  }, localeUtils.formatMonthTitle(month)))), _react.default.createElement(PrevButtonWrapper, null, showNextButton && _react.default.createElement(_Button.IconButton, {
    icon: "CaretRight",
    label: labels.nextMonth,
    color: "neutral",
    size: size,
    onClick: handleNextClick,
    style: {
      justifySelf: 'right'
    }
  })));
};

exports.CalendarNav = CalendarNav;

var NavGrid = _styledComponents.default.div.withConfig({
  displayName: "CalendarNav__NavGrid",
  componentId: "sc-4c8g0d-0"
})(["align-items:center;display:grid;grid-template-columns:40px 1fr 40px;justify-items:center;"]);

var NextButtonWrapper = _styledComponents.default.div.withConfig({
  displayName: "CalendarNav__NextButtonWrapper",
  componentId: "sc-4c8g0d-1"
})(["justify-self:left;"]);

var PrevButtonWrapper = _styledComponents.default.div.withConfig({
  displayName: "CalendarNav__PrevButtonWrapper",
  componentId: "sc-4c8g0d-2"
})(["justify-self:right;"]);
//# sourceMappingURL=CalendarNav.js.map