"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useTabs = useTabs;
exports.Tabs = void 0;

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function useTabs(props) {
  var defaultIndex = props && props.defaultIndex || 0;
  var onChange = props && props.onChange;
  var isControlled = props && props.isControlled || false;
  var [selectedIndex, setSelectedIndex] = (0, _react.useState)(defaultIndex);
  return {
    onSelectTab: index => {
      onChange && onChange(index);

      if (!isControlled) {
        setSelectedIndex(index);
      }
    },
    selectedIndex
  };
}

var Tabs = (_ref) => {
  var {
    children,
    index: controlledIndex,
    defaultIndex,
    onChange
  } = _ref;
  var {
    current: isControlled
  } = (0, _react.useRef)(controlledIndex !== undefined);

  if (!isControlled && controlledIndex !== undefined) {
    console.warn('Tabs is changing from uncontrolled to controlled. Tabs should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled Tabs for the lifetime of the component. Check the `index` prop being passed in.');
  }

  if (isControlled && controlledIndex === undefined) {
    console.warn('Tabs is changing from uncontrolled to controlled. Tabs should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled Tabs for the lifetime of the component. Check the `index` prop being passed in.');
  }

  var tabs = useTabs({
    defaultIndex,
    isControlled,
    onChange
  });

  var clonedChildren = _react.Children.map(children, child => {
    return (0, _react.cloneElement)(child, tabs);
  });

  return _react.default.createElement(_react.default.Fragment, null, clonedChildren);
};

exports.Tabs = Tabs;
//# sourceMappingURL=Tabs.js.map