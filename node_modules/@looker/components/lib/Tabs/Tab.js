"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tab = void 0;

var _react = _interopRequireWildcard(require("react"));

var _polished = require("polished");

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var TabStyle = _styledComponents.default.button.withConfig({
  displayName: "Tab__TabStyle",
  componentId: "eojndt-0"
})(["", " ", " ", " ", " background:transparent;border:none;border-bottom:3px solid;border-bottom-color:", ";border-radius:0;color:", ";cursor:pointer;& + &{margin-left:", ";}&:active{border-bottom-color:", ";}&:active,&:hover{border-bottom-color:transparent;}&:focus{outline:none;}", " &:hover{border-bottom-color:", ";}&:disabled{border-bottom-color:transparent;color:", ";cursor:default;}"], _designTokens.reset, _designTokens.layout, _designTokens.space, _designTokens.typography, props => props.selected ? props.theme.colors.key : 'transparent', props => props.selected ? props.theme.colors.text1 : props.theme.colors.text4, props => props.theme.space.xlarge, props => props.selected ? props.theme.colors.key : props.theme.colors.text4, (_ref) => {
  var {
    focusVisible,
    theme
  } = _ref;
  return focusVisible && "box-shadow: 0 0 0 0.15rem ".concat((0, _polished.rgba)(theme.colors.keyFocus, 0.25), ";");
}, props => props.selected ? props.theme.colors.key : props.theme.colors.ui3, (_ref2) => {
  var {
    theme
  } = _ref2;
  return theme.colors.text6;
});

var TabJSX = (0, _react.forwardRef)((props, ref) => {
  var {
    children,
    disabled,
    onBlur,
    onKeyUp,
    onSelect
  } = props,
      restProps = _objectWithoutProperties(props, ["children", "disabled", "onBlur", "onKeyUp", "onSelect"]);

  var [isFocusVisible, setFocusVisible] = (0, _react.useState)(false);

  var handleOnKeyUp = event => {
    setFocusVisible(true);
    onKeyUp && onKeyUp(event);
  };

  var handleOnBlur = event => {
    setFocusVisible(false);
    onBlur && onBlur(event);
  };

  var onClick = () => {
    if (!disabled && onSelect) {
      onSelect();
    }

    setFocusVisible(false);
  };

  return _react.default.createElement(TabStyle, _extends({
    focusVisible: isFocusVisible,
    onKeyUp: handleOnKeyUp,
    onBlur: handleOnBlur,
    onClick: onClick,
    disabled: disabled
  }, restProps, {
    ref: ref
  }), children);
});
TabJSX.displayName = 'TabJSX';
var Tab = (0, _styledComponents.default)(TabJSX).withConfig({
  displayName: "Tab",
  componentId: "eojndt-1"
})([""]);
exports.Tab = Tab;
Tab.defaultProps = {
  fontSize: 'small',
  fontWeight: 'semiBold',
  minWidth: '3rem',
  pb: 'small',
  pt: 'xsmall'
};
//# sourceMappingURL=Tab.js.map