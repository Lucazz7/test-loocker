"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Chip = void 0;

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _polished = require("polished");

var _Button = require("../Button");

var _Text = require("../Text");

var _truncate = require("../Text/truncate");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ChipStyle = _styledComponents.default.span.withConfig({
  displayName: "Chip__ChipStyle",
  componentId: "sc-1stj55z-0"
})(["", " ", " ", " ", " ", " ", "{background-color:transparent;flex-shrink:0;}align-items:center;background-color:", ";border-radius:4px;color:", ";display:flex;justify-items:center;&:hover{background-color:", ";}&:focus{background-color:", ";outline:none;}", " ", ""], _designTokens.reset, _designTokens.color, _designTokens.layout, _designTokens.space, _designTokens.typography, _Button.IconButton, (_ref) => {
  var {
    theme
  } = _ref;
  return theme.colors.keySubtle;
}, (_ref2) => {
  var {
    theme
  } = _ref2;
  return theme.colors.keyInteractive;
}, props => props.theme.colors.keyAccent, (_ref3) => {
  var {
    theme
  } = _ref3;
  return (0, _polished.darken)(0.1, theme.colors.keyAccent).toUpperCase();
}, (_ref4) => {
  var {
    focusVisible,
    theme: {
      colors
    }
  } = _ref4;
  return focusVisible && "box-shadow: 0 0 0 0.15rem ".concat((0, _polished.rgba)(colors.keyFocus, 0.25), ";");
}, (_ref5) => {
  var {
    disabled,
    theme: {
      colors
    }
  } = _ref5;
  return disabled && "color: ".concat(colors.neutral, ";\n      background-color: ").concat(colors.neutralAccent, ";\n\n      &:hover {\n        background-color: ").concat(colors.neutralAccent, ";\n      }\n    ");
});

var ChipLabel = (0, _styledComponents.default)(_Text.Text).withConfig({
  displayName: "Chip__ChipLabel",
  componentId: "sc-1stj55z-1"
})(["", ""], _truncate.truncate);
var ChipJSX = (0, _react.forwardRef)((props, ref) => {
  var {
    children,
    disabled,
    fontSize,
    onBlur,
    onDelete,
    onKeyUp,
    onKeyDown,
    truncate
  } = props,
      restProps = _objectWithoutProperties(props, ["children", "disabled", "fontSize", "onBlur", "onDelete", "onKeyUp", "onKeyDown", "truncate"]);

  var [isFocusVisible, setFocusVisible] = (0, _react.useState)(false);

  var handleOnKeyUp = event => {
    setFocusVisible(true);
    onKeyUp && onKeyUp(event);
  };

  var handleOnBlur = event => {
    setFocusVisible(false);
    onBlur && onBlur(event);
  };

  var handleOnKeyDown = event => {
    setFocusVisible(false);

    if (event.key === 'Backspace') {
      onDelete && onDelete();
    }

    onKeyDown && onKeyDown(event);
    setFocusVisible(false);
  };

  var handleDelete = () => {
    if (!disabled) {
      onDelete && onDelete();
    }

    setFocusVisible(false);
  };

  return _react.default.createElement(ChipStyle, _extends({
    disabled: disabled,
    focusVisible: isFocusVisible,
    onBlur: handleOnBlur,
    onKeyDown: handleOnKeyDown,
    onKeyUp: handleOnKeyUp,
    ref: ref,
    tabIndex: disabled ? undefined : 0
  }, restProps), _react.default.createElement(ChipLabel, {
    fontSize: fontSize,
    truncate: truncate
  }, children), onDelete && !disabled && _react.default.createElement(_Button.IconButton, {
    disabled: disabled,
    icon: "Close",
    label: "Delete",
    ml: "xsmall",
    onClick: handleDelete,
    size: "xxsmall"
  }));
});
ChipJSX.displayName = 'ChipJSX';
var Chip = (0, _styledComponents.default)(ChipJSX).withConfig({
  displayName: "Chip",
  componentId: "sc-1stj55z-2"
})([""]);
exports.Chip = Chip;
Chip.defaultProps = {
  fontSize: 'xsmall',
  fontWeight: 'semiBold',
  height: 28,
  maxWidth: 320,
  mb: 'xxsmall',
  minWidth: 44,
  px: 'xsmall',
  py: 'xxsmall',
  truncate: true
};
//# sourceMappingURL=Chip.js.map