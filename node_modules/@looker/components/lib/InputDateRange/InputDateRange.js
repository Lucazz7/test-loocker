"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputDateRange = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _partial = _interopRequireDefault(require("lodash/partial"));

var _min = _interopRequireDefault(require("lodash/min"));

var _max = _interopRequireDefault(require("lodash/max"));

var _isEmpty = _interopRequireDefault(require("lodash/isEmpty"));

var _isEqual = _interopRequireDefault(require("lodash/isEqual"));

var _values = _interopRequireDefault(require("lodash/values"));

var _Icon = require("../Icon");

var _InputText = require("../Form/Inputs/InputText");

var _InlineInputText = require("../Form/Inputs/InlineInputText");

var _Calendar = require("../Calendar");

var _i18n = require("../utils/i18n");

var _useID = require("../utils/useID");

var _useReadOnlyWarn = require("../utils/useReadOnlyWarn");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var transformMonth = function transformMonth() {
  var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date(Date.now());
  var monthDiff = arguments.length > 1 ? arguments[1] : undefined;
  var newDate = new Date(date);
  newDate.setDate(1);
  newDate.setMonth(newDate.getMonth() + monthDiff);
  return newDate;
};

var chooseDateToSet = function chooseDateToSet(activeDateInput, newDate) {
  var dateRange = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var {
    from,
    to
  } = dateRange;

  if (newDate) {
    if (from && newDate < from) {
      return 'from';
    } else if (to && newDate > to) {
      return 'to';
    }
  }

  return activeDateInput;
};

var isDateRangeInView = (dateRange, viewMonth) => {
  if (!dateRange.from || !dateRange.to) {
    return false;
  }

  var monthOneTimestamp = viewMonth.getTime();
  var monthTwoTimestamp = transformMonth(viewMonth, 2).getTime();
  var fromTimestamp = dateRange.from.getTime();
  var toTimestamp = dateRange.to.getTime();

  if (fromTimestamp < monthOneTimestamp || toTimestamp >= monthTwoTimestamp) {
    return false;
  }

  return true;
};

var InputDateRange = (0, _react.forwardRef)((_ref, ref) => {
  var {
    defaultValue = {},
    localization,
    dateStringLocale,
    onChange,
    onValidationFail,
    validationType,
    value,
    id,
    disabled
  } = _ref;
  (0, _useReadOnlyWarn.useReadOnlyWarn)('InputDateRange', value, onChange);
  var [dateRange, setDateRange] = (0, _react.useState)(value || defaultValue);
  var [activeDateInput, setActiveDateInput] = (0, _react.useState)('from');
  var [viewMonth, setViewMonth] = (0, _react.useState)(value && value.from ? value.from : defaultValue && defaultValue.from ? defaultValue.from : new Date(Date.now()));
  var viewNextMonth = new Date(viewMonth);
  viewNextMonth.setMonth(viewNextMonth.getMonth() + 1);
  var [fromTextInputValue, setFromTextInputValue] = (0, _react.useState)((0, _i18n.formatDateString)(dateRange.from, dateStringLocale));
  var [validFromDate, setValidFromDate] = (0, _react.useState)(validationType !== 'error');
  var fromID = (0, _useID.useID)(id && "from-".concat(id));
  var [toTextInputValue, setToTextInputValue] = (0, _react.useState)((0, _i18n.formatDateString)(dateRange.to, dateStringLocale));
  var [validToDate, setValidToDate] = (0, _react.useState)(validationType !== 'error');
  var toID = (0, _useID.useID)(id && "to-".concat(id));
  var inputs = {
    from: {
      isValid: validFromDate,
      setIsValid: setValidFromDate,
      setValue: setFromTextInputValue,
      value: fromTextInputValue
    },
    to: {
      isValid: validToDate,
      setIsValid: setValidToDate,
      setValue: setToTextInputValue,
      value: toTextInputValue
    }
  };
  (0, _react.useEffect)(() => {
    if (value && !(0, _isEqual.default)(value, dateRange)) {
      setDateRange(value);
      value.from && inputs.from.setValue((0, _i18n.formatDateString)(value.from, dateStringLocale));
      value.to && inputs.to.setValue((0, _i18n.formatDateString)(value.to, dateStringLocale));
      value.from && !isDateRangeInView(value, viewMonth) && setViewMonth(value.from);
    }
  }, [inputs.from, inputs.to, value, onChange]);

  var toggleActiveDateInput = () => {
    if (activeDateInput === 'from') {
      setActiveDateInput('to');
    } else {
      setActiveDateInput('from');
    }
  };

  var handleDateChange = (dateToSet, date) => {
    var newDateRange = _objectSpread(_objectSpread({}, dateRange), {}, {
      [dateToSet]: date
    });

    if (activeDateInput === 'from') {
      newDateRange.to = (0, _max.default)((0, _values.default)(newDateRange));
      newDateRange.from = (0, _min.default)((0, _values.default)(newDateRange));
    } else {
      newDateRange.from = (0, _min.default)((0, _values.default)(newDateRange));
      newDateRange.to = (0, _max.default)((0, _values.default)(newDateRange));
    }

    var nonActiveInput = dateToSet === 'from' ? 'to' : 'from';
    inputs[nonActiveInput].setValue((0, _i18n.formatDateString)(newDateRange[nonActiveInput], dateStringLocale));

    if (!validationType) {
      inputs.from.isValid || inputs.from.setIsValid(true);
      inputs.to.isValid || inputs.to.setIsValid(true);
    }

    setDateRange(newDateRange);

    if ((0, _isFunction.default)(onChange)) {
      onChange(newDateRange);
    }
  };

  var handleCalendarClick = date => {
    var dateToSet = chooseDateToSet(activeDateInput, date, dateRange);
    inputs[dateToSet].setValue((0, _i18n.formatDateString)(date, dateStringLocale));
    handleDateChange(dateToSet, date);

    if (dateToSet === activeDateInput) {
      toggleActiveDateInput();
    }
  };

  var handleTextInputChange = e => {
    var value = e.target.value;
    inputs[activeDateInput].setValue(value);

    if (value.length === 0) {
      handleDateChange(activeDateInput);
    } else {
      var parsedValue = (0, _i18n.parseDateFromString)(value, dateStringLocale);

      if (parsedValue) {
        var newMonthFocus = activeDateInput === 'to' ? transformMonth(parsedValue, -1) : parsedValue;
        setViewMonth(newMonthFocus);
        handleDateChange(activeDateInput, parsedValue);
      }
    }
  };

  var handleValidation = e => {
    if (!validationType) {
      var _value = e.target.value;
      var isValid = _value.length === 0 || !!(0, _i18n.parseDateFromString)(_value, dateStringLocale);
      inputs[activeDateInput].setIsValid(isValid);

      if (!isValid && (0, _isFunction.default)(onValidationFail)) {
        onValidationFail(_value);
      }
    }
  };

  var handleNextClick = () => {
    setViewMonth(transformMonth(viewMonth, 1));
  };

  var handlePrevClick = () => {
    setViewMonth(transformMonth(viewMonth, -1));
  };

  var handleNowClick = () => {
    setViewMonth(new Date(Date.now()));
  };

  var handleTextInputFocus = label => setActiveDateInput(label);

  var handleMonthChange = (viewMonthDiff, month) => {
    setViewMonth(transformMonth(month, viewMonthDiff));
  };

  return _react.default.createElement(InputDateRangeWrapper, {
    ref: ref
  }, _react.default.createElement(InputTextGroupWrapper, {
    disabled: disabled,
    active: activeDateInput === 'from',
    validationType: inputs.from.isValid && inputs.to.isValid ? undefined : 'error'
  }, _react.default.createElement(InputTextWrapper, {
    inputLength: inputs.from.value.length
  }, _react.default.createElement(_InlineInputText.InlineInputTextBase, {
    placeholder: "Date (".concat((0, _i18n.formatDateString)(new Date(Date.now()), dateStringLocale), ")"),
    value: inputs.from.value,
    onChange: handleTextInputChange,
    onBlur: handleValidation,
    "data-testid": "date-from-text-input",
    id: fromID,
    onFocus: (0, _partial.default)(handleTextInputFocus, 'from'),
    fontSize: "small",
    disabled: disabled
  })), _react.default.createElement(HyphenWrapper, {
    hasInputValues: !(0, _isEmpty.default)(dateRange)
  }, "\u2013"), _react.default.createElement(InputTextWrapper, {
    inputLength: inputs.to.value.length
  }, _react.default.createElement(_InlineInputText.InlineInputTextBase, {
    placeholder: "Date (".concat((0, _i18n.formatDateString)(new Date(Date.now()), dateStringLocale), ")"),
    value: inputs.to.value,
    onChange: handleTextInputChange,
    onBlur: handleValidation,
    "data-testid": "date-to-text-input",
    id: toID,
    onFocus: (0, _partial.default)(handleTextInputFocus, 'to'),
    fontSize: "small",
    disabled: disabled
  })), inputs.from.isValid && inputs.to.isValid || _react.default.createElement(IconWrapper, null, _react.default.createElement(_Icon.Icon, {
    key: "warning",
    name: "CircleInfo",
    size: 20,
    color: "critical",
    mr: "xxsmall"
  }))), _react.default.createElement(MultiCalendarLayout, null, _react.default.createElement(CalendarWrapper, null, _react.default.createElement(_Calendar.Calendar, {
    selectedDates: dateRange,
    onDayClick: handleCalendarClick,
    localization: localization,
    viewMonth: viewMonth,
    onNowClick: handleNowClick,
    onPrevClick: handlePrevClick,
    showNextButton: false,
    onMonthChange: (0, _partial.default)(handleMonthChange, 0),
    disabled: disabled
  })), _react.default.createElement(CalendarWrapper, null, _react.default.createElement(_Calendar.Calendar, {
    selectedDates: dateRange,
    onDayClick: handleCalendarClick,
    localization: localization,
    viewMonth: viewNextMonth,
    onNowClick: handleNowClick,
    onNextClick: handleNextClick,
    showPreviousButton: false,
    onMonthChange: (0, _partial.default)(handleMonthChange, -1),
    disabled: disabled
  }))));
});
exports.InputDateRange = InputDateRange;
InputDateRange.displayName = 'InputDateRange';

var HyphenWrapper = _styledComponents.default.div.withConfig({
  displayName: "InputDateRange__HyphenWrapper",
  componentId: "sc-18en5u-0"
})(["color:", ";"], (_ref2) => {
  var {
    theme,
    hasInputValues
  } = _ref2;
  return hasInputValues ? theme.colors.text3 : theme.colors.text6;
});

var InputDateRangeWrapper = _styledComponents.default.div.withConfig({
  displayName: "InputDateRange__InputDateRangeWrapper",
  componentId: "sc-18en5u-1"
})(["width:100%;"]);

var MultiCalendarLayout = _styledComponents.default.div.withConfig({
  displayName: "InputDateRange__MultiCalendarLayout",
  componentId: "sc-18en5u-2"
})(["display:inline-grid;grid-column-gap:", ";grid-template-columns:1fr 1fr;"], (_ref3) => {
  var {
    theme
  } = _ref3;
  return theme.space.large;
});

var InputTextGroupWrapper = _styledComponents.default.div.withConfig({
  displayName: "InputDateRange__InputTextGroupWrapper",
  componentId: "sc-18en5u-3"
})(["", " align-items:center;display:inline-grid;grid-gap:", ";grid-template-columns:auto auto auto 1fr;margin:", " 0;padding:0 ", ";width:100%;&:hover{", "}&:focus-within{", "}", " ", ""], _InputText.inputCSS, (_ref4) => {
  var {
    theme
  } = _ref4;
  return theme.space.xsmall;
}, (_ref5) => {
  var {
    theme: {
      space
    }
  } = _ref5;
  return space.xxsmall;
}, (_ref6) => {
  var {
    theme: {
      space
    }
  } = _ref6;
  return space.small;
}, _InputText.inputTextHover, _InputText.inputTextFocus, (_ref7) => {
  var {
    disabled
  } = _ref7;
  return disabled && _InputText.inputTextDisabled;
}, _InputText.inputTextValidation);

var IconWrapper = _styledComponents.default.div.withConfig({
  displayName: "InputDateRange__IconWrapper",
  componentId: "sc-18en5u-4"
})(["justify-self:right;"]);

var InputTextWrapper = _styledComponents.default.div.withConfig({
  displayName: "InputDateRange__InputTextWrapper",
  componentId: "sc-18en5u-5"
})(["padding:", " 0;", "{height:", ";&:focus-within{background:", ";}}"], (_ref8) => {
  var {
    theme: {
      space
    }
  } = _ref8;
  return space.xxsmall;
}, _InlineInputText.InlineInputTextBase, (_ref9) => {
  var {
    theme
  } = _ref9;
  return theme.lineHeights.large;
}, (_ref10) => {
  var {
    theme
  } = _ref10;
  return theme.colors.keyAccent;
});

var CalendarWrapper = _styledComponents.default.div.withConfig({
  displayName: "InputDateRange__CalendarWrapper",
  componentId: "sc-18en5u-6"
})(["", "{padding:0;}"], _Calendar.Calendar);
//# sourceMappingURL=InputDateRange.js.map