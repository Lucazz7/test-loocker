"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useActionListSortManager = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ActionList = require("../ActionList");

var _ActionListItem = require("../ActionListItem");

var _ActionListItemColumn = require("../ActionListItemColumn");

var _ = require(".");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var useActionListSortManager = (actionListData, actionListColumns, generateActions) => {
  var [data, setData] = (0, _react.useState)(actionListData);
  var [columns, setColumns] = (0, _react.useState)(actionListColumns);

  var onSort = (id, sortDirection) => {
    var {
      columns: sortedColumns,
      data: sortedData
    } = (0, _.doDefaultActionListSort)(data, columns, id, sortDirection);
    setData(sortedData);
    setColumns(sortedColumns);
  };

  var items = data.map(dataObj => {
    var assumedPrimaryKey = columns[0].id;
    var id = dataObj[assumedPrimaryKey];
    return _react.default.createElement(_ActionListItem.ActionListItem, {
      id: id,
      key: id,
      onClick: () => alert("Row clicked"),
      actions: generateActions(dataObj)
    }, columns.map(column => _react.default.createElement(_ActionListItemColumn.ActionListItemColumn, {
      key: column.id
    }, dataObj[column.id])));
  });
  return _react.default.createElement(_ActionList.ActionList, {
    columns: columns,
    onSort: onSort
  }, items);
};

exports.useActionListSortManager = useActionListSortManager;
//# sourceMappingURL=useActionListSortManager.js.map