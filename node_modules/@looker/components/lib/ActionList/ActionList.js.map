{"version":3,"sources":["../../src/ActionList/ActionList.tsx"],"names":["ActionListLayout","canSelect","className","header","children","columns","itemsSelected","onClickRowSelect","onSelect","onSelectAll","onSort","allItems","setAllItems","allSelected","length","every","item","includes","some","addItemToAllItems","id","handleSelectAll","undefined","context","actionListHeader","ActionList","ActionListRowColumns","props","map","column","widthPercent","join","ActionListItemColumn","theme","space","none","ActionListHeaderColumn","small","ActionListHeader","all","actionListCheckboxWidth"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2020 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport styled from 'styled-components'\nimport React, { FC, ReactNode, useState } from 'react'\nimport { MixedBoolean } from '../Form'\nimport {\n  ActionListHeader,\n  generateActionListHeaderColumns,\n} from './ActionListHeader'\nimport { ActionListItemColumn } from './ActionListItemColumn'\nimport { ActionListRowColumns } from './ActionListRow'\nimport { actionListCheckboxWidth } from './ActionListCheckbox'\nimport { ActionListContext } from './ActionListContext'\nimport { ActionListHeaderColumn } from './ActionListHeader/ActionListHeaderColumn'\nimport {\n  getPrimaryKeyColumnIndices,\n  primaryKeyColumnCSS,\n  getNumericColumnIndices,\n  numericColumnCSS,\n} from './utils/actionListFormatting'\n\nexport type ActionListColumns = ActionListColumn[]\nexport interface ActionListColumn {\n  title: ReactNode\n  /**\n   * A unique identifier for a given column\n   * Note: A column object's id should match a key in your data object template\n   */\n  id: string\n  /**\n   * Determines whether a given column is a primary key or not\n   * @default false\n   */\n  primaryKey?: boolean\n  /**\n   * In some locales, we may change horizontal alignment of 'number'\n   * @default 'string'\n   */\n  type?: 'string' | 'number'\n  /**\n   * Determines how much of a row's width this column should take up\n   */\n  widthPercent?: number\n  /**\n   * Determines whether a column is sortable (i.e. whether a column's header can be clicked to perform a sort)\n   * Note: You must provide a onSort callback to the parent <ActionList/> component\n   * @default false\n   */\n  canSort?: boolean\n  sortDirection?: 'asc' | 'desc'\n}\n\nexport interface ActionListProps {\n  columns: ActionListColumns\n  className?: string\n  /**\n   * @default: true\n   */\n  header?: boolean | ReactNode\n  /**\n   * Sort function provided by the developer\n   */\n  onSort?: (id: string, sortDirection: 'asc' | 'desc') => void\n  /**\n   * Allow the user to select ActionListItems.\n   * Note: Implemented as a checkbox next to each item row.\n   * @default false\n   */\n  canSelect?: boolean | { all: boolean }\n  /**\n   * Callback performed when user makes a selection\n   */\n  onSelect?: (id: string) => void\n  /**\n   * Callback performed when user makes selects the header checkbox\n   */\n  onSelectAll?: () => void\n  /**\n   * The ids of all ActionListItems which should be displayed as \"selected\"\n   */\n  itemsSelected?: string[]\n  /**\n   * Ignore onClick behavior for row and trigger selection instead. Also changes row :hover behavior slightly\n   * @default false\n   */\n  onClickRowSelect?: boolean\n}\n\nexport const ActionListLayout: FC<ActionListProps> = ({\n  canSelect = false,\n  className,\n  header = true,\n  children,\n  columns,\n  itemsSelected = [],\n  onClickRowSelect = false,\n  onSelect,\n  onSelectAll,\n  onSort,\n}) => {\n  const [allItems, setAllItems] = useState<string[]>([])\n\n  // Includes a check for allItems length to prevent the in-between state where ActionList first loads\n  // and allItems is an empty array (which leads to header checkbox being checked for a split-second)\n  const allSelected: MixedBoolean =\n    !!allItems.length && allItems.every((item) => itemsSelected.includes(item))\n      ? true\n      : allItems.some((item) => itemsSelected.includes(item))\n      ? 'mixed'\n      : false\n\n  const addItemToAllItems = (id: string) => {\n    !allItems.includes(id) && setAllItems([...allItems, id])\n  }\n\n  const handleSelectAll = onSelectAll ? () => onSelectAll() : undefined\n\n  const context = {\n    addItemToAllItems,\n    allSelected,\n    canSelect: !!canSelect,\n    columns,\n    itemsSelected,\n    onClickRowSelect,\n    onSelect,\n    onSelectAll: handleSelectAll,\n    onSort,\n  }\n\n  const actionListHeader =\n    header === true ? (\n      <ActionListHeader>\n        {generateActionListHeaderColumns(columns)}\n      </ActionListHeader>\n    ) : header === false ? null : (\n      <ActionListHeader>{header}</ActionListHeader>\n    )\n\n  return (\n    <ActionListContext.Provider value={context}>\n      <div className={className}>\n        {actionListHeader}\n        <div>{children}</div>\n      </div>\n    </ActionListContext.Provider>\n  )\n}\n\nexport const ActionList = styled(ActionListLayout)<ActionListProps>`\n  ${ActionListRowColumns} {\n    align-items: center;\n    display: grid;\n    grid-template-columns: ${(props) =>\n      props.columns.map((column) => `${column.widthPercent}%`).join(' ')};\n  }\n\n  ${/* sc-selector */ ActionListItemColumn}:first-child {\n    padding-left: ${({ canSelect, theme }) =>\n      canSelect ? theme.space.none : undefined};\n  }\n\n  ${/* sc-selector */ ActionListHeaderColumn}:first-child {\n    padding-left: ${({ canSelect, theme }) =>\n      canSelect ? theme.space.none : undefined};\n  }\n\n  ${/* sc-selector */ ActionListItemColumn},\n  ${/* sc-selector */ ActionListHeaderColumn} {\n    display: flex;\n    padding: ${(props) => props.theme.space.small};\n  }\n\n  ${ActionListHeader} {\n    padding-left: ${({ canSelect }) =>\n      typeof canSelect === 'object' &&\n      canSelect.all === false &&\n      actionListCheckboxWidth};\n  }\n\n  ${({ columns }) => numericColumnCSS(getNumericColumnIndices(columns))}\n  ${({ columns }) => primaryKeyColumnCSS(getPrimaryKeyColumnIndices(columns))}\n`\n"],"file":"ActionList.js"}