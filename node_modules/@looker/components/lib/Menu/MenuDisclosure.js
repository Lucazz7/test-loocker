"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MenuDisclosure = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Tooltip = require("../Tooltip");

var _MenuContext = require("./MenuContext");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function wrapCallback(cbParent, cbChild) {
  return e => {
    cbParent(e);
    cbChild && cbChild(e);
  };
}

var MenuDisclosure = (_ref) => {
  var {
    children,
    disclosureId,
    tooltip,
    tooltipPlacement
  } = _ref;
  var {
    disabled,
    id,
    showDisclosure,
    isOpen,
    setOpen,
    triggerElement,
    triggerCallbackRef
  } = (0, _react.useContext)(_MenuContext.MenuContext);
  var {
    'aria-describedby': ariaDescribedBy,
    onFocus,
    onBlur,
    onMouseOut,
    onMouseOver,
    tooltip: renderedTooltip
  } = (0, _Tooltip.useTooltip)({
    content: tooltip,
    disabled: isOpen,
    id: disclosureId ? "".concat(disclosureId, "-tooltip") : undefined,
    placement: tooltipPlacement || 'top',
    triggerElement
  });
  var [focused, setFocused] = (0, _react.useState)(false);

  function handleFocus() {
    setFocused(true);
    onFocus();
  }

  function handleBlur() {
    setFocused(false);
    onBlur();
  }

  var handleClick = (0, _react.useCallback)(() => {
    setOpen && setOpen(!isOpen);
  }, [setOpen, isOpen]);
  if (!showDisclosure && !isOpen && !focused) return null;

  var allCallbacks = _objectSpread(_objectSpread({}, tooltip ? {
    onMouseOut,
    onMouseOver
  } : {}), {}, {
    onBlur: handleBlur,
    onClick: handleClick,
    onFocus: handleFocus
  });

  var cloned = _react.Children.map(children, child => {
    var childProps = child.props;
    var wrappedCallbacks = {};
    Object.keys(allCallbacks).forEach(cbName => {
      var cbParent = Reflect.get(allCallbacks, cbName);
      wrappedCallbacks[cbName] = wrapCallback(cbParent, childProps[cbName]);
    });
    return (0, _react.cloneElement)(child, _objectSpread(_objectSpread({}, wrappedCallbacks), {}, {
      'aria-controls': id,
      'aria-describedby': ariaDescribedBy,
      'aria-expanded': isOpen,
      'aria-haspopup': true,
      className: "".concat(childProps.className || '').concat(isOpen ? ' active' : ''),
      disabled,
      id: "button-".concat(id),
      ref: triggerCallbackRef
    }));
  });

  return _react.default.createElement(_react.default.Fragment, null, cloned, renderedTooltip);
};

exports.MenuDisclosure = MenuDisclosure;
//# sourceMappingURL=MenuDisclosure.js.map