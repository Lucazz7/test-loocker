"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InlineTextArea = exports.InlineTextAreaLayout = void 0;

var _pick = _interopRequireDefault(require("lodash/pick"));

var _react = _interopRequireWildcard(require("react"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _InputProps = require("../InputProps");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var InlineTextAreaLayout = (0, _react.forwardRef)((_ref, ref) => {
  var {
    className,
    onChange,
    underlineOnlyOnHover,
    value: valueProp,
    placeholder
  } = _ref,
      props = _objectWithoutProperties(_ref, ["className", "onChange", "underlineOnlyOnHover", "value", "placeholder"]);

  var [value, setValueChange] = (0, _react.useState)(valueProp || '');
  var displayValue = (0, _isFunction.default)(onChange) ? valueProp : value;

  var handleValueChange = event => {
    setValueChange(event.currentTarget.value);
  };

  var handleChange = (0, _isFunction.default)(onChange) ? onChange : handleValueChange;
  return _react.default.createElement("div", {
    className: className,
    "data-testid": "inline-text-area"
  }, _react.default.createElement(Input, _extends({
    onChange: handleChange,
    ref: ref,
    underlineOnlyOnHover: underlineOnlyOnHover,
    value: displayValue
  }, (0, _pick.default)(props, _InputProps.inputPropKeys))), _react.default.createElement(VisibleText, {
    displayValue: displayValue
  }, displayValue || placeholder));
});
exports.InlineTextAreaLayout = InlineTextAreaLayout;
InlineTextAreaLayout.displayName = 'InlineTextAreaLayout';

var Input = _styledComponents.default.textarea.withConfig({
  displayName: "InlineTextArea__Input",
  componentId: "sc-1ioqw6m-0"
})(["background:transparent;border:none;caret-color:", ";color:transparent;font:inherit;height:100%;left:0;outline:none;padding:0;position:absolute;resize:none;text-align:inherit;text-transform:inherit;top:0;width:100%;"], (_ref2) => {
  var {
    theme
  } = _ref2;
  return theme.colors.text0;
});

var VisibleText = _styledComponents.default.div.withConfig({
  displayName: "InlineTextArea__VisibleText",
  componentId: "sc-1ioqw6m-1"
})(["color:", ";"], (_ref3) => {
  var {
    displayValue,
    theme
  } = _ref3;
  return displayValue ? 'inherit' : theme.colors.text5;
});

var InlineTextArea = (0, _styledComponents.default)(InlineTextAreaLayout).withConfig({
  displayName: "InlineTextArea",
  componentId: "sc-1ioqw6m-2"
})(["", " border:none;border-bottom:1px dashed;border-bottom-color:", ";color:inherit;display:inline-flex;flex-direction:column;justify-content:center;min-height:", ";min-width:2rem;position:relative;text-align:inherit;white-space:pre-wrap;:focus,:hover{background-color:", ";border-bottom-color:", ";outline:none;}:focus{border-bottom-style:solid;}"], _designTokens.typography, props => props.underlineOnlyOnHover ? 'transparent' : props.theme.colors.ui3, props => props.theme.lineHeights.medium, props => props.theme.colors.ui1, props => props.theme.colors.key);
exports.InlineTextArea = InlineTextArea;
//# sourceMappingURL=InlineTextArea.js.map