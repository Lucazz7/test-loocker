"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CheckboxGroup = void 0;

var _xor = _interopRequireDefault(require("lodash/xor"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _utils = require("../../../utils");

var _Fieldset = require("../../Fieldset");

var _FieldCheckbox = require("../../Fields/FieldCheckbox");

var _InputText = require("../InputText/InputText");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function getCheckedProps(optionValue, value, defaultValue) {
  var key = value ? 'checked' : 'defaultChecked';
  var valueToUse = value || defaultValue || [];
  return {
    [key]: valueToUse.includes(optionValue)
  };
}

var CheckboxGroupLayout = (0, _react.forwardRef)((_ref, ref) => {
  var {
    disabled,
    inline,
    name: propsName,
    options,
    defaultValue = [],
    value,
    onChange
  } = _ref,
      rest = _objectWithoutProperties(_ref, ["disabled", "inline", "name", "options", "defaultValue", "value", "onChange"]);

  var name = (0, _utils.useID)(propsName);
  var uncontrolledValueRef = (0, _react.useRef)(defaultValue);
  var getChangeHandler = (0, _react.useCallback)(optionValue => {
    return onChange ? () => {
      var oldValue = value || uncontrolledValueRef.current;
      var newValue = (0, _xor.default)(oldValue, [optionValue]);
      onChange(newValue);
      uncontrolledValueRef.current = newValue;
    } : undefined;
  }, [onChange, value]);
  var checkboxes = options.map(option => {
    var checkedProps = getCheckedProps(option.value, value, defaultValue);
    var handleChange = getChangeHandler(option.value);
    return _react.default.createElement(_FieldCheckbox.FieldCheckbox, _extends({
      onChange: handleChange,
      disabled: option.disabled || disabled,
      key: option.value,
      label: option.label,
      detail: option.detail,
      name: name,
      value: option.value
    }, checkedProps));
  });
  return _react.default.createElement(_Fieldset.Fieldset, _extends({
    "data-testid": "checkbox-list",
    inline: inline,
    wrap: inline,
    gap: !inline ? 'xxsmall' : undefined,
    width: inline ? 'auto' : undefined,
    ref: ref
  }, rest), checkboxes);
});
CheckboxGroupLayout.displayName = 'CheckboxGroupLayout';
var CheckboxGroup = (0, _styledComponents.default)(CheckboxGroupLayout).withConfig({
  displayName: "CheckboxGroup",
  componentId: "kl6hc5-0"
})(["", "{", "}"], _FieldCheckbox.FieldCheckbox, (_ref2) => {
  var {
    inline
  } = _ref2;
  return inline ? "line-height: ".concat(_InputText.inputHeight, ";") : '';
});
exports.CheckboxGroup = CheckboxGroup;
//# sourceMappingURL=CheckboxGroup.js.map