"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComboboxMultiInput = exports.ComboboxMultiInputInternal = void 0;

var _omit = _interopRequireDefault(require("lodash/omit"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _utils = require("../../../utils");

var _InputChips = require("../InputChips");

var _ComboboxContext = require("./ComboboxContext");

var _ComboboxInput = require("./ComboboxInput");

var _getComboboxText = require("./utils/getComboboxText");

var _makeHash = require("./utils/makeHash");

var _state = require("./utils/state");

var _useInputEvents = require("./utils/useInputEvents");

var _useInputPropRefs = require("./utils/useInputPropRefs");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ComboboxMultiInputInternal = (0, _react.forwardRef)((props, forwardedRef) => {
  var {
    autoComplete = true,
    readOnly = false,
    onClear,
    onInputChange,
    inputValue: controlledInputValue,
    freeInput = false
  } = props,
      rest = _objectWithoutProperties(props, ["autoComplete", "readOnly", "onClear", "onInputChange", "inputValue", "freeInput"]);

  var {
    data: {
      navigationOption,
      options,
      inputValue: contextInputValue
    },
    onChange: contextOnChange,
    inputCallbackRef,
    state,
    transition,
    id,
    isVisible
  } = (0, _react.useContext)(_ComboboxContext.ComboboxMultiContext);
  (0, _useInputPropRefs.useInputPropRefs)(props, _ComboboxContext.ComboboxMultiContext);

  function handleClear() {
    transition && transition(_state.ComboboxActionType.CLEAR);
    contextOnChange && contextOnChange([]);
    onClear && onClear();
  }

  function handleChange(values) {
    transition && transition(_state.ComboboxActionType.CHANGE_VALUES, {
      inputValues: values
    });
    var newOptions = (0, _state.getOptionsFromValues)(options, values);
    contextOnChange && contextOnChange(newOptions);
  }

  var handleInputValueChange = (0, _react.useCallback)(value => {
    transition && transition(_state.ComboboxActionType.CHANGE, {
      inputValue: value
    });
  }, [transition]);
  var isInputting = (0, _react.useRef)(false);

  if (controlledInputValue !== undefined && contextInputValue && controlledInputValue !== contextInputValue) {
    if (isInputting.current) {
      handleInputValueChange(controlledInputValue);
    } else {
      transition && transition(_state.ComboboxActionType.CHANGE_SILENT, {
        inputValue: controlledInputValue
      });
    }
  }

  var isControlled = controlledInputValue !== undefined;
  var handleInputChange = (0, _react.useCallback)(value => {
    isInputting.current = true;

    if (!isControlled) {
      handleInputValueChange(value);
    }

    requestAnimationFrame(() => {
      isInputting.current = false;
    });
  }, [handleInputValueChange, isControlled]);
  var inputValues = options.map(option => (0, _getComboboxText.getComboboxText)(option));
  var inputValue = contextInputValue || '';

  if (autoComplete && (state === _state.ComboboxState.NAVIGATING || state === _state.ComboboxState.INTERACTING) && navigationOption) {
    inputValue = (0, _getComboboxText.getComboboxText)(navigationOption);
  }

  var wrappedOnInputChange = (0, _react.useCallback)(value => {
    handleInputChange(value);
    onInputChange && onInputChange(value);
  }, [handleInputChange, onInputChange]);
  var inputEvents = (0, _useInputEvents.useInputEvents)(props, _ComboboxContext.ComboboxMultiContext);

  var commonProps = _objectSpread(_objectSpread(_objectSpread({}, (0, _omit.default)(rest, 'selectOnClick')), inputEvents), {}, {
    'aria-activedescendant': navigationOption ? String((0, _makeHash.makeHash)(navigationOption ? navigationOption.value : '')) : undefined,
    'aria-autocomplete': 'both',
    autoComplete: 'off',
    hasOptions: true,
    id: "listbox-".concat(id),
    inputValue,
    isVisibleOptions: isVisible,
    onChange: handleChange,
    onClear: handleClear,
    onInputChange: wrappedOnInputChange,
    readOnly,
    values: inputValues
  });

  var ref = (0, _utils.useForkedRef)(inputCallbackRef, forwardedRef);
  return freeInput ? _react.default.createElement(_InputChips.InputChips, _extends({}, commonProps, {
    ref: ref
  })) : _react.default.createElement(_InputChips.InputChipsBase, _extends({}, commonProps, {
    ref: ref
  }));
});
exports.ComboboxMultiInputInternal = ComboboxMultiInputInternal;
ComboboxMultiInputInternal.displayName = 'ComboboxMultiInputInternal';
var ComboboxMultiInput = (0, _styledComponents.default)(ComboboxMultiInputInternal).withConfig({
  displayName: "ComboboxMultiInput",
  componentId: "sc-17k5d0g-0"
})(["", " padding-right:0;"], _ComboboxInput.comboboxStyles);
exports.ComboboxMultiInput = ComboboxMultiInput;
ComboboxMultiInput.defaultProps = {
  width: '100%'
};
//# sourceMappingURL=ComboboxMultiInput.js.map