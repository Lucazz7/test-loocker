"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComboboxMultiList = exports.ComboboxList = void 0;

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _once = _interopRequireDefault(require("lodash/once"));

var _throttle = _interopRequireDefault(require("lodash/throttle"));

var _utils = require("../../../utils");

var _Popover = require("../../../Popover");

var _ComboboxContext = require("./ComboboxContext");

var _useBlur = require("./utils/useBlur");

var _useKeyDown = require("./utils/useKeyDown");

var _state = require("./utils/state");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function getElementWidth(element) {
  return element && element.getBoundingClientRect().width;
}

var ComboboxListInternal = (0, _react.forwardRef)((_ref, forwardedRef) => {
  var {
    persistSelection = false,
    closeOnSelect = true,
    windowedOptions = false,
    indicator,
    isMulti
  } = _ref,
      props = _objectWithoutProperties(_ref, ["persistSelection", "closeOnSelect", "windowedOptions", "indicator", "isMulti"]);

  var context = (0, _react.useContext)(_ComboboxContext.ComboboxContext);
  var contextMulti = (0, _react.useContext)(_ComboboxContext.ComboboxMultiContext);
  var contextToUse = isMulti ? contextMulti : context;
  var {
    persistSelectionPropRef,
    closeOnSelectPropRef,
    windowedOptionsPropRef,
    indicatorPropRef,
    transition,
    wrapperElement,
    isVisible,
    optionsRef,
    listRef,
    setListScrollPosition,
    setListClientRect
  } = contextToUse;
  if (persistSelectionPropRef) persistSelectionPropRef.current = persistSelection;
  if (closeOnSelectPropRef) closeOnSelectPropRef.current = closeOnSelect;
  if (indicatorPropRef) indicatorPropRef.current = indicator;
  (0, _react.useLayoutEffect)(() => {
    if (windowedOptionsPropRef) windowedOptionsPropRef.current = windowedOptions;
    if (optionsRef) optionsRef.current = [];
    return () => {
      if (optionsRef) optionsRef.current = [];
    };
  }, [optionsRef, isVisible, windowedOptions, windowedOptionsPropRef]);
  var handleKeyDown = (0, _useKeyDown.useKeyDown)();
  var handleBlur = isMulti ? (0, _useBlur.useBlur)(_ComboboxContext.ComboboxMultiContext) : (0, _useBlur.useBlur)(_ComboboxContext.ComboboxContext);
  var ref = (0, _utils.useForkedRef)(listRef, forwardedRef);
  var width = props.width || getElementWidth(wrapperElement) || 'auto';
  var minWidth = props.minWidth || (props.width === 'auto' ? getElementWidth(wrapperElement) : undefined);

  var content = _react.default.createElement(ComboboxUl, _extends({}, props, {
    width: width,
    minWidth: minWidth,
    onKeyDown: handleKeyDown,
    onBlur: handleBlur,
    ref: ref,
    role: "listbox",
    tabIndex: -1
  }));

  var setOpen = isOpen => {
    if (!isOpen) {
      transition && transition(_state.ComboboxActionType.BLUR);
    }
  };

  var {
    popover,
    contentContainer,
    popperInstanceRef
  } = (0, _Popover.usePopover)({
    arrow: false,
    content,
    focusTrap: false,
    isOpen: isVisible,
    placement: 'bottom-start',
    setOpen,
    triggerElement: wrapperElement,
    triggerToggle: false
  });
  var valueLength = isMulti ? contextMulti.data.options.length : 1;
  (0, _react.useEffect)(() => {
    popperInstanceRef.current && popperInstanceRef.current.update();
  }, [popperInstanceRef, valueLength]);
  (0, _react.useEffect)(() => {
    var setListClientRectOnce = (0, _once.default)(containerElement => {
      setListClientRect && setListClientRect(containerElement.getBoundingClientRect());
    });
    var scrollListener = (0, _throttle.default)(() => {
      if (contentContainer) {
        setListClientRectOnce(contentContainer);
        setListScrollPosition && setListScrollPosition(contentContainer.scrollTop);
      }
    }, 50);

    if (contentContainer) {
      contentContainer.addEventListener('scroll', scrollListener);
      scrollListener();
    }

    return () => {
      contentContainer && contentContainer.removeEventListener('scroll', scrollListener);
      setListScrollPosition && setListScrollPosition(0);
      setListClientRect && setListClientRect(undefined);
    };
  }, [contentContainer]);
  return popover || null;
});
ComboboxListInternal.displayName = 'ComboboxListInternal';

var ComboboxUl = _styledComponents.default.ul.withConfig({
  displayName: "ComboboxList__ComboboxUl",
  componentId: "sc-1ban10u-0"
})(["", " ", " ", " list-style-type:none;margin:0;max-height:30rem;outline:none;", ""], _designTokens.reset, _designTokens.typography, _designTokens.space, _designTokens.layout);

var isMultiPadding = (0, _styledComponents.css)(["padding:", " 0;"], (_ref2) => {
  var {
    isMulti,
    theme
  } = _ref2;
  return isMulti ? theme.space.xsmall : 0;
});
var ComboboxList = (0, _styledComponents.default)(ComboboxListInternal).attrs({
  isMulti: false
}).withConfig({
  displayName: "ComboboxList",
  componentId: "sc-1ban10u-1"
})(["", ""], isMultiPadding);
exports.ComboboxList = ComboboxList;
var ComboboxMultiList = (0, _styledComponents.default)(ComboboxListInternal).attrs({
  isMulti: true
}).withConfig({
  displayName: "ComboboxList__ComboboxMultiList",
  componentId: "sc-1ban10u-2"
})(["", ""], isMultiPadding);
exports.ComboboxMultiList = ComboboxMultiList;
//# sourceMappingURL=ComboboxList.js.map