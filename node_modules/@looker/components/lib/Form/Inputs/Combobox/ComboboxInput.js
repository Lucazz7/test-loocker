"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComboboxInput = exports.comboboxStyles = exports.ComboboxInputInternal = void 0;

var _omit = _interopRequireDefault(require("lodash/omit"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _utils = require("../../../utils");

var _InputText = require("../InputText");

var _AdvancedInputControls = require("../AdvancedInputControls");

var _ComboboxContext = require("./ComboboxContext");

var _getComboboxText = require("./utils/getComboboxText");

var _makeHash = require("./utils/makeHash");

var _state = require("./utils/state");

var _useInputEvents = require("./utils/useInputEvents");

var _useInputPropRefs = require("./utils/useInputPropRefs");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ComboboxInputInternal = (0, _react.forwardRef)((props, forwardedRef) => {
  var {
    autoComplete = true,
    readOnly = false,
    onChange,
    value: controlledValue,
    validationType,
    disabled,
    isClearable
  } = props,
      rest = _objectWithoutProperties(props, ["autoComplete", "readOnly", "onChange", "value", "validationType", "disabled", "isClearable"]);

  var {
    data: {
      navigationOption,
      option,
      inputValue: contextInputValue
    },
    onChange: contextOnChange,
    inputCallbackRef,
    state,
    transition,
    id,
    isVisible
  } = (0, _react.useContext)(_ComboboxContext.ComboboxContext);
  (0, _useInputPropRefs.useInputPropRefs)(props, _ComboboxContext.ComboboxContext);
  var ref = (0, _utils.useForkedRef)(inputCallbackRef, forwardedRef);
  var isControlled = controlledValue !== undefined;

  function handleClear() {
    contextOnChange && contextOnChange(undefined);
    transition && transition(_state.ComboboxActionType.CLEAR);
  }

  function handleValueChange(value) {
    transition && transition(_state.ComboboxActionType.CHANGE, {
      inputValue: value
    });
  }

  var isInputting = (0, _react.useRef)(false);

  if (controlledValue !== undefined && contextInputValue && controlledValue !== contextInputValue) {
    if (isInputting.current) {
      handleValueChange(controlledValue);
    } else {
      transition && transition(_state.ComboboxActionType.CHANGE_SILENT, {
        inputValue: controlledValue
      });
    }
  }

  function handleChange(event) {
    isInputting.current = true;

    if (!isControlled) {
      handleValueChange(event.currentTarget.value);
    }

    requestAnimationFrame(() => {
      isInputting.current = false;
    });
  }

  var inputOption = contextInputValue !== undefined ? contextInputValue : option;

  if (autoComplete && (state === _state.ComboboxState.NAVIGATING || state === _state.ComboboxState.INTERACTING)) {
    inputOption = navigationOption || (controlledValue !== undefined ? controlledValue : option);
  }

  var inputValue = (0, _getComboboxText.getComboboxText)(inputOption);
  var wrappedOnChange = (0, _utils.useWrapEvent)(handleChange, onChange);
  var inputEvents = (0, _useInputEvents.useInputEvents)(props, _ComboboxContext.ComboboxContext);
  return _react.default.createElement(_InputText.InputText, _extends({}, (0, _omit.default)(rest, 'selectOnClick'), inputEvents, {
    disabled: disabled,
    after: _react.default.createElement(_AdvancedInputControls.AdvancedInputControls, {
      validationType: validationType,
      onClear: handleClear,
      isVisibleOptions: isVisible,
      disabled: disabled,
      renderSearchControls: !!(isClearable && inputValue)
    }),
    ref: ref,
    value: inputValue,
    readOnly: readOnly,
    onChange: wrappedOnChange,
    id: "listbox-".concat(id),
    autoComplete: "off",
    "aria-autocomplete": "both",
    validationType: validationType,
    "aria-activedescendant": navigationOption ? String((0, _makeHash.makeHash)(navigationOption ? navigationOption.value : '')) : undefined
  }));
});
exports.ComboboxInputInternal = ComboboxInputInternal;
ComboboxInputInternal.displayName = 'ComboboxInputInternal';
var comboboxStyles = (0, _styledComponents.css)(["", "{cursor:", ";}"], _InputText.InputText, props => props.readOnly ? 'default' : 'text');
exports.comboboxStyles = comboboxStyles;
var ComboboxInput = (0, _styledComponents.default)(ComboboxInputInternal).withConfig({
  displayName: "ComboboxInput",
  componentId: "kxdvwm-0"
})(["", ""], comboboxStyles);
exports.ComboboxInput = ComboboxInput;
ComboboxInput.defaultProps = {
  width: '100%'
};
//# sourceMappingURL=ComboboxInput.js.map