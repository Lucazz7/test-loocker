"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOptionScroll = useOptionScroll;

var _react = require("react");

var _utils = require("../../../../utils");

var _state = require("./state");

var relativeElementVisibility = function relativeElementVisibility(listElement, containerScrollPosition) {
  var containerHeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var {
    offsetTop
  } = listElement;
  var isAbove = offsetTop < containerScrollPosition;
  var isBelow = offsetTop >= containerScrollPosition + containerHeight;
  return isAbove && 'above' || isBelow && 'below' || 'visible';
};

function useOptionScroll(context, value, label, scrollIntoView, isActive) {
  var {
    transition,
    listScrollPosition = 0,
    listClientRect = {
      height: 0
    },
    isAutoScrollingRef
  } = (0, _react.useContext)(context);
  var [newTriggerElement, callbackRef] = (0, _utils.useCallbackRef)();
  (0, _react.useEffect)(() => {
    if (scrollIntoView) {
      if (newTriggerElement) {
        newTriggerElement.scrollIntoView();
      }

      if (!isActive) {
        transition && transition(_state.ComboboxActionType.NAVIGATE, {
          option: {
            label,
            value
          }
        });
      }
    }
  }, [newTriggerElement, scrollIntoView]);
  (0, _react.useEffect)(() => {
    if (isActive && newTriggerElement) {
      var visibility = relativeElementVisibility(newTriggerElement, listScrollPosition, listClientRect.height);

      if (visibility !== 'visible') {
        if (isAutoScrollingRef) isAutoScrollingRef.current = true;
        window.requestAnimationFrame(() => {
          if (isAutoScrollingRef) isAutoScrollingRef.current = false;
        });
        var attachToTop = visibility === 'above';
        newTriggerElement.scrollIntoView(attachToTop);
      }
    }
  }, [newTriggerElement, isActive]);
  return callbackRef;
}
//# sourceMappingURL=useOptionScroll.js.map