"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getOptionsFromValues = getOptionsFromValues;
exports.useReducerMachine = useReducerMachine;
exports.useReducerMultiMachine = useReducerMultiMachine;
exports.stateChart = exports.ComboboxActionType = exports.ComboboxState = void 0;

var _xorWith = _interopRequireDefault(require("lodash/xorWith"));

var _react = require("react");

var _getComboboxText = require("./getComboboxText");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ComboboxState;
exports.ComboboxState = ComboboxState;

(function (ComboboxState) {
  ComboboxState["IDLE"] = "IDLE";
  ComboboxState["SUGGESTING"] = "SUGGESTING";
  ComboboxState["NAVIGATING"] = "NAVIGATING";
  ComboboxState["INTERACTING"] = "INTERACTING";
})(ComboboxState || (exports.ComboboxState = ComboboxState = {}));

var ComboboxActionType;
exports.ComboboxActionType = ComboboxActionType;

(function (ComboboxActionType) {
  ComboboxActionType["CLEAR"] = "CLEAR";
  ComboboxActionType["CHANGE"] = "CHANGE";
  ComboboxActionType["CHANGE_SILENT"] = "CHANGE_SILENT";
  ComboboxActionType["CHANGE_VALUES"] = "CHANGE_VALUES";
  ComboboxActionType["NAVIGATE"] = "NAVIGATE";
  ComboboxActionType["SELECT_WITH_KEYBOARD"] = "SELECT_WITH_KEYBOARD";
  ComboboxActionType["SELECT_WITH_CLICK"] = "SELECT_WITH_CLICK";
  ComboboxActionType["SELECT_SILENT"] = "SELECT_SILENT";
  ComboboxActionType["ESCAPE"] = "ESCAPE";
  ComboboxActionType["BLUR"] = "BLUR";
  ComboboxActionType["INTERACT"] = "INTERACT";
  ComboboxActionType["FOCUS"] = "FOCUS";
})(ComboboxActionType || (exports.ComboboxActionType = ComboboxActionType = {}));

var stateChart = {
  initial: ComboboxState.IDLE,
  states: {
    [ComboboxState.IDLE]: {
      on: {
        [ComboboxActionType.BLUR]: ComboboxState.IDLE,
        [ComboboxActionType.CLEAR]: ComboboxState.IDLE,
        [ComboboxActionType.CHANGE]: ComboboxState.SUGGESTING,
        [ComboboxActionType.CHANGE_SILENT]: ComboboxState.IDLE,
        [ComboboxActionType.CHANGE_VALUES]: ComboboxState.IDLE,
        [ComboboxActionType.FOCUS]: ComboboxState.SUGGESTING,
        [ComboboxActionType.NAVIGATE]: ComboboxState.NAVIGATING,
        [ComboboxActionType.SELECT_SILENT]: ComboboxState.IDLE
      }
    },
    [ComboboxState.SUGGESTING]: {
      on: {
        [ComboboxActionType.CHANGE]: ComboboxState.SUGGESTING,
        [ComboboxActionType.CHANGE_SILENT]: ComboboxState.SUGGESTING,
        [ComboboxActionType.CHANGE_VALUES]: ComboboxState.SUGGESTING,
        [ComboboxActionType.FOCUS]: ComboboxState.SUGGESTING,
        [ComboboxActionType.NAVIGATE]: ComboboxState.NAVIGATING,
        [ComboboxActionType.CLEAR]: ComboboxState.IDLE,
        [ComboboxActionType.ESCAPE]: ComboboxState.IDLE,
        [ComboboxActionType.BLUR]: ComboboxState.IDLE,
        [ComboboxActionType.SELECT_WITH_CLICK]: ComboboxState.SUGGESTING,
        [ComboboxActionType.SELECT_SILENT]: ComboboxState.SUGGESTING,
        [ComboboxActionType.INTERACT]: ComboboxState.INTERACTING
      }
    },
    [ComboboxState.NAVIGATING]: {
      on: {
        [ComboboxActionType.CHANGE]: ComboboxState.SUGGESTING,
        [ComboboxActionType.CHANGE_SILENT]: ComboboxState.NAVIGATING,
        [ComboboxActionType.CHANGE_VALUES]: ComboboxState.NAVIGATING,
        [ComboboxActionType.FOCUS]: ComboboxState.SUGGESTING,
        [ComboboxActionType.CLEAR]: ComboboxState.IDLE,
        [ComboboxActionType.BLUR]: ComboboxState.IDLE,
        [ComboboxActionType.ESCAPE]: ComboboxState.IDLE,
        [ComboboxActionType.NAVIGATE]: ComboboxState.NAVIGATING,
        [ComboboxActionType.SELECT_WITH_CLICK]: ComboboxState.NAVIGATING,
        [ComboboxActionType.SELECT_WITH_KEYBOARD]: ComboboxState.NAVIGATING,
        [ComboboxActionType.SELECT_SILENT]: ComboboxState.NAVIGATING,
        [ComboboxActionType.INTERACT]: ComboboxState.INTERACTING
      }
    },
    [ComboboxState.INTERACTING]: {
      on: {
        [ComboboxActionType.CHANGE]: ComboboxState.SUGGESTING,
        [ComboboxActionType.CHANGE_SILENT]: ComboboxState.SUGGESTING,
        [ComboboxActionType.CHANGE_VALUES]: ComboboxState.INTERACTING,
        [ComboboxActionType.FOCUS]: ComboboxState.SUGGESTING,
        [ComboboxActionType.BLUR]: ComboboxState.IDLE,
        [ComboboxActionType.ESCAPE]: ComboboxState.IDLE,
        [ComboboxActionType.NAVIGATE]: ComboboxState.NAVIGATING,
        [ComboboxActionType.SELECT_WITH_CLICK]: ComboboxState.INTERACTING,
        [ComboboxActionType.SELECT_SILENT]: ComboboxState.INTERACTING
      }
    }
  }
};
exports.stateChart = stateChart;

var findNavigationValue = (state, action) => {
  if (action.option) {
    return action.option;
  } else if (action.persistSelection) {
    var singularState = state;
    var multiState = state;
    return singularState.option ? singularState.option : multiState.options ? multiState.navigationOption || multiState.options[multiState.options.length - 1] : undefined;
  } else {
    return undefined;
  }
};

var reducer = (data, action) => {
  var nextState = _objectSpread(_objectSpread({}, data), {}, {
    lastActionType: action.type
  });

  switch (action.type) {
    case ComboboxActionType.CHANGE:
    case ComboboxActionType.CHANGE_SILENT:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: action.inputValue
      });

    case ComboboxActionType.NAVIGATE:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        navigationOption: findNavigationValue(nextState, action)
      });

    case ComboboxActionType.CLEAR:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: '',
        navigationOption: undefined,
        option: undefined
      });

    case ComboboxActionType.BLUR:
    case ComboboxActionType.ESCAPE:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: (0, _getComboboxText.getComboboxText)(data.option),
        navigationOption: undefined
      });

    case ComboboxActionType.SELECT_WITH_CLICK:
    case ComboboxActionType.SELECT_SILENT:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: (0, _getComboboxText.getComboboxText)(action.option),
        navigationOption: undefined,
        option: action.option
      });

    case ComboboxActionType.SELECT_WITH_KEYBOARD:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: (0, _getComboboxText.getComboboxText)(data.navigationOption),
        navigationOption: undefined,
        option: data.navigationOption
      });

    case ComboboxActionType.INTERACT:
      return nextState;

    case ComboboxActionType.FOCUS:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        navigationOption: findNavigationValue(nextState, action)
      });

    default:
      throw new Error("Unknown action ".concat(action.type));
  }
};

function getOptionsFromValues(currentOptions, newValues) {
  if (!newValues) return [];
  var freeInputValues = [...newValues];
  var newOptions = currentOptions.filter(option => {
    var text = (0, _getComboboxText.getComboboxText)(option);
    var foundInOptions = newValues.includes(text);

    if (foundInOptions) {
      var index = freeInputValues.indexOf(text);

      if (index > -1) {
        freeInputValues.splice(index, 1);
      }
    }

    return foundInOptions;
  });
  var freeInputOptions = freeInputValues.map(value => ({
    value
  }));
  return [...newOptions, ...freeInputOptions];
}

var reducerMulti = (data, action) => {
  var nextState = _objectSpread(_objectSpread({}, data), {}, {
    lastActionType: action.type
  });

  switch (action.type) {
    case ComboboxActionType.CHANGE:
    case ComboboxActionType.CHANGE_SILENT:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: action.inputValue
      });

    case ComboboxActionType.CHANGE_VALUES:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        navigationOption: undefined,
        options: getOptionsFromValues(nextState.options, action.inputValues)
      });

    case ComboboxActionType.NAVIGATE:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        navigationOption: findNavigationValue(nextState, action)
      });

    case ComboboxActionType.CLEAR:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: '',
        navigationOption: undefined,
        options: []
      });

    case ComboboxActionType.BLUR:
    case ComboboxActionType.ESCAPE:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: '',
        navigationOption: undefined
      });

    case ComboboxActionType.SELECT_WITH_CLICK:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: '',
        navigationOption: findNavigationValue(nextState, action),
        options: (0, _xorWith.default)(nextState.options, action.option ? [action.option] : [], (o1, o2) => o1.value === o2.value)
      });

    case ComboboxActionType.SELECT_SILENT:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: '',
        navigationOption: undefined,
        options: action.options || []
      });

    case ComboboxActionType.SELECT_WITH_KEYBOARD:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        inputValue: '',
        navigationOption: findNavigationValue(nextState, action),
        options: (0, _xorWith.default)(nextState.options, data.navigationOption ? [data.navigationOption] : [], (o1, o2) => o1.value === o2.value)
      });

    case ComboboxActionType.INTERACT:
      return nextState;

    case ComboboxActionType.FOCUS:
      return _objectSpread(_objectSpread({}, nextState), {}, {
        navigationOption: findNavigationValue(nextState, action)
      });

    default:
      throw new Error("Unknown action ".concat(action.type));
  }
};

function useReducerMachine(initialData) {
  var [state, setState] = (0, _react.useState)(stateChart.initial);
  var [data, dispatch] = (0, _react.useReducer)(reducer, initialData);

  function transition(action) {
    var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var currentState = stateChart.states[state];
    var nextState = currentState.on[action];

    if (!nextState) {
      console.warn("Unknown action \"".concat(action, "\" for state \"").concat(state, "\""));
      return;
    }

    dispatch(_objectSpread({
      state,
      type: action
    }, payload));
    setState(nextState);
  }

  return [state, data, transition];
}

function useReducerMultiMachine(initialData) {
  var [state, setState] = (0, _react.useState)(stateChart.initial);
  var [data, dispatch] = (0, _react.useReducer)(reducerMulti, initialData);

  function transition(action) {
    var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      inputValues: [],
      options: []
    };
    var currentState = stateChart.states[state];
    var nextState = currentState.on[action];

    if (!nextState) {
      console.warn("Unknown action \"".concat(action, "\" for state \"").concat(state, "\""));
      return;
    }

    dispatch(_objectSpread({
      state,
      type: action
    }, payload));
    setState(nextState);
  }

  return [state, data, transition];
}
//# sourceMappingURL=state.js.map