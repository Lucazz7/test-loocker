"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useOptionEvents = useOptionEvents;

var _throttle = _interopRequireDefault(require("lodash/throttle"));

var _xorWith = _interopRequireDefault(require("lodash/xorWith"));

var _react = require("react");

var _utils = require("../../../../utils");

var _state = require("./state");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function useOptionEvents(props, context) {
  var {
    label,
    value,
    onClick,
    onMouseEnter
  } = props;
  var {
    data,
    onChange,
    transition,
    closeOnSelectPropRef,
    isAutoScrollingRef
  } = (0, _react.useContext)(context);
  var {
    options
  } = data;

  function handleClick() {
    var option = {
      label,
      value
    };

    if (onChange) {
      if (options) {
        ;
        onChange((0, _xorWith.default)(options, [option], (o1, o2) => o1.value === o2.value));
      } else {
        ;
        onChange(option);
      }
    }

    transition && transition(_state.ComboboxActionType.SELECT_WITH_CLICK, {
      option
    });

    if (closeOnSelectPropRef && closeOnSelectPropRef.current) {
      transition && transition(_state.ComboboxActionType.ESCAPE);
    }
  }

  var handleMouseEnter = (0, _throttle.default)(() => {
    if (isAutoScrollingRef && isAutoScrollingRef.current) return;
    var option = {
      label,
      value
    };
    transition && transition(_state.ComboboxActionType.NAVIGATE, {
      option
    });
  }, 50);
  return {
    onClick: (0, _utils.useWrapEvent)(handleClick, onClick),
    onMouseEnter: (0, _utils.useWrapEvent)(handleMouseEnter, onMouseEnter)
  };
}
//# sourceMappingURL=useOptionEvents.js.map