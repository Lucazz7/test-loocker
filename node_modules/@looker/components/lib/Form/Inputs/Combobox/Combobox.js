"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Combobox = exports.ComboboxWrapper = exports.ComboboxInternal = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _utils = require("../../../utils");

var _Layout = require("../../../Layout");

var _useFocusManagement = require("./utils/useFocusManagement");

var _state = require("./utils/state");

var _ComboboxContext = require("./ComboboxContext");

var _getComboboxText = require("./utils/getComboboxText");

var _useComboboxRefs2 = require("./utils/useComboboxRefs");

var _useComboboxToggle = require("./utils/useComboboxToggle");

var _useScrollState = require("./utils/useScrollState");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ComboboxInternal = (0, _react.forwardRef)((_ref, forwardedRef) => {
  var {
    openOnFocus = false,
    onChange,
    value,
    defaultValue,
    onClose,
    onOpen,
    id: propsID
  } = _ref,
      rest = _objectWithoutProperties(_ref, ["openOnFocus", "onChange", "value", "defaultValue", "onClose", "onOpen", "id"]);

  var initialValue = value || defaultValue;
  var initialData = initialValue ? {
    inputValue: (0, _getComboboxText.getComboboxText)(initialValue),
    option: initialValue
  } : {};
  var [state, data, transition] = (0, _state.useReducerMachine)(_objectSpread(_objectSpread({}, _ComboboxContext.defaultData), initialData));
  var {
    lastActionType,
    option
  } = data;

  if (value !== undefined && (!option || option.value !== value.value)) {
    transition && transition(_state.ComboboxActionType.SELECT_SILENT, {
      option: value
    });
  }

  var focusManagement = (0, _useFocusManagement.useFocusManagement)(lastActionType);
  var id = (0, _utils.useID)(propsID);
  var isVisible = (0, _useComboboxToggle.useComboboxToggle)(state, option, onOpen, onClose);

  var _useComboboxRefs = (0, _useComboboxRefs2.useComboboxRefs)(forwardedRef),
      {
    ref
  } = _useComboboxRefs,
      commonRefs = _objectWithoutProperties(_useComboboxRefs, ["ref"]);

  var scrollState = (0, _useScrollState.useScrollState)();

  var context = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, commonRefs), focusManagement), scrollState), {}, {
    data,
    id,
    isVisible,
    onChange,
    openOnFocus,
    state,
    transition
  });

  return _react.default.createElement(_ComboboxContext.ComboboxContext.Provider, {
    value: context
  }, _react.default.createElement(ComboboxWrapper, _extends({
    id: id
  }, rest, {
    isVisible: isVisible,
    ref: ref
  })));
});
exports.ComboboxInternal = ComboboxInternal;
ComboboxInternal.displayName = 'ComboboxInternal';
var ComboboxWrapper = (0, _react.forwardRef)((_ref2, ref) => {
  var {
    isVisible
  } = _ref2,
      rest = _objectWithoutProperties(_ref2, ["isVisible"]);

  return _react.default.createElement(_Layout.Box, _extends({}, rest, {
    ref: ref,
    role: "combobox",
    "aria-haspopup": "listbox",
    "aria-owns": "listbox-".concat(rest.id),
    "aria-expanded": isVisible
  }));
});
exports.ComboboxWrapper = ComboboxWrapper;
ComboboxWrapper.displayName = 'ComboboxWrapper';
var Combobox = (0, _styledComponents.default)(ComboboxInternal).withConfig({
  displayName: "Combobox",
  componentId: "sc-1xpy5b5-0"
})([""]);
exports.Combobox = Combobox;
Combobox.defaultProps = {
  display: 'flex'
};
//# sourceMappingURL=Combobox.js.map