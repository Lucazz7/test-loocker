{"version":3,"sources":["../../../../src/Form/Inputs/InputTime/InputTime.tsx"],"names":["initialState","charCount","format","hour","isComplete","minute","period","subInputFocus","isNumericKey","e","keyCode","isArrowKey","key","isDeleteKey","selectNextInput","current","isInputComplete","length","reducer","state","action","payload","type","inputValues","cycleValue","currentValue","max","min","transform","add","subtract","newValue","parseValue","value","hr24","split","map","parseBase10Int","hr12","convert12To24HrString","includes","numericTime","replace","InputTimeInternal","ref","className","defaultValue","disabled","id","onChange","readOnly","onBlur","onFocus","onValidationFail","required","validationType","inputState","dispatch","inputRefs","HOUR","MINUTE","NONE","PERIOD","handleValidKeyDown","handleDelete","setStateCB","undefined","handleHourKeyDown","clearHourField","handleMinuteKeyDown","clearMinuteField","handlePeriodKeyDown","clearPeriodField","toUpperCase","nextPeriod","handleHourFocus","handleMinuteFocus","handlePeriodFocus","handleBlur","focus","valueProp","newHour","newMinute","newPeriod","console","error","noop","WarningIcon","Icon","StyledInput","styled","input","attrs","maxLength","placeholder","innerInputStyle","props","theme","fontSizes","small","lineHeights","medium","colors","keyAccent","InputTime","simpleLayoutCSS","inputCSS","space","xsmall","inputTextFocus","inputTextHover","inputTextDisabled","inputTextValidation"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2020 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React, {\n  forwardRef,\n  KeyboardEvent,\n  useReducer,\n  Reducer,\n  useEffect,\n  useRef,\n  Ref,\n  RefObject,\n  SyntheticEvent,\n} from 'react'\nimport styled from 'styled-components'\nimport noop from 'lodash/noop'\nimport add from 'lodash/add'\nimport subtract from 'lodash/subtract'\n\nimport {\n  inputTextHover,\n  inputTextFocus,\n  inputTextDisabled,\n  inputTextValidation,\n  inputCSS,\n} from '../InputText'\nimport { innerInputStyle } from '../innerInputStyle'\nimport { Icon } from '../../../Icon'\nimport {\n  simpleLayoutCSS,\n  SimpleLayoutProps,\n} from '../../../Layout/utils/simple'\nimport {\n  formatTimeString,\n  TimeFormats,\n  parseBase10Int,\n  isValidTime,\n} from '../utils'\nimport { ValidationType } from '../../ValidationMessage'\n\nexport interface InputTimeProps extends Omit<SimpleLayoutProps, 'size'> {\n  format?: TimeFormats\n  defaultValue?: string\n  value?: string\n  onChange?: (time?: string) => void\n  validationType?: ValidationType\n  onValidationFail?: (value?: string) => void\n  className?: string\n  disabled?: boolean\n  readOnly?: boolean\n  id?: string\n  onFocus?: (e: SyntheticEvent) => void\n  onBlur?: (e: SyntheticEvent) => void\n  required?: boolean\n}\n\ntype Periods = 'AM' | 'PM' | ''\n\ntype ActionTypes =\n  | 'SET_FOCUS'\n  | 'INCREMENT_CHAR_COUNT'\n  | 'RESET_CHAR_COUNT'\n  | 'FOCUS_NEXT_FIELD'\n  | 'SET_HOUR_VALUE'\n  | 'SET_MINUTE_VALUE'\n  | 'SET_PERIOD_VALUE'\n\ntype SubInputs = 'NONE' | 'HOUR' | 'MINUTE' | 'PERIOD'\n\ninterface InputState {\n  charCount: number\n  subInputFocus?: SubInputs\n  hour: string\n  minute: string\n  period: Periods\n  isComplete: boolean\n  format: TimeFormats\n}\n\ninterface InputAction {\n  type: ActionTypes\n  payload?: SubInputs | string | Periods\n}\n\nconst initialState: InputState = {\n  charCount: 0,\n  format: '12h',\n  hour: '',\n  isComplete: false,\n  minute: '',\n  period: '',\n  subInputFocus: 'NONE',\n}\n\nconst isNumericKey = (e: KeyboardEvent) =>\n  (e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode >= 96 && e.keyCode <= 105)\n\nconst isArrowKey = (e: KeyboardEvent) =>\n  e.key === 'ArrowUp' || e.key === 'ArrowDown'\n\nconst isDeleteKey = (e: KeyboardEvent) => {\n  return e.key === 'Backspace' || e.key === 'Delete'\n}\n\nconst selectNextInput = (current?: SubInputs) => {\n  switch (current) {\n    case 'HOUR':\n      return 'MINUTE'\n    case 'MINUTE':\n      return 'PERIOD'\n    case 'PERIOD':\n      return 'NONE'\n    default:\n      return 'NONE'\n  }\n}\n\ninterface IsCompleteConfig {\n  format: TimeFormats\n  hour: string\n  minute: string\n  period: string\n}\n\nconst isInputComplete = ({\n  format,\n  hour,\n  minute,\n  period,\n}: IsCompleteConfig): boolean => {\n  if (format === '12h') {\n    return !!(hour.length && minute.length && period.length)\n  }\n  return !!(hour.length && minute.length)\n}\n\nconst reducer: Reducer<InputState, InputAction> = (state, action) => {\n  const { payload, type } = action\n  const inputValues: IsCompleteConfig = {\n    format: state.format,\n    hour: state.hour,\n    minute: state.minute,\n    period: state.period,\n  }\n  switch (type) {\n    case 'SET_FOCUS':\n      return { ...state, subInputFocus: payload as SubInputs }\n    case 'FOCUS_NEXT_FIELD':\n      return { ...state, subInputFocus: selectNextInput(state.subInputFocus) }\n    case 'INCREMENT_CHAR_COUNT':\n      return { ...state, charCount: state.charCount + 1 }\n    case 'RESET_CHAR_COUNT':\n      return { ...state, charCount: 0 }\n    case 'SET_HOUR_VALUE':\n      return {\n        ...state,\n        hour: payload as string,\n        isComplete: isInputComplete({\n          ...inputValues,\n          hour: payload as string,\n        }),\n      }\n    case 'SET_MINUTE_VALUE':\n      return {\n        ...state,\n        isComplete: isInputComplete({\n          ...inputValues,\n          minute: payload as string,\n        }),\n        minute: payload as string,\n      }\n    case 'SET_PERIOD_VALUE':\n      return {\n        ...state,\n        isComplete: isInputComplete({\n          ...inputValues,\n          period: payload as string,\n        }),\n        period: payload as Periods,\n      }\n    default:\n      return state\n  }\n}\n\ntype RefMap = {\n  [k in SubInputs]: RefObject<HTMLInputElement>\n}\n\nconst cycleValue = (\n  currentValue: string,\n  key: string,\n  max: 12 | 23 | 59,\n  min: 1 | 0\n) => {\n  const transform = key === 'ArrowUp' ? add : subtract\n  const newValue = transform(parseBase10Int(currentValue), 1)\n  if (newValue < min) {\n    return formatTimeString(max)\n  } else if (newValue > max) {\n    return formatTimeString(min)\n  } else {\n    return formatTimeString(newValue)\n  }\n}\n\n// take the value prop (a 24hr string) and break it into component parts\nconst parseValue = (format: TimeFormats, value = '') => {\n  if (value.length) {\n    const [hr24, minute] = value.split(':').map(parseBase10Int)\n    const hr12 = hr24 <= 12 ? hr24 : hr24 - 12\n    const period = hr24 >= 12 ? 'PM' : 'AM'\n    return [\n      formatTimeString(format === '12h' ? hr12 : hr24),\n      formatTimeString(minute),\n      period,\n    ]\n  }\n  return ['', '', '']\n}\n\n// take a 12hr string (e.g. '01:15 pm') and convert to equivalent 24hr string (e.g. '13:15')\nexport const convert12To24HrString = (value: string) => {\n  const period = value.includes('P') ? 'PM' : 'AM'\n  const numericTime = value.replace(/[APM]/gi, '')\n  const [hour = 0, minute = 0] = numericTime.split(':').map(parseBase10Int)\n\n  let hr24\n  if (period === 'AM' && hour === 12) {\n    hr24 = 0\n  } else if (period === 'PM' && hour < 12) {\n    hr24 = hour + 12\n  } else {\n    hr24 = hour\n  }\n\n  return `${formatTimeString(hr24)}:${formatTimeString(minute)}`\n}\n\nconst InputTimeInternal = forwardRef(\n  (\n    {\n      className,\n      defaultValue,\n      disabled,\n      format = '12h',\n      id,\n      onChange,\n      readOnly,\n      onBlur,\n      onFocus,\n      onValidationFail,\n      required,\n      validationType,\n      value,\n    }: InputTimeProps,\n    ref: Ref<HTMLDivElement>\n  ) => {\n    const [inputState, dispatch] = useReducer(reducer, {\n      ...initialState,\n      format,\n    })\n\n    const { hour, minute, period, isComplete, subInputFocus } = inputState\n\n    const inputRefs: RefMap = {\n      HOUR: useRef(null),\n      MINUTE: useRef(null),\n      NONE: useRef(null),\n      PERIOD: useRef(null),\n    }\n\n    // run this listener for every valid numeric entry\n    const handleValidKeyDown = () => {\n      dispatch({ type: 'INCREMENT_CHAR_COUNT' })\n      if (inputState.charCount > 0) {\n        dispatch({ type: 'FOCUS_NEXT_FIELD' })\n      }\n    }\n\n    const handleDelete = (setStateCB: () => void) => {\n      onChange && onChange(undefined)\n      setStateCB()\n    }\n\n    const handleHourKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n      const clearHourField = () => {\n        dispatch({ payload: '', type: 'SET_HOUR_VALUE' })\n        dispatch({ type: 'RESET_CHAR_COUNT' })\n      }\n      if (isNumericKey(e)) {\n        const value = parseBase10Int(\n          // append or replace new char to existing value based on length of input\n          inputState.charCount === 1 ? `${hour}${e.key}` : e.key\n        )\n        if (value < 24) {\n          // valid input!\n          if (format === '12h' && value > 12) {\n            dispatch({\n              payload: formatTimeString(value - 12),\n              type: 'SET_HOUR_VALUE',\n            })\n            dispatch({ payload: 'PM', type: 'SET_PERIOD_VALUE' })\n          } else {\n            dispatch({\n              payload: formatTimeString(value),\n              type: 'SET_HOUR_VALUE',\n            })\n          }\n          handleValidKeyDown()\n        } else {\n          // reset if invalid value is entered (e.g. 62:87 pm)\n          clearHourField()\n        }\n      } else if (isArrowKey(e)) {\n        // cycle through possible values with up/down arrows\n        const max = format === '12h' ? 12 : 23\n        const min = format === '12h' ? 1 : 0\n        dispatch({\n          payload: cycleValue(hour, e.key, max, min),\n          type: 'SET_HOUR_VALUE',\n        })\n      } else if (isDeleteKey(e)) {\n        // user delete\n        handleDelete(clearHourField)\n      }\n    }\n\n    const handleMinuteKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n      const clearMinuteField = () => {\n        dispatch({ payload: '', type: 'SET_MINUTE_VALUE' })\n        dispatch({ type: 'RESET_CHAR_COUNT' })\n      }\n      if (isNumericKey(e)) {\n        // append or replace new char to existing value\n        const value = parseBase10Int(\n          inputState.charCount === 1 ? `${minute}${e.key}` : e.key\n        )\n        if (value < 60) {\n          // valid input!\n          dispatch({\n            payload: formatTimeString(value),\n            type: 'SET_MINUTE_VALUE',\n          })\n          handleValidKeyDown()\n        } else {\n          // reset if invalid value is entered (e.g. 62:87 pm)\n          clearMinuteField()\n        }\n      } else if (isArrowKey(e)) {\n        // cycle through possible values with up/down arrows\n        dispatch({\n          payload: cycleValue(minute, e.key, 59, 0),\n          type: 'SET_MINUTE_VALUE',\n        })\n      } else if (isDeleteKey(e)) {\n        // user delete\n        handleDelete(clearMinuteField)\n      }\n    }\n\n    const handlePeriodKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n      const clearPeriodField = () => {\n        dispatch({ payload: '', type: 'SET_PERIOD_VALUE' })\n        dispatch({ type: 'RESET_CHAR_COUNT' })\n      }\n      const key = e.key.toUpperCase()\n      if (key === 'P' || key === 'A') {\n        dispatch({ payload: `${key}M`, type: 'SET_PERIOD_VALUE' })\n        handleValidKeyDown()\n      } else if (isArrowKey(e)) {\n        // cycle through possible values with up/down arrows\n        const nextPeriod = period === 'PM' ? 'AM' : 'PM'\n        dispatch({ payload: nextPeriod, type: 'SET_PERIOD_VALUE' })\n      } else if (isDeleteKey(e)) {\n        // user delete\n        handleDelete(clearPeriodField)\n      }\n    }\n\n    const handleHourFocus = () =>\n      dispatch({ payload: 'HOUR', type: 'SET_FOCUS' })\n    const handleMinuteFocus = () =>\n      dispatch({ payload: 'MINUTE', type: 'SET_FOCUS' })\n    const handlePeriodFocus = () =>\n      dispatch({ payload: 'PERIOD', type: 'SET_FOCUS' })\n    const handleBlur = () => {\n      dispatch({ payload: 'NONE', type: 'SET_FOCUS' })\n      dispatch({ type: 'RESET_CHAR_COUNT' })\n    }\n\n    // Input UX: automatically advance cursor to specified input\n    // Also track state for whether user is focusing or blurring any sub input\n    useEffect(() => {\n      const ref = inputRefs[subInputFocus || '']\n      if (ref.current) {\n        ref.current.focus()\n      }\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [subInputFocus])\n\n    useEffect(\n      () => {\n        const valueProp = value || defaultValue\n        // Controlled Component: update state on every value change\n        if (isValidTime(valueProp)) {\n          const [newHour, newMinute, newPeriod] = parseValue(format, valueProp)\n          hour !== newHour &&\n            dispatch({ payload: newHour, type: 'SET_HOUR_VALUE' })\n          minute !== newMinute &&\n            dispatch({ payload: newMinute, type: 'SET_MINUTE_VALUE' })\n          period !== newPeriod &&\n            dispatch({ payload: newPeriod, type: 'SET_PERIOD_VALUE' })\n        } else {\n          onValidationFail && onValidationFail(valueProp)\n          // eslint-disable-next-line no-console\n          console.error(\n            `Invalid time (\"${valueProp}\") passed to <InputTime />. Value should be formatted as a 24-hour string (e.g. value=\"02:00\" or value=\"23:15\").`\n          )\n        }\n      },\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [value]\n    )\n\n    // controlled component: call 'onChange' if all sub-inputs are filled in\n    useEffect(() => {\n      if (isComplete) {\n        const newValue =\n          format === '12h'\n            ? convert12To24HrString(`${hour}:${minute} ${period}`)\n            : `${hour}:${minute}`\n        if (newValue !== value) {\n          onChange && onChange(`${newValue}`)\n        }\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isComplete, hour, minute, period])\n\n    return (\n      <div\n        className={`${className} ${disabled && 'disabled'}`}\n        ref={ref}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        aria-invalid={validationType === 'error' ? 'true' : undefined}\n      >\n        <StyledInput\n          id={id}\n          value={hour}\n          onKeyDown={readOnly ? noop : handleHourKeyDown}\n          onFocus={handleHourFocus}\n          onBlur={handleBlur}\n          onChange={noop} // suppress controlled component warning\n          ref={inputRefs.HOUR}\n          data-testid=\"input-hour\"\n          disabled={disabled}\n          readOnly={readOnly}\n          required={required}\n        />\n        <div>:</div>\n        <StyledInput\n          value={minute}\n          onKeyDown={readOnly ? noop : handleMinuteKeyDown}\n          onFocus={handleMinuteFocus}\n          onBlur={handleBlur}\n          onChange={noop} // suppress controlled component warning\n          ref={inputRefs.MINUTE}\n          data-testid=\"input-minute\"\n          disabled={disabled}\n          readOnly={readOnly}\n          required={required}\n        />\n        {format === '12h' ? (\n          <StyledInput\n            value={period}\n            onKeyDown={readOnly ? noop : handlePeriodKeyDown}\n            onFocus={handlePeriodFocus}\n            onBlur={handleBlur}\n            onChange={noop} // suppress controlled component warning\n            ref={inputRefs.PERIOD}\n            data-testid=\"input-period\"\n            disabled={disabled}\n            readOnly={readOnly}\n            required={required}\n          />\n        ) : (\n          <span />\n        )}\n        {validationType && (\n          <WarningIcon\n            name=\"CircleInfo\"\n            color=\"critical\"\n            grid-area=\"warning\"\n            size={20}\n          />\n        )}\n      </div>\n    )\n  }\n)\n\nconst WarningIcon = styled(Icon)``\n\nconst StyledInput = styled.input.attrs({\n  maxLength: 2,\n  placeholder: '--',\n  type: 'text',\n})`\n  ${innerInputStyle}\n  font-size: ${(props) => props.theme.fontSizes.small};\n  height: 34px;\n  line-height: ${({ theme }) => theme.lineHeights.medium};\n  padding: 0;\n  text-align: center;\n  width: 1.25rem;\n\n  &:focus {\n    background: ${({ theme }) => theme.colors.keyAccent};\n  }\n`\n\nexport const InputTime = styled(InputTimeInternal)`\n  ${simpleLayoutCSS}\n  ${inputCSS}\n\n  align-items: center;\n  display: inline-grid;\n  grid-gap: 0.15rem;\n  grid-template-columns: auto auto auto auto 1fr;\n  padding: 0 ${({ theme }) => theme.space.xsmall};\n\n  ${WarningIcon} {\n    justify-self: end;\n  }\n\n  &:focus-within {\n    ${inputTextFocus}\n  }\n\n  &:hover {\n    ${inputTextHover}\n  }\n\n  &.disabled {\n    ${inputTextDisabled}\n  }\n\n  ${inputTextValidation}\n`\n"],"file":"InputTime.js"}