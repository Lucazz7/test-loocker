"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.limitByRadius = exports.scaleRadius = exports.translateDiagonal = exports.translate = exports.diameter = exports.deg2rad = exports.rad2deg = exports.polar2cartesian = exports.cartesian2polar = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var cartesian2polar = coord => ({
  angle: Math.atan2(coord.y, coord.x),
  radius: Math.round(Math.sqrt(coord.x * coord.x + coord.y * coord.y))
});

exports.cartesian2polar = cartesian2polar;

var polar2cartesian = coord => ({
  x: coord.radius * Math.cos(coord.angle),
  y: coord.radius * Math.sin(coord.angle)
});

exports.polar2cartesian = polar2cartesian;

var rad2deg = rad => rad / (2 * Math.PI) * 360;

exports.rad2deg = rad2deg;

var deg2rad = angle => angle * (Math.PI / 180);

exports.deg2rad = deg2rad;

var diameter = radius => 2 * radius;

exports.diameter = diameter;

var translate = (by, val) => val + by;

exports.translate = translate;

var translateDiagonal = (by, coordinate) => ({
  x: translate(by, coordinate.x),
  y: translate(by, coordinate.y)
});

exports.translateDiagonal = translateDiagonal;

var scaleRadius = (by, coord) => _objectSpread(_objectSpread({}, coord), {}, {
  radius: coord.radius * by
});

exports.scaleRadius = scaleRadius;

var limitByRadius = (coord, radius) => {
  var {
    x,
    y
  } = translateDiagonal(-radius, coord);
  var distanceFromCenter = Math.min(Math.sqrt(x * x + y * y), radius);
  var angle = Math.atan2(y, x);
  var newCoord = polar2cartesian({
    angle,
    radius: distanceFromCenter
  });
  return {
    x: newCoord.x + radius,
    y: newCoord.y + radius
  };
};

exports.limitByRadius = limitByRadius;
//# sourceMappingURL=math_utils.js.map