"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.drawColorWheelIntoCanvasImage = exports.clearCanvas = exports.eventCartesianPosition = exports.canvasRadius = exports.canvasMargin = void 0;

var _d3Hsv = require("d3-hsv");

var _math_utils = require("./math_utils");

var canvasMargin = 10;
exports.canvasMargin = canvasMargin;

var canvasRadius = (canvas, margin) => (canvas.width - 2 * margin) / 2;

exports.canvasRadius = canvasRadius;

var eventCartesianPosition = (canvas, event) => ({
  x: (0, _math_utils.translate)(-canvas.getBoundingClientRect().left, event.clientX),
  y: (0, _math_utils.translate)(-canvas.getBoundingClientRect().top, event.clientY)
});

exports.eventCartesianPosition = eventCartesianPosition;

var clearCanvas = canvas => {
  var ctx = canvas.getContext('2d');

  if (ctx) {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
  }
};

exports.clearCanvas = clearCanvas;

var drawColorWheelIntoCanvasImage = (image, data) => {
  data.forEach((row, x) => {
    row.forEach((val, y) => {
      var pixelWidth = 4;
      var index = (x + y * row.length) * pixelWidth;
      var rgbColor = (0, _d3Hsv.hsv)(val.h, val.s, val.v).rgb();
      image[index] = rgbColor.r;
      image[index + 1] = rgbColor.g;
      image[index + 2] = rgbColor.b;
      image[index + 3] = 255;
    });
  });
};

exports.drawColorWheelIntoCanvasImage = drawColorWheelIntoCanvasImage;
//# sourceMappingURL=canvas_utils.js.map