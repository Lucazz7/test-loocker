"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateColorWheel = exports.hsv2cartesian = exports.cartesian2hsv = exports.scalePBRadius = exports.polarbrightness2hsv = exports.hsv2polar = exports.white = void 0;

var _range = _interopRequireDefault(require("lodash/range"));

var _math_utils = require("./math_utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var white = () => ({
  brightness: 1,
  coord: {
    angle: 0,
    radius: 0
  }
});

exports.white = white;

var hsv2polar = color => ({
  angle: (0, _math_utils.deg2rad)(color.h),
  radius: color.s
});

exports.hsv2polar = hsv2polar;

var polarbrightness2hsv = pb => ({
  h: (0, _math_utils.rad2deg)(pb.coord.angle),
  s: pb.coord.radius,
  v: pb.brightness
});

exports.polarbrightness2hsv = polarbrightness2hsv;

var scalePBRadius = (by, pb) => _objectSpread(_objectSpread({}, pb), {}, {
  coord: (0, _math_utils.scaleRadius)(by, pb.coord)
});

exports.scalePBRadius = scalePBRadius;

var cartesian2hsv = (brightness, radius, coord) => [coord].map(c => (0, _math_utils.translateDiagonal)(-radius, c)).map(_math_utils.cartesian2polar).map(c => c.radius <= radius ? {
  brightness,
  coord: c
} : white()).map(pb => scalePBRadius(1 / radius, pb)).map(polarbrightness2hsv)[0];

exports.cartesian2hsv = cartesian2hsv;

var hsv2cartesian = (radius, color) => [color].map(hsv2polar).map(coord => (0, _math_utils.scaleRadius)(radius, coord)).map(_math_utils.polar2cartesian).map(coord => (0, _math_utils.translateDiagonal)(radius, coord))[0];

exports.hsv2cartesian = hsv2cartesian;

var generateColorWheel = (radius, brightness) => (0, _range.default)((0, _math_utils.diameter)(radius)).map((_, x) => (0, _range.default)((0, _math_utils.diameter)(radius)).map((_$, y) => cartesian2hsv(brightness, radius, {
  x,
  y
})));

exports.generateColorWheel = generateColorWheel;
//# sourceMappingURL=color_wheel_utils.js.map