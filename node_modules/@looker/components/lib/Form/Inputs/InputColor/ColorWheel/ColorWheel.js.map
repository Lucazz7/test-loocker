{"version":3,"sources":["../../../../../src/Form/Inputs/InputColor/ColorWheel/ColorWheel.tsx"],"names":["ColorWheel","Component","element","colorWheelCanvas","valueCanvas","compositeCanvas","markerCanvas","event","setMouseDragging","canvasCartesian","position","canvasMargin","radius","updateColor","props","onColorChange","isMouseDragging","isDragging","ctx","getContext","centerX","width","centerY","height","r","g","b","value","rgb","beginPath","arc","Math","PI","fillStyle","fill","lineWidth","strokeStyle","stroke","globalCompositeOperation","drawImage","componentDidMount","drawWheel","drawValueLayer","drawCompositeCanvas","drawMouseMarker","componentDidUpdate","render","size","setColorWheelCanvasRef","setValueCanvasRef","setCompositeCanvasRef","setMarkerCanvasRef","mouseDown","mouseMove","bind","image","getColorWheelImage","putImageData","colorWheelImage","colorValue","createImageData","data","h","hue","s","saturation","v","mousePosition","mouseRadius","x","y","callback","color","updateColorValues","ColorWheelWrapper","styled","div","Canvas","canvas"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2020 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React, { Component } from 'react'\nimport styled from 'styled-components'\nimport { hsv } from 'd3-hsv'\n\nimport {\n  canvasMargin,\n  canvasRadius,\n  clearCanvas,\n  drawColorWheelIntoCanvasImage,\n  eventCartesianPosition,\n} from './canvas_utils'\n\nimport {\n  cartesian2hsv,\n  generateColorWheel,\n  hsv2cartesian,\n  HueSaturation,\n} from './color_wheel_utils'\n\nimport {\n  CartesianCoordinate,\n  diameter,\n  limitByRadius,\n  translateDiagonal,\n} from './math_utils'\n\ntype UpdateHueSaturationCallbackType = (color: HueSaturation) => void\n\ninterface ColorWheelProps {\n  /**\n   * Selected hue. Can take on values between 0 and 360\n   */\n  hue: number\n  /**\n   * Selected saturation. Can take on values between 0 and 1\n   */\n  saturation: number\n  /**\n   * Selected value. Can take on values between 0 and 1, where 0 is black and 1 is maximum brightness.\n   */\n  value: number\n  /**\n   * Size, in pixels, of the canvas.\n   */\n  size: number\n  /**\n   * Callback for when a color has been changed in color wheel\n   */\n  onColorChange?: UpdateHueSaturationCallbackType\n}\n\nexport class ColorWheel extends Component<ColorWheelProps> {\n  public static defaultProps = {\n    hue: 0,\n    saturation: 1,\n    size: 100,\n    value: 1,\n  }\n\n  private isMouseDragging = false\n  private colorWheelImage?: ImageData\n  private colorWheelCanvas!: HTMLCanvasElement\n  private valueCanvas!: HTMLCanvasElement\n  private compositeCanvas!: HTMLCanvasElement\n  private markerCanvas!: HTMLCanvasElement\n\n  public componentDidMount() {\n    this.drawWheel()\n    this.drawValueLayer()\n    this.drawCompositeCanvas()\n    this.drawMouseMarker()\n  }\n\n  public componentDidUpdate() {\n    this.drawValueLayer()\n    this.drawCompositeCanvas()\n    this.drawMouseMarker()\n  }\n\n  public setColorWheelCanvasRef = (element: HTMLCanvasElement) => {\n    this.colorWheelCanvas = element\n  }\n\n  public setValueCanvasRef = (element: HTMLCanvasElement) => {\n    this.valueCanvas = element\n  }\n\n  public setCompositeCanvasRef = (element: HTMLCanvasElement) => {\n    this.compositeCanvas = element\n  }\n\n  public setMarkerCanvasRef = (element: HTMLCanvasElement) => {\n    this.markerCanvas = element\n  }\n\n  public render() {\n    return (\n      <ColorWheelWrapper size={this.props.size}>\n        {/* LAYER 1: Hue/Saturation color wheel background */}\n        <Canvas\n          ref={this.setColorWheelCanvasRef}\n          width={this.props.size}\n          height={this.props.size}\n        />\n        {/* LAYER 2: Value layer to adjust color brightness by provided value */}\n        <Canvas\n          ref={this.setValueCanvasRef}\n          width={this.props.size}\n          height={this.props.size}\n        />\n        {/* Layer 3: blend color wheel and value layers to simulate HSV rendering */}\n        <Canvas\n          ref={this.setCompositeCanvasRef}\n          width={this.props.size}\n          height={this.props.size}\n        />\n        {/* Layer 4: Render marker position (selected Hue/Saturation location on color wheel) */}\n        <Canvas\n          data-testid=\"mouse-marker\"\n          ref={this.setMarkerCanvasRef}\n          width={this.props.size}\n          height={this.props.size}\n          onMouseDown={this.mouseDown}\n          onMouseMove={this.mouseMove}\n          onMouseUp={this.setMouseDragging.bind(this, false)}\n          onMouseLeave={this.setMouseDragging.bind(this, false)}\n        />\n      </ColorWheelWrapper>\n    )\n  }\n\n  public mouseDown = (event: React.MouseEvent<HTMLCanvasElement>) => {\n    this.setMouseDragging(true)\n    const canvasCartesian = eventCartesianPosition(this.colorWheelCanvas, event)\n    const position = limitByRadius(\n      translateDiagonal(-canvasMargin, canvasCartesian),\n      this.radius\n    )\n\n    this.updateColor(position, this.props.onColorChange)\n  }\n\n  public mouseMove = (event: React.MouseEvent<HTMLCanvasElement>) => {\n    if (this.isMouseDragging) {\n      const canvasCartesian = eventCartesianPosition(\n        this.colorWheelCanvas,\n        event\n      )\n      const position = limitByRadius(\n        translateDiagonal(-canvasMargin, canvasCartesian),\n        this.radius\n      )\n      this.updateColor(position, this.props.onColorChange)\n    }\n  }\n\n  public setMouseDragging = (isDragging: boolean) => {\n    this.isMouseDragging = isDragging\n  }\n\n  public get radius(): number {\n    return this.colorWheelCanvas\n      ? canvasRadius(this.colorWheelCanvas, canvasMargin)\n      : 0\n  }\n\n  private drawValueLayer = () => {\n    clearCanvas(this.valueCanvas)\n    const ctx = this.valueCanvas.getContext('2d')\n    const centerX = this.valueCanvas.width / 2\n    const centerY = this.valueCanvas.height / 2\n    if (ctx) {\n      const { r, g, b } = hsv(0, 0, this.props.value).rgb() // convert grayscale value to rgb\n      ctx.beginPath()\n      ctx.arc(centerX, centerY, this.radius, 0, 2 * Math.PI, false)\n      ctx.fillStyle = `rgb(${r},${g},${b})`\n      ctx.fill()\n      ctx.lineWidth = 3\n      ctx.strokeStyle = '#ffffff'\n      ctx.stroke()\n    }\n  }\n\n  private drawCompositeCanvas = () => {\n    clearCanvas(this.compositeCanvas)\n    const ctx = this.compositeCanvas.getContext('2d')\n\n    if (ctx) {\n      ctx.globalCompositeOperation = 'multiply'\n      ctx.drawImage(this.colorWheelCanvas, 0, 0)\n      ctx.drawImage(this.valueCanvas, 0, 0)\n    }\n  }\n\n  /**\n   * Utility method to draw actual color wheel.\n   */\n  private drawWheel() {\n    const ctx = this.colorWheelCanvas.getContext('2d')\n\n    if (!ctx) return\n\n    const image = this.getColorWheelImage()\n\n    if (image) {\n      ctx.putImageData(image, canvasMargin, canvasMargin)\n    }\n\n    // Draw a border around circle\n    ctx.beginPath()\n    ctx.arc(\n      this.colorWheelCanvas.width / 2,\n      this.colorWheelCanvas.width / 2,\n      this.radius,\n      0,\n      2 * Math.PI,\n      false\n    )\n    ctx.lineWidth = 3\n    ctx.strokeStyle = '#ffffff'\n    ctx.stroke()\n  }\n\n  /**\n   * Utility method to get image data to push into canvas DOM element. Acts as a lazy load for image property\n   * This method writes to a 2D array that will then get pushed onto the canvas context. Takes parameters\n   * for circle radius, any added margins, etc to draw a sweet HSV-based gradient\n   */\n  private getColorWheelImage(): ImageData | undefined {\n    const ctx = this.colorWheelCanvas.getContext('2d')\n\n    if (!this.colorWheelImage && ctx) {\n      const colorValue = 1 // render base wheel at full brightness\n      this.colorWheelImage = ctx.createImageData(\n        diameter(this.radius),\n        diameter(this.radius)\n      )\n      drawColorWheelIntoCanvasImage(\n        this.colorWheelImage.data,\n        generateColorWheel(this.radius, colorValue)\n      )\n    }\n\n    return this.colorWheelImage\n  }\n\n  /**\n   * Utility Method to draw mouse position onto the canvas.\n   */\n  private drawMouseMarker() {\n    clearCanvas(this.markerCanvas)\n\n    const canvasCartesian: CartesianCoordinate = hsv2cartesian(this.radius, {\n      h: this.props.hue,\n      s: this.props.saturation,\n      v: this.props.value,\n    })\n\n    const mousePosition = translateDiagonal(canvasMargin, canvasCartesian)\n\n    const ctx = this.markerCanvas.getContext('2d')\n    if (ctx && mousePosition) {\n      const mouseRadius = 4\n\n      ctx.beginPath()\n      ctx.arc(\n        mousePosition.x,\n        mousePosition.y,\n        mouseRadius,\n        0,\n        2 * Math.PI,\n        false\n      )\n      ctx.lineWidth = 3\n      ctx.strokeStyle = '#FFFFFF'\n      ctx.stroke()\n\n      ctx.beginPath()\n      ctx.arc(\n        mousePosition.x,\n        mousePosition.y,\n        mouseRadius - 1,\n        0,\n        2 * Math.PI,\n        false\n      )\n      ctx.lineWidth = 2\n      ctx.strokeStyle = '#000000'\n      ctx.stroke()\n    }\n  }\n\n  /**\n   * action called when user clicks on a color.  Will let client know color has been updated.\n   */\n  private updateColor(\n    position?: CartesianCoordinate,\n    callback?: UpdateHueSaturationCallbackType\n  ) {\n    if (callback && position) {\n      const color = cartesian2hsv(this.props.value, this.radius, position)\n      const updateColorValues = { h: color.h, s: color.s }\n      callback(updateColorValues)\n    }\n  }\n}\n\ninterface CanvasProps {\n  size: number\n}\n\nconst ColorWheelWrapper = styled.div<CanvasProps>`\n  height: ${({ size }) => size}px;\n  position: relative;\n  width: ${({ size }) => size}px;\n`\n\nconst Canvas = styled.canvas`\n  left: 0;\n  position: absolute;\n  top: 0;\n`\n"],"file":"ColorWheel.js"}