"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ColorWheel = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _d3Hsv = require("d3-hsv");

var _canvas_utils = require("./canvas_utils");

var _color_wheel_utils = require("./color_wheel_utils");

var _math_utils = require("./math_utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ColorWheel extends _react.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "isMouseDragging", false);

    _defineProperty(this, "colorWheelImage", void 0);

    _defineProperty(this, "colorWheelCanvas", void 0);

    _defineProperty(this, "valueCanvas", void 0);

    _defineProperty(this, "compositeCanvas", void 0);

    _defineProperty(this, "markerCanvas", void 0);

    _defineProperty(this, "setColorWheelCanvasRef", element => {
      this.colorWheelCanvas = element;
    });

    _defineProperty(this, "setValueCanvasRef", element => {
      this.valueCanvas = element;
    });

    _defineProperty(this, "setCompositeCanvasRef", element => {
      this.compositeCanvas = element;
    });

    _defineProperty(this, "setMarkerCanvasRef", element => {
      this.markerCanvas = element;
    });

    _defineProperty(this, "mouseDown", event => {
      this.setMouseDragging(true);
      var canvasCartesian = (0, _canvas_utils.eventCartesianPosition)(this.colorWheelCanvas, event);
      var position = (0, _math_utils.limitByRadius)((0, _math_utils.translateDiagonal)(-_canvas_utils.canvasMargin, canvasCartesian), this.radius);
      this.updateColor(position, this.props.onColorChange);
    });

    _defineProperty(this, "mouseMove", event => {
      if (this.isMouseDragging) {
        var canvasCartesian = (0, _canvas_utils.eventCartesianPosition)(this.colorWheelCanvas, event);
        var position = (0, _math_utils.limitByRadius)((0, _math_utils.translateDiagonal)(-_canvas_utils.canvasMargin, canvasCartesian), this.radius);
        this.updateColor(position, this.props.onColorChange);
      }
    });

    _defineProperty(this, "setMouseDragging", isDragging => {
      this.isMouseDragging = isDragging;
    });

    _defineProperty(this, "drawValueLayer", () => {
      (0, _canvas_utils.clearCanvas)(this.valueCanvas);
      var ctx = this.valueCanvas.getContext('2d');
      var centerX = this.valueCanvas.width / 2;
      var centerY = this.valueCanvas.height / 2;

      if (ctx) {
        var {
          r,
          g,
          b
        } = (0, _d3Hsv.hsv)(0, 0, this.props.value).rgb();
        ctx.beginPath();
        ctx.arc(centerX, centerY, this.radius, 0, 2 * Math.PI, false);
        ctx.fillStyle = "rgb(".concat(r, ",").concat(g, ",").concat(b, ")");
        ctx.fill();
        ctx.lineWidth = 3;
        ctx.strokeStyle = '#ffffff';
        ctx.stroke();
      }
    });

    _defineProperty(this, "drawCompositeCanvas", () => {
      (0, _canvas_utils.clearCanvas)(this.compositeCanvas);
      var ctx = this.compositeCanvas.getContext('2d');

      if (ctx) {
        ctx.globalCompositeOperation = 'multiply';
        ctx.drawImage(this.colorWheelCanvas, 0, 0);
        ctx.drawImage(this.valueCanvas, 0, 0);
      }
    });
  }

  componentDidMount() {
    this.drawWheel();
    this.drawValueLayer();
    this.drawCompositeCanvas();
    this.drawMouseMarker();
  }

  componentDidUpdate() {
    this.drawValueLayer();
    this.drawCompositeCanvas();
    this.drawMouseMarker();
  }

  render() {
    return _react.default.createElement(ColorWheelWrapper, {
      size: this.props.size
    }, _react.default.createElement(Canvas, {
      ref: this.setColorWheelCanvasRef,
      width: this.props.size,
      height: this.props.size
    }), _react.default.createElement(Canvas, {
      ref: this.setValueCanvasRef,
      width: this.props.size,
      height: this.props.size
    }), _react.default.createElement(Canvas, {
      ref: this.setCompositeCanvasRef,
      width: this.props.size,
      height: this.props.size
    }), _react.default.createElement(Canvas, {
      "data-testid": "mouse-marker",
      ref: this.setMarkerCanvasRef,
      width: this.props.size,
      height: this.props.size,
      onMouseDown: this.mouseDown,
      onMouseMove: this.mouseMove,
      onMouseUp: this.setMouseDragging.bind(this, false),
      onMouseLeave: this.setMouseDragging.bind(this, false)
    }));
  }

  get radius() {
    return this.colorWheelCanvas ? (0, _canvas_utils.canvasRadius)(this.colorWheelCanvas, _canvas_utils.canvasMargin) : 0;
  }

  drawWheel() {
    var ctx = this.colorWheelCanvas.getContext('2d');
    if (!ctx) return;
    var image = this.getColorWheelImage();

    if (image) {
      ctx.putImageData(image, _canvas_utils.canvasMargin, _canvas_utils.canvasMargin);
    }

    ctx.beginPath();
    ctx.arc(this.colorWheelCanvas.width / 2, this.colorWheelCanvas.width / 2, this.radius, 0, 2 * Math.PI, false);
    ctx.lineWidth = 3;
    ctx.strokeStyle = '#ffffff';
    ctx.stroke();
  }

  getColorWheelImage() {
    var ctx = this.colorWheelCanvas.getContext('2d');

    if (!this.colorWheelImage && ctx) {
      var colorValue = 1;
      this.colorWheelImage = ctx.createImageData((0, _math_utils.diameter)(this.radius), (0, _math_utils.diameter)(this.radius));
      (0, _canvas_utils.drawColorWheelIntoCanvasImage)(this.colorWheelImage.data, (0, _color_wheel_utils.generateColorWheel)(this.radius, colorValue));
    }

    return this.colorWheelImage;
  }

  drawMouseMarker() {
    (0, _canvas_utils.clearCanvas)(this.markerCanvas);
    var canvasCartesian = (0, _color_wheel_utils.hsv2cartesian)(this.radius, {
      h: this.props.hue,
      s: this.props.saturation,
      v: this.props.value
    });
    var mousePosition = (0, _math_utils.translateDiagonal)(_canvas_utils.canvasMargin, canvasCartesian);
    var ctx = this.markerCanvas.getContext('2d');

    if (ctx && mousePosition) {
      var mouseRadius = 4;
      ctx.beginPath();
      ctx.arc(mousePosition.x, mousePosition.y, mouseRadius, 0, 2 * Math.PI, false);
      ctx.lineWidth = 3;
      ctx.strokeStyle = '#FFFFFF';
      ctx.stroke();
      ctx.beginPath();
      ctx.arc(mousePosition.x, mousePosition.y, mouseRadius - 1, 0, 2 * Math.PI, false);
      ctx.lineWidth = 2;
      ctx.strokeStyle = '#000000';
      ctx.stroke();
    }
  }

  updateColor(position, callback) {
    if (callback && position) {
      var _color = (0, _color_wheel_utils.cartesian2hsv)(this.props.value, this.radius, position);

      var updateColorValues = {
        h: _color.h,
        s: _color.s
      };
      callback(updateColorValues);
    }
  }

}

exports.ColorWheel = ColorWheel;

_defineProperty(ColorWheel, "defaultProps", {
  hue: 0,
  saturation: 1,
  size: 100,
  value: 1
});

var ColorWheelWrapper = _styledComponents.default.div.withConfig({
  displayName: "ColorWheel__ColorWheelWrapper",
  componentId: "sc-12p8z31-0"
})(["height:", "px;position:relative;width:", "px;"], (_ref) => {
  var {
    size
  } = _ref;
  return size;
}, (_ref2) => {
  var {
    size
  } = _ref2;
  return size;
});

var Canvas = _styledComponents.default.canvas.withConfig({
  displayName: "ColorWheel__Canvas",
  componentId: "sc-12p8z31-1"
})(["left:0;position:absolute;top:0;"]);
//# sourceMappingURL=ColorWheel.js.map