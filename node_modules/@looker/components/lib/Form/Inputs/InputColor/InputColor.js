"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputColor = exports.InputColorComponent = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _get = _interopRequireDefault(require("lodash/get"));

var _utils = require("../../../utils");

var _Popover = require("../../../Popover");

var _InputText = require("../InputText");

var _Form = require("../../Form");

var _ColorWheel = require("./ColorWheel");

var _LuminositySlider = require("./LuminositySlider");

var _Swatch = require("./Swatch");

var _color_format_utils = require("./utils/color_format_utils");

var _color_utils = require("./utils/color_utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var colorWheelSize = 164;

var createEventWithHSVValue = color => {
  return {
    currentTarget: {
      value: typeof color === 'string' ? color : (0, _color_format_utils.simpleHSVtoFormattedColorString)(color)
    },
    target: {
      value: typeof color === 'string' ? color : (0, _color_format_utils.simpleHSVtoFormattedColorString)(color)
    }
  };
};

function getColorFromText(text) {
  return text && (0, _color_utils.isValidColor)(text) ? (0, _color_format_utils.str2simpleHsv)(text) : undefined;
}

var InputColorComponent = (0, _react.forwardRef)((_ref, ref) => {
  var {
    className,
    hideInput,
    id,
    onChange,
    onFocus,
    onBlur,
    value,
    defaultValue
  } = _ref,
      props = _objectWithoutProperties(_ref, ["className", "hideInput", "id", "onChange", "onFocus", "onBlur", "value", "defaultValue"]);

  var inputID = (0, _utils.useID)(id);
  var validationMessage = (0, _Form.useFormContext)(props);
  var initialColor = getColorFromText(value || defaultValue);
  var [color, setColor] = (0, _react.useState)(initialColor);
  var [inputTextValue, setInputTextValue] = (0, _react.useState)(value || defaultValue || '');
  var [isFocused, setIsFocused] = (0, _react.useState)(false);

  var handleFocus = () => setIsFocused(true);

  var handleBlur = () => setIsFocused(false);

  var wrappedOnFocus = (0, _utils.useWrapEvent)(handleFocus, onFocus);
  var wrappedOnBlur = (0, _utils.useWrapEvent)(handleBlur, onBlur);
  (0, _react.useEffect)(() => {
    if (value && value !== inputTextValue) {
      setColor((0, _color_format_utils.str2simpleHsv)(value));
      !isFocused && setInputTextValue(value);
    }
  }, [isFocused, value, inputTextValue]);

  var callOnChange = newColor => {
    if (!onChange || !newColor) return;
    onChange(createEventWithHSVValue(newColor));
  };

  var setColorState = newColor => {
    setColor(newColor);
    newColor && setInputTextValue((0, _color_format_utils.simpleHSVtoFormattedColorString)(newColor));
    callOnChange(newColor);
  };

  var handleColorChange = hs => {
    setColorState(_objectSpread(_objectSpread({
      h: 0,
      s: 100
    }, hs), {}, {
      v: (0, _get.default)(color, 'v', 1)
    }));
  };

  var handleSliderChange = event => setColorState(_objectSpread(_objectSpread({}, color || {
    h: 0,
    s: 100,
    v: 100
  }), {}, {
    v: Number(event.currentTarget.value) / 100
  }));

  var handleInputTextChange = event => {
    var newValue = event.currentTarget.value;
    setInputTextValue(newValue);
    var isValid = (0, _color_utils.isValidColor)(newValue);
    callOnChange(isValid ? newValue : undefined);
    setColor(getColorFromText(event.currentTarget.value));
  };

  var content = _react.default.createElement(_Popover.PopoverContent, {
    display: "flex",
    flexDirection: "column"
  }, _react.default.createElement(_ColorWheel.ColorWheel, {
    size: colorWheelSize,
    hue: (0, _get.default)(color, 'h'),
    saturation: (0, _get.default)(color, 's'),
    value: (0, _get.default)(color, 'v'),
    onColorChange: handleColorChange
  }), _react.default.createElement(_LuminositySlider.LuminositySlider, {
    min: 0,
    max: 100,
    step: 1,
    value: (0, _get.default)(color, 'v', 1) * 100,
    width: colorWheelSize,
    onChange: handleSliderChange
  }));

  var {
    open,
    popover,
    ref: triggerRef
  } = (0, _Popover.usePopover)({
    content
  });
  return _react.default.createElement("div", {
    className: className
  }, _react.default.createElement(_Swatch.Swatch, {
    ref: triggerRef,
    color: color ? (0, _color_format_utils.hsv2hex)(color) : undefined,
    disabled: props.disabled,
    onClick: open
  }), !props.disabled && popover, !hideInput && _react.default.createElement(_InputText.InputText, _extends({}, props, {
    "aria-describedby": "".concat(id, "-describedby"),
    id: inputID,
    ref: ref,
    validationType: validationMessage && validationMessage.type,
    onChange: handleInputTextChange,
    value: inputTextValue,
    onFocus: wrappedOnFocus,
    onBlur: wrappedOnBlur
  })));
});
exports.InputColorComponent = InputColorComponent;
InputColorComponent.displayName = 'InputColorComponent';
var InputColor = (0, _styledComponents.default)(InputColorComponent).withConfig({
  displayName: "InputColor",
  componentId: "s77c8w-0"
})(["display:flex;", "{border-radius:", ";border-bottom-left-radius:", ";border-right:", ";border-top-left-radius:", ";}", "{border-radius:", ";border-bottom-right-radius:", ";border-top-right-radius:", ";}"], _Swatch.Swatch, (_ref2) => {
  var {
    hideInput,
    theme: {
      radii
    }
  } = _ref2;
  return hideInput ? radii.medium : radii.none;
}, (_ref3) => {
  var {
    theme: {
      radii
    }
  } = _ref3;
  return radii.medium;
}, (_ref4) => {
  var {
    hideInput
  } = _ref4;
  return hideInput ? undefined : 'none';
}, (_ref5) => {
  var {
    theme: {
      radii
    }
  } = _ref5;
  return radii.medium;
}, _InputText.InputText, (_ref6) => {
  var {
    theme: {
      radii
    }
  } = _ref6;
  return radii.none;
}, (_ref7) => {
  var {
    theme: {
      radii
    }
  } = _ref7;
  return radii.medium;
}, (_ref8) => {
  var {
    theme: {
      radii
    }
  } = _ref8;
  return radii.medium;
});
exports.InputColor = InputColor;
//# sourceMappingURL=InputColor.js.map