"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.simpleHSVtoFormattedColorString = exports.simpleHSVtoRGB = exports.str2simpleHsv = exports.hsv2hex = exports.hsvToColorString = exports.toHSV = exports.toFormattedColorString = exports.toHSLString = exports.toRGBPString = exports.toRGBIString = exports.toColorName = exports.getOpacity = exports.getFormat = exports.ColorFormat = void 0;

var d3color = _interopRequireWildcard(require("d3-color"));

var d3hsv = _interopRequireWildcard(require("d3-hsv"));

var _math_utils = require("./math_utils");

var _named_colors = require("./named_colors");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var ColorFormat;
exports.ColorFormat = ColorFormat;

(function (ColorFormat) {
  ColorFormat[ColorFormat["NAME"] = 0] = "NAME";
  ColorFormat[ColorFormat["HEX3"] = 1] = "HEX3";
  ColorFormat[ColorFormat["HEX6"] = 2] = "HEX6";
  ColorFormat[ColorFormat["RGBI"] = 3] = "RGBI";
  ColorFormat[ColorFormat["RGBIA"] = 4] = "RGBIA";
  ColorFormat[ColorFormat["RGBP"] = 5] = "RGBP";
  ColorFormat[ColorFormat["RGBPA"] = 6] = "RGBPA";
  ColorFormat[ColorFormat["HSL"] = 7] = "HSL";
  ColorFormat[ColorFormat["HSLA"] = 8] = "HSLA";
  ColorFormat[ColorFormat["TRANSPARENT"] = 9] = "TRANSPARENT";
  ColorFormat[ColorFormat["BAD"] = 10] = "BAD";
})(ColorFormat || (exports.ColorFormat = ColorFormat = {}));

var RGB_MAX_VALUE = 255;

var recognize = format => {
  var reI = '\\s*([+-]?\\d+)\\s*';
  var reN = '\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*';
  var reP = '\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*';
  var reHex3 = /^#([0-9a-f]{3})$/;
  var reHex6 = /^#([0-9a-f]{6})$/;
  var reRgbInteger = new RegExp('^rgb\\(' + [reI, reI, reI] + '\\)$');
  var reRgbPercent = new RegExp('^rgb\\(' + [reP, reP, reP] + '\\)$');
  var reRgbaInteger = new RegExp('^rgba\\(' + [reI, reI, reI, reN] + '\\)$');
  var reRgbaPercent = new RegExp('^rgba\\(' + [reP, reP, reP, reN] + '\\)$');
  var reRgbaPercent2 = new RegExp('^rgba\\(' + [reP, reP, reP, reP] + '\\)$');
  var reHslPercent = new RegExp('^hsl\\(' + [reN, reP, reP] + '\\)$');
  var reHslaPercent = new RegExp('^hsla\\(' + [reN, reP, reP, reN] + '\\)$');
  format = String(format).trim().toLowerCase();
  return reHex3.exec(format) ? ColorFormat.HEX3 : reHex6.exec(format) ? ColorFormat.HEX6 : reRgbInteger.exec(format) ? ColorFormat.RGBI : reRgbPercent.exec(format) ? ColorFormat.RGBP : reRgbaInteger.exec(format) ? ColorFormat.RGBIA : reRgbaPercent.exec(format) ? ColorFormat.RGBPA : reRgbaPercent2.exec(format) ? ColorFormat.RGBPA : reHslPercent.exec(format) ? ColorFormat.HSL : reHslaPercent.exec(format) ? ColorFormat.HSLA : Object.prototype.hasOwnProperty.call(_named_colors.namedColors, format) ? ColorFormat.NAME : format === 'transparent' ? ColorFormat.TRANSPARENT : ColorFormat.BAD;
};

var getFormat = value => ColorFormat[recognize(value)];

exports.getFormat = getFormat;

var getOpacity = color => {
  if (color instanceof d3color.cubehelix || color instanceof d3color.hcl || color instanceof d3color.hsl || color instanceof d3color.rgb || color instanceof d3color.lab) {
    return color.opacity;
  }

  return 1;
};

exports.getOpacity = getOpacity;

var namedColorLookup = color => {
  var hex = color.hex().replace(/^#/, '');
  var lookup = parseInt(hex, 16);
  var namedColorsFlipped = new Map(Object.entries(_named_colors.namedColors).map((_ref) => {
    var [k, v] = _ref;
    return [v, k];
  }));
  return namedColorsFlipped.get(lookup);
};

var toColorName = function toColorName(color) {
  var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var opacityUse = opacity || getOpacity(color);
  var name = namedColorLookup(color);
  if (name) return name;
  if (opacityUse !== 1) return d3color.rgb(color).toString();
  return color.hex();
};

exports.toColorName = toColorName;

var toRGBIString = function toRGBIString(color) {
  var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var useAlpha = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var opacityUse = opacity || getOpacity(color);
  var rgb = color.rgb();
  var r = Math.round(rgb.r);
  var g = Math.round(rgb.g);
  var b = Math.round(rgb.b);

  if (useAlpha || opacityUse !== 1) {
    return "rgba(".concat(r, ", ").concat(g, ", ").concat(b, ", ").concat(opacityUse, ")");
  }

  return "rgb(".concat(r, ", ").concat(g, ", ").concat(b, ")");
};

exports.toRGBIString = toRGBIString;

var toRGBPString = function toRGBPString(color) {
  var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var useAlpha = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var opacityUse = opacity || getOpacity(color);
  var rgb = color.rgb();
  var r = (0, _math_utils.toPercent)(rgb.r, RGB_MAX_VALUE);
  var g = (0, _math_utils.toPercent)(rgb.g, RGB_MAX_VALUE);
  var b = (0, _math_utils.toPercent)(rgb.b, RGB_MAX_VALUE);

  if (useAlpha || opacityUse !== 1) {
    return "rgba(".concat(r, "%, ").concat(g, "%, ").concat(b, "%, ").concat(opacityUse, ")");
  }

  return "rgb(".concat(r, "%, ").concat(g, "%, ").concat(b, "%)");
};

exports.toRGBPString = toRGBPString;

var toHSLString = function toHSLString(color) {
  var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var useAlpha = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var opacityUse = opacity || getOpacity(color);
  var hsl = d3color.hsl(color);
  var h = isNaN(hsl.h) ? 0 : hsl.h;
  var s = isNaN(hsl.s) ? 0 : Math.round(hsl.s * 100);
  var l = isNaN(hsl.l) ? 100 : Math.round(hsl.l * 100);

  if (useAlpha || opacityUse !== 1) {
    return "hsla(".concat(h, ", ").concat(s, "%, ").concat(l, "%, ").concat(opacityUse, ")");
  }

  return "hsl(".concat(h, ", ").concat(s, "%, ").concat(l, "%)");
};

exports.toHSLString = toHSLString;

var toFormattedColorString = function toFormattedColorString(value) {
  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var color = d3color.color(value);
  if (!color) return '';
  if (!color.displayable) return '';
  if (format === null) format = recognize(value);
  var opacity = getOpacity(color);

  switch (format) {
    case ColorFormat.NAME:
    case ColorFormat.TRANSPARENT:
      return toColorName(color);

    case ColorFormat.HEX3:
    case ColorFormat.HEX6:
      if (opacity === 1) return color.hex();
      return color.rgb().toString();

    case ColorFormat.RGBI:
      return color.rgb().toString();

    case ColorFormat.RGBIA:
      return toRGBIString(color, opacity, true);

    case ColorFormat.RGBP:
      return toRGBPString(color, opacity);

    case ColorFormat.RGBPA:
      return toRGBPString(color, opacity, true);

    case ColorFormat.HSL:
      return toHSLString(color, opacity);

    case ColorFormat.HSLA:
      return toHSLString(color, opacity, true);

    default:
      return color.toString();
  }
};

exports.toFormattedColorString = toFormattedColorString;

var toHSV = value => {
  var color = d3color.color(value);
  if (!color) return null;
  return d3hsv.hsv(color);
};

exports.toHSV = toHSV;

var hsvToColorString = function hsvToColorString(hsvColor) {
  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return toFormattedColorString(hsvColor.rgb().toString(), format);
};

exports.hsvToColorString = hsvToColorString;

var hsv2hex = color => d3hsv.hsv(color.h, color.s, color.v).hex();

exports.hsv2hex = hsv2hex;

var str2simpleHsv = color => {
  var hsvColor = d3hsv.hsv(color);
  var simpleHSV = {
    h: hsvColor.h,
    s: hsvColor.s,
    v: hsvColor.v
  };
  return simpleHSV;
};

exports.str2simpleHsv = str2simpleHsv;

var simpleHSVtoRGB = color => d3hsv.hsv(color.h, color.s, color.v).rgb();

exports.simpleHSVtoRGB = simpleHSVtoRGB;

var simpleHSVtoFormattedColorString = (color, colorFormat) => {
  var rgbColor = simpleHSVtoRGB(color);

  switch (colorFormat) {
    case 'NAME':
      return toColorName(rgbColor);

    case 'RGBI':
    case 'RGBIA':
      return toRGBIString(rgbColor);

    case 'RGBP':
    case 'RGBPA':
      return toRGBPString(rgbColor);

    case 'HSL':
    case 'HSLA':
      return toHSLString(rgbColor);

    case 'HEX3':
    case 'HEX6':
    default:
      return rgbColor.hex();
  }
};

exports.simpleHSVtoFormattedColorString = simpleHSVtoFormattedColorString;
//# sourceMappingURL=color_format_utils.js.map