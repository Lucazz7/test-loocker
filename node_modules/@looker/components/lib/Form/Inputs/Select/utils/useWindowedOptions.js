"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useShouldWindowOptions = useShouldWindowOptions;
exports.useWindowedOptions = useWindowedOptions;
exports.optionHeight = void 0;

var _findIndex = _interopRequireDefault(require("lodash/findIndex"));

var _react = _interopRequireWildcard(require("react"));

var _getWindowedListBoundaries = require("../../../../utils/getWindowedListBoundaries");

var _Combobox = require("../../Combobox");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var optionHeight = 28;
exports.optionHeight = optionHeight;

function useShouldWindowOptions(options, propsWindowedOptions) {
  return (0, _react.useMemo)(() => {
    if (!options) return false;
    if (propsWindowedOptions === false) return false;
    if (options.length < 100 && !propsWindowedOptions) return false;
    var groupedOptions = options.find(option => option.options !== undefined);

    if (groupedOptions) {
      if (propsWindowedOptions) {
        console.warn('The `windowedOptions` prop does not support grouped options.');
      }

      return false;
    }

    return true;
  }, [options, propsWindowedOptions]);
}

function useWindowedOptions(windowedOptions, options, isMulti) {
  var context = (0, _react.useContext)(_Combobox.ComboboxContext);
  var contextMulti = (0, _react.useContext)(_Combobox.ComboboxMultiContext);
  var contextToUse = isMulti ? contextMulti : context;
  var {
    data: {
      navigationOption
    },
    listClientRect,
    listScrollPosition,
    optionsRef
  } = contextToUse;
  var flatOptions = options;
  (0, _react.useEffect)(() => {
    if (windowedOptions && flatOptions && flatOptions.length > 0 && optionsRef) {
      optionsRef.current = [...flatOptions];
    }
  }, [flatOptions, optionsRef, windowedOptions]);
  var containerHeight = listClientRect && listClientRect.height;
  var {
    start,
    end
  } = (0, _react.useMemo)(() => (0, _getWindowedListBoundaries.getWindowedListBoundaries)({
    containerHeight,
    containerScrollPosition: listScrollPosition,
    enabled: windowedOptions,
    itemHeight: optionHeight,
    length: flatOptions ? flatOptions.length : 0
  }), [flatOptions, containerHeight, listScrollPosition, windowedOptions]);
  var isFirstRender = (0, _react.useRef)(true);

  if (windowedOptions && isFirstRender.current) {
    if (navigationOption) {
      var selectedIndex = (0, _findIndex.default)(options, ['value', navigationOption.value]);
      start = selectedIndex;
      end = selectedIndex;
    }

    isFirstRender.current = false;
  }

  var scrollToFirst = false;
  var scrollToLast = false;

  if (windowedOptions && flatOptions && flatOptions.length && navigationOption) {
    scrollToFirst = start > 0 && navigationOption.value === flatOptions[0].value;
    scrollToLast = end < flatOptions.length - 1 && navigationOption.value === flatOptions[flatOptions.length - 1].value;
  }

  var afterLength = flatOptions ? flatOptions.length - 1 - end : 0;
  return {
    after: afterLength > 0 ? _react.default.createElement("li", {
      style: {
        height: "".concat(afterLength * optionHeight, "px")
      }
    }) : null,
    before: start > 0 ? _react.default.createElement("li", {
      style: {
        height: "".concat(start * optionHeight, "px")
      }
    }) : null,
    end,
    scrollToFirst,
    scrollToLast,
    start
  };
}
//# sourceMappingURL=useWindowedOptions.js.map