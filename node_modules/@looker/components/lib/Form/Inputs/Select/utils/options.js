"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.flattenOptions = flattenOptions;
exports.getOption = getOption;
exports.getOptions = getOptions;
exports.compareOption = compareOption;
exports.getFirstOption = getFirstOption;
exports.notInOptions = notInOptions;

var _Combobox = require("../../Combobox");

function flattenOptions(options) {
  return options.reduce((acc, option) => {
    var optionAsGroup = option;

    if (optionAsGroup.options) {
      return [...acc, ...optionAsGroup.options];
    }

    return [...acc, option];
  }, []);
}

function getOption(value, options) {
  var flattenedOptions = options && flattenOptions(options);
  return value ? {
    label: (0, _Combobox.getComboboxText)(value, flattenedOptions),
    value
  } : undefined;
}

function getOptions(values, options) {
  if (!values) return undefined;
  var flattenedOptions = options && flattenOptions(options);
  return values.map(value => ({
    label: (0, _Combobox.getComboboxText)(value, flattenedOptions),
    value
  }));
}

function compareOption(option, value) {
  return (0, _Combobox.getComboboxText)(option).toLowerCase() === value.toLowerCase();
}

function getFirstOption(options) {
  var optionAsGroup = options[0];
  if (optionAsGroup && optionAsGroup.options) return optionAsGroup.options[0];
  return options[0];
}

function notInOptions(currentOptions, options, inputValue) {
  if (!inputValue) return false;

  if (currentOptions.find(option => compareOption(option, inputValue))) {
    return false;
  }

  if (!options) return true;
  return flattenOptions(options).find(option => compareOption(option, inputValue)) === undefined;
}
//# sourceMappingURL=options.js.map