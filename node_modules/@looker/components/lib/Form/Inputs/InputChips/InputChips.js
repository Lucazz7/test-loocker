"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputChips = exports.InputChipsInternal = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _utils = require("../../../utils");

var _InputChipsBase = require("./InputChipsBase");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function getUpdatedValues(inputValue, currentValues, validate) {
  var duplicateValues = [];
  var invalidValues = [];
  var unusedValues = [];
  var validValues = [];
  var commaKey = Math.random() + '';
  var tabKey = Math.random() + '';
  var removedEscapes = inputValue.replace(/\\,/, commaKey).replace(/\\\t/, tabKey);
  var inputValues = removedEscapes.split(/[,\t\n\r]+/).map(value => value.replace(commaKey, ',').replace(tabKey, '\t'));
  inputValues.forEach(val => {
    var trimmedValue = val.trim();
    if (trimmedValue === '') return;

    if (validate && !validate(trimmedValue)) {
      unusedValues.push(trimmedValue);
      return invalidValues.push(trimmedValue);
    } else if (currentValues && currentValues.includes(trimmedValue)) {
      unusedValues.push(trimmedValue);
      return duplicateValues.push(trimmedValue);
    } else {
      return validValues.push(trimmedValue);
    }
  });
  return {
    duplicateValues,
    invalidValues,
    unusedValues,
    validValues
  };
}

var InputChipsInternal = (0, _react.forwardRef)((_ref, ref) => {
  var {
    values,
    onChange,
    inputValue: controlledInputValue,
    onInputChange,
    validate,
    onValidationFail,
    onDuplicate,
    onBlur,
    onKeyDown,
    onPaste
  } = _ref,
      props = _objectWithoutProperties(_ref, ["values", "onChange", "inputValue", "onInputChange", "validate", "onValidationFail", "onDuplicate", "onBlur", "onKeyDown", "onPaste"]);

  var isControlled = (0, _utils.useControlWarn)({
    controllingProps: ['inputValue', 'onInputChange'],
    isControlledCheck: () => controlledInputValue !== undefined && onInputChange !== undefined,
    name: 'InputChips'
  });
  var [uncontrolledValue, setUncontrolledValue] = (0, _react.useState)('');
  var inputValue = isControlled ? controlledInputValue || '' : uncontrolledValue;

  var setInputValue = val => {
    if (!isControlled) {
      setUncontrolledValue(val);
    }

    onInputChange && onInputChange(val);
  };

  function updateValues(newInputValue) {
    var {
      duplicateValues,
      invalidValues,
      unusedValues,
      validValues
    } = getUpdatedValues(newInputValue || inputValue, values, validate);
    var updatedInputValue = unusedValues.join(', ');
    var updatedValues = validValues.length && [...values, ...validValues];

    if (updatedValues) {
      onChange(updatedValues);
    }

    if (invalidValues.length > 0) {
      onValidationFail && onValidationFail(invalidValues);
    }

    if (duplicateValues.length > 0) {
      onDuplicate && onDuplicate(duplicateValues);
    }

    setInputValue(updatedInputValue);
  }

  function handleBlur() {
    updateValues();
  }

  function handleKeyDown(e) {
    if (e.key === 'Enter') {
      e.preventDefault();
      updateValues();
    }
  }

  var pastedValue = (0, _react.useRef)();

  function handlePaste(e) {
    pastedValue.current = e.clipboardData.getData('Text');
  }

  function handleInputChange(value) {
    if (pastedValue.current || value.endsWith(',')) {
      updateValues(pastedValue.current || value);
      pastedValue.current = null;
    } else {
      setInputValue(value);
    }
  }

  var wrappedEvents = {
    onBlur: (0, _utils.useWrapEvent)(handleBlur, onBlur),
    onKeyDown: (0, _utils.useWrapEvent)(handleKeyDown, onKeyDown),
    onPaste: (0, _utils.useWrapEvent)(handlePaste, onPaste)
  };
  return _react.default.createElement(_InputChipsBase.InputChipsBase, _extends({
    ref: ref,
    values: values,
    onChange: onChange,
    inputValue: inputValue,
    onInputChange: handleInputChange
  }, wrappedEvents, props));
});
exports.InputChipsInternal = InputChipsInternal;
InputChipsInternal.displayName = 'InputChipsInternal';
var InputChips = (0, _styledComponents.default)(InputChipsInternal).withConfig({
  displayName: "InputChips",
  componentId: "sc-6zpztz-0"
})([""]);
exports.InputChips = InputChips;
//# sourceMappingURL=InputChips.js.map