"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputChipsBase = exports.InputChipsBaseInternal = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _Chip = require("../../../Chip");

var _InputText = require("../InputText");

var _AdvancedInputControls = require("../AdvancedInputControls");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var InputChipsBaseInternal = (0, _react.forwardRef)((_ref, ref) => {
  var {
    values,
    onChange,
    onKeyDown,
    inputValue,
    onInputChange,
    disabled,
    validationType,
    onClear,
    isVisibleOptions,
    hasOptions = false,
    hideControls = false,
    summary,
    removeOnBackspace = true
  } = _ref,
      props = _objectWithoutProperties(_ref, ["values", "onChange", "onKeyDown", "inputValue", "onInputChange", "disabled", "validationType", "onClear", "isVisibleOptions", "hasOptions", "hideControls", "summary", "removeOnBackspace"]);

  function handleDeleteChip(value) {
    var newValues = values.filter(v => value !== v);
    onChange(newValues);
  }

  function handleKeyDown(e) {
    onKeyDown && onKeyDown(e);

    if (e.key === 'Backspace' && removeOnBackspace && !e.defaultPrevented) {
      inputValue === '' && handleDeleteChip(values[values.length - 1]);
    }
  }

  function handleClear() {
    onChange([]);
    onInputChange('');
    onClear && onClear();
  }

  var chips = values.map(value => {
    function onChipDelete() {
      handleDeleteChip(value);
    }

    return _react.default.createElement(_Chip.Chip, {
      onDelete: onChipDelete,
      key: value,
      mb: 1,
      mt: 1,
      mr: "xxsmall"
    }, value);
  });

  function handleInputChange(e) {
    onInputChange(e.currentTarget.value);
  }

  var renderSearchControls = values.length > 0;
  return _react.default.createElement(_InputText.InputText, _extends({
    after: !hideControls && _react.default.createElement(_AdvancedInputControls.AdvancedInputControls, {
      isVisibleOptions: isVisibleOptions,
      onClear: handleClear,
      renderSearchControls: renderSearchControls,
      validationType: validationType,
      disabled: disabled,
      summary: summary,
      hasOptions: hasOptions
    }),
    ref: ref,
    value: inputValue,
    onChange: handleInputChange,
    onKeyDown: handleKeyDown,
    validationType: validationType,
    height: "auto"
  }, props), chips);
});
exports.InputChipsBaseInternal = InputChipsBaseInternal;
InputChipsBaseInternal.displayName = 'InputChipsBaseInternal';
var inputHeightStyle = (0, _styledComponents.css)(["height:calc(", " - 6px);"], _InputText.inputHeight);
var InputChipsBase = (0, _styledComponents.default)(InputChipsBaseInternal).withConfig({
  displayName: "InputChipsBase",
  componentId: "sc-1a9apwv-0"
})(["align-items:stretch;position:relative;.inner{align-content:flex-start;display:flex;flex-wrap:wrap;width:100%;}input{min-width:25%;width:auto;", "}", "{", "}"], inputHeightStyle, _InputText.InputTextContent, inputHeightStyle);
exports.InputChipsBase = InputChipsBase;
//# sourceMappingURL=InputChipsBase.js.map