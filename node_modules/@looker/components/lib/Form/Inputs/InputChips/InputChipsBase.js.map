{"version":3,"sources":["../../../../src/Form/Inputs/InputChips/InputChipsBase.tsx"],"names":["InputChipsBaseInternal","ref","values","onChange","onKeyDown","inputValue","onInputChange","disabled","validationType","onClear","isVisibleOptions","hasOptions","hideControls","summary","removeOnBackspace","props","handleDeleteChip","value","newValues","filter","v","handleKeyDown","e","key","defaultPrevented","length","handleClear","chips","map","onChipDelete","handleInputChange","currentTarget","renderSearchControls","displayName","inputHeightStyle","css","inputHeight","InputChipsBase","InputTextContent"],"mappings":";;;;;;;AAyBA;;AACA;;AAEA;;AACA;;AAMA;;;;;;;;;;;;AA8CO,IAAMA,sBAAsB,GAAG,uBACpC,OAiBEC,GAjBF,KAkBK;AAAA,MAjBH;AACEC,IAAAA,MADF;AAEEC,IAAAA,QAFF;AAGEC,IAAAA,SAHF;AAIEC,IAAAA,UAJF;AAKEC,IAAAA,aALF;AAMEC,IAAAA,QANF;AAOEC,IAAAA,cAPF;AAQEC,IAAAA,OARF;AASEC,IAAAA,gBATF;AAUEC,IAAAA,UAAU,GAAG,KAVf;AAWEC,IAAAA,YAAY,GAAG,KAXjB;AAYEC,IAAAA,OAZF;AAaEC,IAAAA,iBAAiB,GAAG;AAbtB,GAiBG;AAAA,MAHEC,KAGF;;AACH,WAASC,gBAAT,CAA0BC,KAA1B,EAAyC;AACvC,QAAMC,SAAS,GAAGhB,MAAM,CAACiB,MAAP,CAAeC,CAAD,IAAOH,KAAK,KAAKG,CAA/B,CAAlB;AACAjB,IAAAA,QAAQ,CAACe,SAAD,CAAR;AACD;;AAED,WAASG,aAAT,CAAuBC,CAAvB,EAA2D;AACzDlB,IAAAA,SAAS,IAAIA,SAAS,CAACkB,CAAD,CAAtB;;AACA,QAAIA,CAAC,CAACC,GAAF,KAAU,WAAV,IAAyBT,iBAAzB,IAA8C,CAACQ,CAAC,CAACE,gBAArD,EAAuE;AAErEnB,MAAAA,UAAU,KAAK,EAAf,IAAqBW,gBAAgB,CAACd,MAAM,CAACA,MAAM,CAACuB,MAAP,GAAgB,CAAjB,CAAP,CAArC;AACD;AACF;;AAED,WAASC,WAAT,GAAuB;AACrBvB,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACAG,IAAAA,aAAa,CAAC,EAAD,CAAb;AACAG,IAAAA,OAAO,IAAIA,OAAO,EAAlB;AACD;;AAED,MAAMkB,KAAK,GAAGzB,MAAM,CAAC0B,GAAP,CAAYX,KAAD,IAAW;AAClC,aAASY,YAAT,GAAwB;AACtBb,MAAAA,gBAAgB,CAACC,KAAD,CAAhB;AACD;;AACD,WACE,6BAAC,UAAD;AAAM,MAAA,QAAQ,EAAEY,YAAhB;AAA8B,MAAA,GAAG,EAAEZ,KAAnC;AAA0C,MAAA,EAAE,EAAE,CAA9C;AAAiD,MAAA,EAAE,EAAE,CAArD;AAAwD,MAAA,EAAE,EAAC;AAA3D,OACGA,KADH,CADF;AAKD,GATa,CAAd;;AAWA,WAASa,iBAAT,CAA2BR,CAA3B,EAA2D;AACzDhB,IAAAA,aAAa,CAACgB,CAAC,CAACS,aAAF,CAAgBd,KAAjB,CAAb;AACD;;AAED,MAAMe,oBAAoB,GAAG9B,MAAM,CAACuB,MAAP,GAAgB,CAA7C;AAEA,SACE,6BAAC,oBAAD;AACE,IAAA,KAAK,EACH,CAACb,YAAD,IACE,6BAAC,4CAAD;AACE,MAAA,gBAAgB,EAAEF,gBADpB;AAEE,MAAA,OAAO,EAAEgB,WAFX;AAGE,MAAA,oBAAoB,EAAEM,oBAHxB;AAIE,MAAA,cAAc,EAAExB,cAJlB;AAKE,MAAA,QAAQ,EAAED,QALZ;AAME,MAAA,OAAO,EAAEM,OANX;AAOE,MAAA,UAAU,EAAEF;AAPd,MAHN;AAcE,IAAA,GAAG,EAAEV,GAdP;AAeE,IAAA,KAAK,EAAEI,UAfT;AAgBE,IAAA,QAAQ,EAAEyB,iBAhBZ;AAiBE,IAAA,SAAS,EAAET,aAjBb;AAkBE,IAAA,cAAc,EAAEb,cAlBlB;AAmBE,IAAA,MAAM,EAAC;AAnBT,KAoBMO,KApBN,GAsBGY,KAtBH,CADF;AA0BD,CAlFmC,CAA/B;;AAqFP3B,sBAAsB,CAACiC,WAAvB,GAAqC,wBAArC;AAEA,IAAMC,gBAAgB,OAAGC,qBAAH,gCACLC,sBADK,CAAtB;AAIO,IAAMC,cAAc,GAAG,+BAAOrC,sBAAP,CAAH;AAAA;AAAA;AAAA,qKAcrBkC,gBAdqB,EAiBvBI,2BAjBuB,EAkBrBJ,gBAlBqB,CAApB","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2020 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\nimport React, { FormEvent, forwardRef, KeyboardEvent, Ref } from 'react'\nimport styled, { css } from 'styled-components'\nimport { MaxHeightProps } from 'styled-system'\nimport { Chip } from '../../../Chip'\nimport {\n  inputHeight,\n  InputTextContent,\n  InputText,\n  InputTextBaseProps,\n} from '../InputText'\nimport { AdvancedInputControls } from '../AdvancedInputControls'\n\nexport interface InputChipsInputControlProps {\n  /**\n   * for controlling the input text\n   */\n  inputValue: string\n  /**\n   * callback when the input text changes (use with inputValue to control the input text)\n   */\n  onInputChange: (value: string) => void\n  isVisibleOptions?: boolean\n  hasOptions?: boolean\n}\n\nexport interface InputChipsControlProps {\n  /**\n   * InputChips is a controlled component since unlike native inputs,\n   * you can't easily access the current value via dom API\n   */\n  values: string[]\n  /**\n   * InputChips is a controlled component since unlike native inputs,\n   * you can't easily access the current value via dom API\n   */\n  onChange: (values: string[]) => void\n  onClear?: () => void\n}\n\nexport interface InputChipsCommonProps\n  extends Omit<InputTextBaseProps, 'defaultValue' | 'onChange'>,\n    MaxHeightProps {\n  summary?: string\n  hideControls?: boolean\n  /**\n   * Set to false to disable the removal of the last value on backspace key\n   * @default true\n   */\n  removeOnBackspace?: boolean\n}\n\nexport interface InputChipsBaseProps\n  extends InputChipsCommonProps,\n    InputChipsControlProps,\n    InputChipsInputControlProps {}\n\nexport const InputChipsBaseInternal = forwardRef(\n  (\n    {\n      values,\n      onChange,\n      onKeyDown,\n      inputValue,\n      onInputChange,\n      disabled,\n      validationType,\n      onClear,\n      isVisibleOptions,\n      hasOptions = false,\n      hideControls = false,\n      summary,\n      removeOnBackspace = true,\n      ...props\n    }: InputChipsBaseProps & InputChipsInputControlProps,\n    ref: Ref<HTMLInputElement>\n  ) => {\n    function handleDeleteChip(value: string) {\n      const newValues = values.filter((v) => value !== v)\n      onChange(newValues)\n    }\n\n    function handleKeyDown(e: KeyboardEvent<HTMLInputElement>) {\n      onKeyDown && onKeyDown(e)\n      if (e.key === 'Backspace' && removeOnBackspace && !e.defaultPrevented) {\n        // If we hit backspace and there is no text left to delete, remove the last entry instead\n        inputValue === '' && handleDeleteChip(values[values.length - 1])\n      }\n    }\n\n    function handleClear() {\n      onChange([])\n      onInputChange('')\n      onClear && onClear()\n    }\n\n    const chips = values.map((value) => {\n      function onChipDelete() {\n        handleDeleteChip(value)\n      }\n      return (\n        <Chip onDelete={onChipDelete} key={value} mb={1} mt={1} mr=\"xxsmall\">\n          {value}\n        </Chip>\n      )\n    })\n\n    function handleInputChange(e: FormEvent<HTMLInputElement>) {\n      onInputChange(e.currentTarget.value)\n    }\n\n    const renderSearchControls = values.length > 0\n\n    return (\n      <InputText\n        after={\n          !hideControls && (\n            <AdvancedInputControls\n              isVisibleOptions={isVisibleOptions}\n              onClear={handleClear}\n              renderSearchControls={renderSearchControls}\n              validationType={validationType}\n              disabled={disabled}\n              summary={summary}\n              hasOptions={hasOptions}\n            />\n          )\n        }\n        ref={ref}\n        value={inputValue}\n        onChange={handleInputChange}\n        onKeyDown={handleKeyDown}\n        validationType={validationType}\n        height=\"auto\"\n        {...props}\n      >\n        {chips}\n      </InputText>\n    )\n  }\n)\n\nInputChipsBaseInternal.displayName = 'InputChipsBaseInternal'\n\nconst inputHeightStyle = css`\n  height: calc(${inputHeight} - 6px);\n`\n\nexport const InputChipsBase = styled(InputChipsBaseInternal)`\n  align-items: stretch;\n  position: relative;\n\n  .inner {\n    align-content: flex-start;\n    display: flex;\n    flex-wrap: wrap;\n    width: 100%;\n  }\n\n  input {\n    min-width: 25%;\n    width: auto;\n    ${inputHeightStyle}\n  }\n\n  ${InputTextContent} {\n    ${inputHeightStyle}\n  }\n`\n"],"file":"InputChipsBase.js"}