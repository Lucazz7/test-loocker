"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputText = exports.inputCSS = exports.inputTextValidation = exports.InputTextContent = exports.inputHeight = exports.inputTextDisabled = exports.inputTextFocus = exports.inputTextHover = void 0;

var _pick = _interopRequireDefault(require("lodash/pick"));

var _omit = _interopRequireDefault(require("lodash/omit"));

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _InputProps = require("../InputProps");

var _innerInputStyle = require("../innerInputStyle");

var _Icon = require("../../../Icon");

var _Text = require("../../../Text");

var _utils = require("../../../utils");

var _InlineInputText = require("../InlineInputText");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var InputTextLayout = (0, _react.forwardRef)((_ref, forwardedRef) => {
  var {
    autoResize,
    children,
    className,
    before,
    iconBefore,
    iconBeforeTitle,
    after,
    iconAfter,
    iconAfterTitle,
    type = 'text',
    validationType,
    onClick,
    onMouseDown,
    onMouseEnter,
    onMouseLeave,
    onMouseOut,
    onMouseOver,
    onMouseUp
  } = _ref,
      props = _objectWithoutProperties(_ref, ["autoResize", "children", "className", "before", "iconBefore", "iconBeforeTitle", "after", "iconAfter", "iconAfterTitle", "type", "validationType", "onClick", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseOut", "onMouseOver", "onMouseUp"]);

  if (before && iconBefore) {
    console.warn('Use before or iconBefore, but not both at the same time.');
    return null;
  }

  if (after && iconAfter) {
    console.warn('Use after or iconAfter, but not both at the same time.');
    return null;
  }

  var internalRef = (0, _react.useRef)(null);
  var ref = (0, _utils.useForkedRef)(internalRef, forwardedRef);

  function handleMouseDown() {
    window.requestAnimationFrame(() => {
      internalRef.current && internalRef.current.focus();
    });
  }

  var mouseHandlers = {
    onClick,
    onMouseDown: (0, _utils.useWrapEvent)(handleMouseDown, onMouseDown),
    onMouseEnter,
    onMouseLeave,
    onMouseOut,
    onMouseOver,
    onMouseUp
  };

  var iconBeforeOrPrefix = (iconBefore || typeof before === 'string') && _react.default.createElement(InputTextContent, {
    pl: "xxsmall"
  }, iconBefore ? _react.default.createElement(_Icon.Icon, {
    name: iconBefore,
    title: iconBeforeTitle,
    size: 20
  }) : _react.default.createElement(_Text.Text, {
    fontSize: "small"
  }, before));

  var beforeToUse = iconBeforeOrPrefix || before || null;

  var iconAfterOrSuffix = (iconAfter || typeof after === 'string') && _react.default.createElement(InputTextContent, {
    pl: "xsmall",
    pr: "xxsmall"
  }, iconAfter ? _react.default.createElement(_Icon.Icon, {
    name: iconAfter,
    title: iconAfterTitle,
    size: 20
  }) : _react.default.createElement(_Text.Text, {
    fontSize: "small"
  }, after));

  var validationIcon = validationType === 'error' && _react.default.createElement(InputTextContent, {
    pl: after || iconAfter ? 'xxsmall' : 'xsmall',
    pr: "xxsmall"
  }, _react.default.createElement(_Icon.Icon, {
    color: "critical",
    name: "CircleInfo",
    title: "Validation Error",
    size: 20
  }));

  var afterToUse = iconAfterOrSuffix ? _react.default.createElement(_react.default.Fragment, null, iconAfterOrSuffix, validationIcon) : after || validationIcon;

  var inputProps = _objectSpread(_objectSpread({}, (0, _pick.default)((0, _designTokens.omitStyledProps)(props), _InputProps.inputPropKeys)), {}, {
    'aria-invalid': validationType === 'error' ? true : undefined,
    type
  });

  var input = _react.default.createElement("input", _extends({}, inputProps, {
    ref: ref
  }));

  var inner = children ? _react.default.createElement("div", {
    className: "inner"
  }, children, input) : autoResize ? _react.default.createElement(_InlineInputText.InlineInputTextBase, _extends({}, inputProps, {
    ref: ref
  })) : input;
  return _react.default.createElement("div", _extends({
    className: className
  }, mouseHandlers, (0, _designTokens.omitStyledProps)((0, _omit.default)(props, _InputProps.inputPropKeys))), beforeToUse && beforeToUse, inner, afterToUse && afterToUse);
});
InputTextLayout.displayName = 'InputComponent';
var inputTextHover = (0, _styledComponents.css)(["border-color:", ";"], props => props.theme.colors.ui3);
exports.inputTextHover = inputTextHover;
var inputTextFocus = (0, _styledComponents.css)(["border-color:", ";box-shadow:0 0 0 2px ", ";outline:none;"], props => props.theme.colors.keyFocus, props => props.theme.colors.keyAccent);
exports.inputTextFocus = inputTextFocus;
var inputTextDisabled = (0, _styledComponents.css)(["background:", ";color:", ";&:hover{border-color:", ";}"], props => props.theme.colors.ui1, props => props.theme.colors.text5, props => props.theme.colors.ui2);
exports.inputTextDisabled = inputTextDisabled;
var inputHeight = '36px';
exports.inputHeight = inputHeight;

var InputTextContent = _styledComponents.default.div.withConfig({
  displayName: "InputText__InputTextContent",
  componentId: "sc-6cvg1f-0"
})(["", " align-items:center;color:", ";display:flex;height:100%;pointer-events:none;"], _designTokens.space, props => props.theme.colors.text5);

exports.InputTextContent = InputTextContent;
var inputTextValidation = (0, _styledComponents.css)(["", ""], props => props.validationType === 'error' ? "\n      border-color: ".concat(props.theme.colors.criticalBorder, ";\n      &:hover {\n        border-color: ").concat(props.theme.colors.critical, ";\n      }\n      &:focus,\n      :focus-within {\n        border-color: ").concat(props.theme.colors.critical, ";\n        box-shadow: 0 0 0 2px ").concat(props.theme.colors.criticalAccent, ";\n      }\n      ") : '');
exports.inputTextValidation = inputTextValidation;
var inputCSS = (0, _styledComponents.css)(["background:", ";border:1px solid ", ";border-radius:", ";color:", ";font-size:", ";"], (_ref2) => {
  var {
    theme: {
      colors
    }
  } = _ref2;
  return colors.field;
}, (_ref3) => {
  var {
    theme: {
      colors
    }
  } = _ref3;
  return colors.ui2;
}, (_ref4) => {
  var {
    theme: {
      radii
    }
  } = _ref4;
  return radii.medium;
}, (_ref5) => {
  var {
    theme: {
      colors
    }
  } = _ref5;
  return colors.text2;
}, (_ref6) => {
  var {
    theme: {
      fontSizes
    }
  } = _ref6;
  return fontSizes.small;
});
exports.inputCSS = inputCSS;
var InputText = (0, _styledComponents.default)(InputTextLayout).withConfig({
  displayName: "InputText",
  componentId: "sc-6cvg1f-1"
})(["", " align-items:center;color:", ";cursor:text;display:inline-flex;justify-content:space-evenly;padding:", ";width:", ";", " ", " ", " ", "{height:100%;max-width:100%;width:100%;span{padding:0 ", ";}}input{", " flex:1;font-size:", ";max-width:100%;padding:0 ", ";}&:hover{", "}&:focus,:focus-within{", "}", " ", ""], _designTokens.reset, (_ref7) => {
  var {
    theme
  } = _ref7;
  return theme.colors.text;
}, (_ref8) => {
  var {
    theme: {
      space
    }
  } = _ref8;
  return "".concat(space.xxxsmall, " ").concat(space.xxsmall);
}, (_ref9) => {
  var {
    autoResize
  } = _ref9;
  return autoResize ? 'auto' : '100%';
}, _designTokens.layout, _designTokens.space, inputCSS, _InlineInputText.InlineInputTextBase, (_ref10) => {
  var {
    theme: {
      space
    }
  } = _ref10;
  return space.xsmall;
}, _innerInputStyle.innerInputStyle, props => props.theme.fontSizes.small, (_ref11) => {
  var {
    theme: {
      space
    }
  } = _ref11;
  return space.xsmall;
}, inputTextHover, inputTextFocus, props => props.disabled ? inputTextDisabled : '', inputTextValidation);
exports.InputText = InputText;
InputText.defaultProps = {
  height: inputHeight,
  type: 'text'
};
//# sourceMappingURL=InputText.js.map