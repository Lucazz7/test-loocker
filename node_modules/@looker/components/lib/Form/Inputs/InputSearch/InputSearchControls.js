"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InputSearchControls = exports.InputSearchControlsInternal = void 0;

var _omit = _interopRequireDefault(require("lodash/omit"));

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _Layout = require("../../../Layout");

var _Button = require("../../../Button");

var _Text = require("../../../Text");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var InputSearchControlsInternal = (0, _react.forwardRef)((_ref, ref) => {
  var {
    onClear,
    showClear,
    summary,
    disabled
  } = _ref,
      props = _objectWithoutProperties(_ref, ["onClear", "showClear", "summary", "disabled"]);

  if (!summary && !showClear) return null;

  var clear = _react.default.createElement(_Button.IconButton, {
    size: "xsmall",
    icon: "Close",
    label: "Clear Field",
    onClick: onClear,
    disabled: disabled
  });

  var separator = _react.default.createElement(_Layout.Box, {
    borderRight: "1px solid",
    borderColor: "ui2",
    height: "1rem",
    style: {
      pointerEvents: 'none'
    }
  });

  return _react.default.createElement(_Layout.Space, _extends({}, (0, _omit.default)(props, 'height'), {
    ref: ref,
    gap: "xsmall",
    flex: "0",
    mr: "xxsmall"
  }), summary && _react.default.createElement(_Text.Text, {
    color: "text5",
    fontSize: "small",
    style: {
      whiteSpace: 'nowrap'
    },
    pr: "xsmall"
  }, summary), summary && showClear && separator, showClear && clear);
});
exports.InputSearchControlsInternal = InputSearchControlsInternal;
InputSearchControlsInternal.displayName = 'InputSearchControlsInternal';
var InputSearchControls = (0, _styledComponents.default)(InputSearchControlsInternal).withConfig({
  displayName: "InputSearchControls",
  componentId: "f2pjxk-0"
})([""]);
exports.InputSearchControls = InputSearchControls;
//# sourceMappingURL=InputSearchControls.js.map