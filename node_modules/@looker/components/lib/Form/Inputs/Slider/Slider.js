"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Slider = void 0;

var _react = _interopRequireWildcard(require("react"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _styledSystem = require("styled-system");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var SliderInternal = (0, _react.forwardRef)((_ref, ref) => {
  var {
    min = 0,
    max = 10,
    value = 0,
    step,
    onChange,
    name,
    id,
    className,
    disabled
  } = _ref,
      restProps = _objectWithoutProperties(_ref, ["min", "max", "value", "step", "onChange", "name", "id", "className", "disabled"]);

  var [isFocused, setIsFocused] = (0, _react.useState)(false);
  var [internalValue, setInternalValue] = (0, _react.useState)(value);

  if (min > max) {
    console.warn("Unable to render <Slider /> because the 'min' prop was set greater than 'max' value. MIN: ".concat(min, ", MAX: ").concat(max));
    return null;
  }

  var boundSliderValue = v => Math.min(Math.max(v, min), max);

  var displayValue = (0, _isFunction.default)(onChange) ? boundSliderValue(value) : boundSliderValue(internalValue);
  var fillPercent = Math.round((displayValue - min) / (max - min) * 100);

  var handleFocus = () => {
    setIsFocused(true);
  };

  var handleUnfocus = () => {
    setIsFocused(false);
  };

  var internalChangeHandler = event => {
    var evtValue = event.target.value;
    setInternalValue(parseInt(evtValue));
  };

  var handleChange = (0, _isFunction.default)(onChange) ? onChange : internalChangeHandler;
  return _react.default.createElement("div", {
    className: className,
    "data-testid": "container"
  }, _react.default.createElement(SliderValueWrapper, null, _react.default.createElement(SliderValue, {
    disabled: disabled,
    isFocused: isFocused,
    offsetPercent: fillPercent
  }, displayValue)), _react.default.createElement(SliderTrack, null, _react.default.createElement(SliderFill, {
    offsetPercent: fillPercent,
    disabled: disabled
  })), _react.default.createElement(SliderInput, {
    disabled: disabled,
    id: id,
    isFocused: isFocused,
    max: max,
    min: min,
    name: name,
    onChange: handleChange,
    step: step,
    offsetPercent: fillPercent,
    value: displayValue,
    "aria-labelledby": restProps['aria-labelledby'],
    "data-testid": "slider-input",
    ref: ref,
    onBlur: handleUnfocus,
    onFocus: handleFocus
  }));
});
var sliderThumbFocusCss = (0, _styledComponents.css)(["border-width:5px;"]);
var sliderThumbCss = (0, _styledComponents.css)(["border-radius:100%;cursor:pointer;left:", ";position:absolute;top:3px;transform:translateX(-50%);transition:transform 0.25s,box-shadow 0.25s;", ""], (_ref2) => {
  var {
    offsetPercent = 0
  } = _ref2;
  return "".concat(offsetPercent, "%");
}, (_ref3) => {
  var {
    theme: {
      colors
    },
    isFocused
  } = _ref3;
  return (0, _styledComponents.css)(["background:", ";border:3px solid ", ";height:16px;width:16px;", ""], colors.field, colors.key, isFocused && sliderThumbFocusCss);
});

var SliderInput = _styledComponents.default.input.attrs({
  type: 'range'
}).withConfig({
  displayName: "Slider__SliderInput",
  componentId: "sc-1q2hgcp-0"
})(["background:transparent;display:block;height:22px;left:8px;margin-left:0;margin-right:0;position:relative;-webkit-appearance:none;width:calc(100% - 16px);&::-webkit-slider-thumb{-webkit-appearance:none;", "}&::-moz-range-thumb{", "}&::-ms-thumb{", "}&::-ms-track{background:transparent;border-color:transparent;color:transparent;cursor:pointer;width:100%;}&::-moz-focus-outer{border:none;}&:focus{outline:none;&::-webkit-slider-thumb{", "}&::-moz-range-thumb{", "}&::-ms-thumb{", "}}&:disabled{&::-webkit-slider-thumb{border-color:", ";cursor:default;}&::-moz-range-thumb{border-color:", ";cursor:default;}&::-ms-thumb{border-color:", ";cursor:default;}}"], sliderThumbCss, sliderThumbCss, sliderThumbCss, sliderThumbFocusCss, sliderThumbFocusCss, sliderThumbFocusCss, (_ref4) => {
  var {
    theme
  } = _ref4;
  return theme.colors.neutral;
}, (_ref5) => {
  var {
    theme
  } = _ref5;
  return theme.colors.neutral;
}, (_ref6) => {
  var {
    theme
  } = _ref6;
  return theme.colors.neutral;
});

var SliderTrack = _styledComponents.default.div.withConfig({
  displayName: "Slider__SliderTrack",
  componentId: "sc-1q2hgcp-1"
})(["background:", ";border-radius:", ";height:4px;left:8px;margin-top:-2px;position:absolute;top:50%;width:calc(100% - 16px);"], (_ref7) => {
  var {
    theme
  } = _ref7;
  return theme.colors.ui2;
}, (_ref8) => {
  var {
    theme
  } = _ref8;
  return theme.radii.small;
});

var SliderFill = _styledComponents.default.div.withConfig({
  displayName: "Slider__SliderFill",
  componentId: "sc-1q2hgcp-2"
})(["background:", ";border-radius:", ";height:100%;width:", "%;"], (_ref9) => {
  var {
    theme: {
      colors
    },
    disabled
  } = _ref9;
  return disabled ? colors.neutral : colors.key;
}, (_ref10) => {
  var {
    theme
  } = _ref10;
  return theme.radii.small;
}, (_ref11) => {
  var {
    offsetPercent
  } = _ref11;
  return offsetPercent;
});

var SliderValue = _styledComponents.default.div.withConfig({
  displayName: "Slider__SliderValue",
  componentId: "sc-1q2hgcp-3"
})(["background:", ";border-radius:1rem;color:", ";left:", "%;padding:0 0.5rem;position:absolute;text-align:center;transform:translateX(-50%) translateY(-0.9rem);user-select:none;"], (_ref12) => {
  var {
    theme,
    isFocused
  } = _ref12;
  return isFocused ? theme.colors.keyAccent : theme.colors.keyText;
}, (_ref13) => {
  var {
    theme: {
      colors
    },
    disabled
  } = _ref13;
  return disabled ? colors.neutral : colors.key;
}, (_ref14) => {
  var {
    offsetPercent
  } = _ref14;
  return offsetPercent;
});

var SliderValueWrapper = _styledComponents.default.div.withConfig({
  displayName: "Slider__SliderValueWrapper",
  componentId: "sc-1q2hgcp-4"
})(["margin:0 auto;position:relative;width:calc(100% - 14px);"]);

var Slider = (0, _styledComponents.default)(SliderInternal).withConfig({
  displayName: "Slider",
  componentId: "sc-1q2hgcp-5"
})(["", " ", " ", " ", " position:relative;"], _designTokens.reset, _designTokens.space, _styledSystem.width, _designTokens.typography);
exports.Slider = Slider;
SliderInternal.displayName = 'Slider';
Slider.defaultProps = {
  fontSize: 'small',
  lineHeight: 'xsmall',
  mt: 'medium',
  width: '100%'
};
//# sourceMappingURL=Slider.js.map