{"version":3,"sources":["../../src/Tree/Tree.tsx"],"names":["indicatorProps","indicatorGap","indicatorIcons","close","open","indicatorPosition","indicatorSize","TreeItemInner","TreeItem","TreeLayout","border","propsBorder","children","detail","detailHoverDisclosure","propsDetailHoverDisclosure","detailAccessory","propsDetailAccessory","icon","label","className","visuallyAsBranch","restProps","disclosureRef","isHovered","treeContext","TreeContext","hasBorder","hasDetailHoverDisclosure","hasDetailAccessory","startingDepth","depth","treeItem","innerAccordion","generateTreeBorder","theme","colors","space","xxsmall","xsmall","small","itemBorderSize","itemPaddingSize","indicatorIconSize","indicatorGapSize","depthSize","borderSpacer","css","ui2","generateIndent","indentCalculation","TreeStyle","styled","div","text2","Accordion","AccordionContent","AccordionDisclosureStyle","hovered","TreeItemLabel","none","TreeGroupLabel","Tree"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2020 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport styled, { css } from 'styled-components'\nimport { Theme, uiTransparencyBlend } from '@looker/design-tokens'\nimport React, { FC, ReactNode, useContext, useRef } from 'react'\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionDisclosure,\n  AccordionDisclosureStyle,\n  AccordionProps,\n  AccordionIndicatorProps,\n} from '../Accordion'\nimport { IconNames } from '../Icon'\nimport { useHovered } from '../utils/useHovered'\nimport { undefinedCoalesce } from '../utils'\nimport { TreeItem, TreeItemLabel } from './TreeItem'\nimport { TreeGroupLabel } from './TreeGroup'\nimport { TreeContext } from './TreeContext'\n\nexport interface TreeProps extends AccordionProps {\n  /**\n   * If true, vertical lines will extend from the Tree indicator (and all sub-Trees' indicators)\n   * @default false\n   */\n  border?: boolean\n  /**\n   * Supplementary element that appears right of the Tree's label\n   * Note: The detail container will stop propagation of events. Place your element(s) in the label\n   *  prop if you'd like clicks on them to bubble.\n   */\n  detail?: ReactNode\n  /**\n   * If true, then the detail elements on Trees and TreeItems will only appear on hover\n   * @default false\n   */\n  detailHoverDisclosure?: boolean\n  /**\n   * If true, the detail elements of child TreeItems will appear outside of the grey background on hover\n   * @default false\n   */\n  detailAccessory?: boolean\n  /**\n   * Icon element that appears between the Tree indicator and the Tree label\n   */\n  icon?: IconNames\n  /**\n   * Text label of the Tree\n   * Note: This is a required prop\n   */\n  label: ReactNode\n  /**\n   * If true, the internal AccordionDisclosure will have fontWeight = 'Normal'\n   * @default false\n   */\n  visuallyAsBranch?: boolean\n}\n\nconst indicatorProps: AccordionIndicatorProps = {\n  indicatorGap: 'xsmall',\n  indicatorIcons: { close: 'ArrowRight', open: 'ArrowDown' },\n  indicatorPosition: 'left',\n  indicatorSize: 'small',\n}\n\nexport const TreeItemInner = styled(TreeItem)``\n\nconst TreeLayout: FC<TreeProps> = ({\n  border: propsBorder,\n  children,\n  detail,\n  detailHoverDisclosure: propsDetailHoverDisclosure,\n  detailAccessory: propsDetailAccessory,\n  icon,\n  label,\n  className,\n  visuallyAsBranch,\n  ...restProps\n}) => {\n  const disclosureRef = useRef<HTMLDivElement>(null)\n  const [isHovered] = useHovered(disclosureRef)\n\n  const treeContext = useContext(TreeContext)\n  const hasBorder = undefinedCoalesce([propsBorder, treeContext.border])\n  const hasDetailHoverDisclosure = undefinedCoalesce([\n    propsDetailHoverDisclosure,\n    treeContext.detailHoverDisclosure,\n  ])\n  const hasDetailAccessory = undefinedCoalesce([\n    propsDetailAccessory,\n    treeContext.detailAccessory,\n  ])\n  const startingDepth = 0\n  const depth = treeContext.depth ? treeContext.depth : startingDepth\n\n  const treeItem = (\n    <TreeItemInner\n      detail={detail}\n      detailAccessory={hasDetailAccessory}\n      detailHoverDisclosure={hasDetailHoverDisclosure}\n      icon={icon}\n    >\n      {label}\n    </TreeItemInner>\n  )\n\n  const innerAccordion = (\n    <Accordion {...indicatorProps} {...restProps}>\n      <AccordionDisclosure\n        ref={disclosureRef}\n        fontWeight={visuallyAsBranch ? 'normal' : 'semiBold'}\n      >\n        {treeItem}\n      </AccordionDisclosure>\n      <AccordionContent>{children}</AccordionContent>\n    </Accordion>\n  )\n\n  return (\n    <TreeContext.Provider\n      value={{\n        border: hasBorder,\n        depth: depth + 1,\n        detailAccessory: hasDetailAccessory,\n        detailHoverDisclosure: hasDetailHoverDisclosure,\n      }}\n    >\n      <TreeStyle\n        className={className}\n        border={hasBorder}\n        depth={depth}\n        hovered={isHovered}\n      >\n        {innerAccordion}\n      </TreeStyle>\n    </TreeContext.Provider>\n  )\n}\n\nconst generateTreeBorder = (depth: number, theme: Theme) => {\n  const {\n    colors,\n    space: { xxsmall, xsmall, small },\n  } = theme\n\n  const itemBorderSize = '1px'\n  const itemPaddingSize = xxsmall\n  const indicatorIconSize = small\n  const indicatorGapSize = xsmall\n  const depthSize = `${itemBorderSize} + ${itemPaddingSize} + (${indicatorIconSize} + ${indicatorGapSize}) * ${depth}`\n  const borderSpacer = `(${small} / 2) + ${depthSize}`\n\n  return css`\n    background: linear-gradient(\n      90deg,\n      transparent calc(${borderSpacer} - 1px),\n      ${colors.ui2},\n      transparent calc(${borderSpacer})\n    );\n  `\n}\n\nconst generateIndent = (depth: number, theme: Theme) => {\n  const {\n    space: { xxsmall, xsmall, small },\n  } = theme\n\n  const itemPaddingSize = xxsmall\n  const indicatorIconSize = small\n  const indicatorGapSize = xsmall\n  const indentCalculation = `${itemPaddingSize} + (${indicatorIconSize} + ${indicatorGapSize}) * ${depth}`\n\n  return css`\n    padding-left: calc(${indentCalculation});\n  `\n}\n\ninterface TreeStyleProps {\n  border?: boolean\n  depth: number\n  hovered: boolean\n}\n\nexport const TreeStyle = styled.div<TreeStyleProps>`\n  color: ${({ theme }) => theme.colors.text2};\n\n  & > ${Accordion} {\n    & > ${AccordionContent} {\n      ${({ border, depth, theme }) =>\n        border && generateTreeBorder(depth, theme)}\n    }\n\n    & > ${AccordionDisclosureStyle} {\n      background-clip: padding-box;\n      background-color: ${({ hovered }) => hovered && uiTransparencyBlend(2)};\n      height: 25px;\n      padding: ${({ theme }) => theme.space.xxsmall};\n      ${({ depth, theme }) => generateIndent(depth, theme)}\n    }\n  }\n\n  ${TreeItemInner} {\n    border-width: 0;\n    height: 100%;\n\n    & > ${TreeItemLabel} {\n      background-color: transparent;\n      padding: ${({ theme }) => theme.space.none};\n    }\n  }\n\n  ${TreeGroupLabel},\n  ${TreeItemLabel},\n  & > ${Accordion} > ${AccordionContent} > ${TreeItem} > ${TreeItemLabel} {\n    ${({ depth, theme }) => generateIndent(depth + 1, theme)}\n  }\n`\n\nexport const Tree = styled(TreeLayout)``\n"],"file":"Tree.js"}