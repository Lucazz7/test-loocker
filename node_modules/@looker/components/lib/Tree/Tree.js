"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tree = exports.TreeStyle = exports.TreeItemInner = void 0;

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _Accordion = require("../Accordion");

var _useHovered = require("../utils/useHovered");

var _utils = require("../utils");

var _TreeItem = require("./TreeItem");

var _TreeGroup = require("./TreeGroup");

var _TreeContext = require("./TreeContext");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var indicatorProps = {
  indicatorGap: 'xsmall',
  indicatorIcons: {
    close: 'ArrowRight',
    open: 'ArrowDown'
  },
  indicatorPosition: 'left',
  indicatorSize: 'small'
};
var TreeItemInner = (0, _styledComponents.default)(_TreeItem.TreeItem).withConfig({
  displayName: "Tree__TreeItemInner",
  componentId: "umxml-0"
})([""]);
exports.TreeItemInner = TreeItemInner;

var TreeLayout = (_ref) => {
  var {
    border: propsBorder,
    children,
    detail,
    detailHoverDisclosure: propsDetailHoverDisclosure,
    detailAccessory: propsDetailAccessory,
    icon,
    label,
    className,
    visuallyAsBranch
  } = _ref,
      restProps = _objectWithoutProperties(_ref, ["border", "children", "detail", "detailHoverDisclosure", "detailAccessory", "icon", "label", "className", "visuallyAsBranch"]);

  var disclosureRef = (0, _react.useRef)(null);
  var [isHovered] = (0, _useHovered.useHovered)(disclosureRef);
  var treeContext = (0, _react.useContext)(_TreeContext.TreeContext);
  var hasBorder = (0, _utils.undefinedCoalesce)([propsBorder, treeContext.border]);
  var hasDetailHoverDisclosure = (0, _utils.undefinedCoalesce)([propsDetailHoverDisclosure, treeContext.detailHoverDisclosure]);
  var hasDetailAccessory = (0, _utils.undefinedCoalesce)([propsDetailAccessory, treeContext.detailAccessory]);
  var startingDepth = 0;
  var depth = treeContext.depth ? treeContext.depth : startingDepth;

  var treeItem = _react.default.createElement(TreeItemInner, {
    detail: detail,
    detailAccessory: hasDetailAccessory,
    detailHoverDisclosure: hasDetailHoverDisclosure,
    icon: icon
  }, label);

  var innerAccordion = _react.default.createElement(_Accordion.Accordion, _extends({}, indicatorProps, restProps), _react.default.createElement(_Accordion.AccordionDisclosure, {
    ref: disclosureRef,
    fontWeight: visuallyAsBranch ? 'normal' : 'semiBold'
  }, treeItem), _react.default.createElement(_Accordion.AccordionContent, null, children));

  return _react.default.createElement(_TreeContext.TreeContext.Provider, {
    value: {
      border: hasBorder,
      depth: depth + 1,
      detailAccessory: hasDetailAccessory,
      detailHoverDisclosure: hasDetailHoverDisclosure
    }
  }, _react.default.createElement(TreeStyle, {
    className: className,
    border: hasBorder,
    depth: depth,
    hovered: isHovered
  }, innerAccordion));
};

var generateTreeBorder = (depth, theme) => {
  var {
    colors,
    space: {
      xxsmall,
      xsmall,
      small
    }
  } = theme;
  var itemBorderSize = '1px';
  var itemPaddingSize = xxsmall;
  var indicatorIconSize = small;
  var indicatorGapSize = xsmall;
  var depthSize = "".concat(itemBorderSize, " + ").concat(itemPaddingSize, " + (").concat(indicatorIconSize, " + ").concat(indicatorGapSize, ") * ").concat(depth);
  var borderSpacer = "(".concat(small, " / 2) + ").concat(depthSize);
  return (0, _styledComponents.css)(["background:linear-gradient( 90deg,transparent calc(", " - 1px),", ",transparent calc(", ") );"], borderSpacer, colors.ui2, borderSpacer);
};

var generateIndent = (depth, theme) => {
  var {
    space: {
      xxsmall,
      xsmall,
      small
    }
  } = theme;
  var itemPaddingSize = xxsmall;
  var indicatorIconSize = small;
  var indicatorGapSize = xsmall;
  var indentCalculation = "".concat(itemPaddingSize, " + (").concat(indicatorIconSize, " + ").concat(indicatorGapSize, ") * ").concat(depth);
  return (0, _styledComponents.css)(["padding-left:calc(", ");"], indentCalculation);
};

var TreeStyle = _styledComponents.default.div.withConfig({
  displayName: "Tree__TreeStyle",
  componentId: "umxml-1"
})(["color:", ";& > ", "{& > ", "{", "}& > ", "{background-clip:padding-box;background-color:", ";height:25px;padding:", ";", "}}", "{border-width:0;height:100%;& > ", "{background-color:transparent;padding:", ";}}", ",", ",& > ", " > ", " > ", " > ", "{", "}"], (_ref2) => {
  var {
    theme
  } = _ref2;
  return theme.colors.text2;
}, _Accordion.Accordion, _Accordion.AccordionContent, (_ref3) => {
  var {
    border,
    depth,
    theme
  } = _ref3;
  return border && generateTreeBorder(depth, theme);
}, _Accordion.AccordionDisclosureStyle, (_ref4) => {
  var {
    hovered
  } = _ref4;
  return hovered && (0, _designTokens.uiTransparencyBlend)(2);
}, (_ref5) => {
  var {
    theme
  } = _ref5;
  return theme.space.xxsmall;
}, (_ref6) => {
  var {
    depth,
    theme
  } = _ref6;
  return generateIndent(depth, theme);
}, TreeItemInner, _TreeItem.TreeItemLabel, (_ref7) => {
  var {
    theme
  } = _ref7;
  return theme.space.none;
}, _TreeGroup.TreeGroupLabel, _TreeItem.TreeItemLabel, _Accordion.Accordion, _Accordion.AccordionContent, _TreeItem.TreeItem, _TreeItem.TreeItemLabel, (_ref8) => {
  var {
    depth,
    theme
  } = _ref8;
  return generateIndent(depth + 1, theme);
});

exports.TreeStyle = TreeStyle;
var Tree = (0, _styledComponents.default)(TreeLayout).withConfig({
  displayName: "Tree",
  componentId: "umxml-2"
})([""]);
exports.Tree = Tree;
//# sourceMappingURL=Tree.js.map