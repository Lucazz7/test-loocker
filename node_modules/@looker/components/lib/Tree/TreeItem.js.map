{"version":3,"sources":["../../src/Tree/TreeItem.tsx"],"names":["TreeItemLayout","children","className","gapSize","selected","props","treeContext","TreeContext","itemRef","detailRef","isHovered","isFocusVisible","setFocusVisible","onBlur","onClick","onKeyDown","onKeyUp","restProps","detailAccessory","detailHoverDisclosure","handleClick","event","current","contains","target","stopPropagation","handleKeyUp","keyCode","currentTarget","handleKeyDown","handleBlur","defaultIconSize","detail","visible","icon","PrimaryIcon","Icon","TreeItemSpace","Space","focusVisible","theme","colors","keyFocus","TreeItemLabel","hovered","fontSizes","xsmall","space","xxsmall","TreeItemDetail","styled","div","TreeItem","color"],"mappings":"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","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2020 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React, {\n  FC,\n  FocusEvent,\n  KeyboardEvent,\n  MouseEvent,\n  ReactNode,\n  useContext,\n  useRef,\n  useState,\n} from 'react'\nimport styled from 'styled-components'\nimport {\n  color,\n  CompatibleHTMLProps,\n  SpacingSizes,\n  TextColorProps,\n  uiTransparencyBlend,\n} from '@looker/design-tokens'\nimport Omit from 'lodash/omit'\nimport { Space, FlexItem } from '../Layout'\nimport { Icon, IconNames } from '../Icon'\nimport { useHovered } from '../utils/useHovered'\nimport {\n  HoverDisclosureContext,\n  HoverDisclosure,\n} from '../utils/HoverDisclosure'\nimport { undefinedCoalesce } from '../utils'\nimport { TreeContext } from './TreeContext'\n\nexport interface TreeItemProps\n  extends Omit<CompatibleHTMLProps<HTMLDivElement>, 'color'>,\n    TextColorProps {\n  className?: string\n  /**\n   * Supplementary element that appears right of the TreeItem's label\n   * Note: The detail container will stop propagation of events. Place your element(s) in the label\n   *  prop if you'd like events on them to bubble.\n   */\n  detail?: ReactNode\n  /**\n   * If true, the detail elements will appear outside of the TreeItem's grey background on hover\n   * In addition, if true, events will not propagate from the detail container\n   * @default false\n   */\n  detailAccessory?: boolean\n  /**\n   * If true, then the detail element this TreeItem will only appear on hover\n   * @default false\n   */\n  detailHoverDisclosure?: boolean\n  /**\n   * Gap size of the internal Space component\n   * @default 'xsmall'\n   */\n  gapSize?: SpacingSizes\n  /**\n   * Icon element that appears left of the TreeItem children\n   */\n  icon?: IconNames\n  /**\n   * onClick callback\n   */\n  onClick?: () => void\n  /**\n   * Determines if this TreeItem is in a selected state or not\n   */\n  selected?: boolean\n}\n\nconst TreeItemLayout: FC<TreeItemProps> = ({\n  children,\n  className,\n  gapSize = 'xsmall',\n  selected,\n  ...props\n}) => {\n  const treeContext = useContext(TreeContext)\n  const itemRef = useRef<HTMLDivElement>(null)\n  const detailRef = useRef<HTMLDivElement>(null)\n  const [isHovered] = useHovered(itemRef)\n  const [isFocusVisible, setFocusVisible] = useState(false)\n\n  const { onBlur, onClick, onKeyDown, onKeyUp, ...restProps } = Omit(props, [\n    'color',\n    'detail',\n    'detailAccessory',\n    'detailHoverDisclosure',\n    'icon',\n  ])\n\n  const detailAccessory = undefinedCoalesce([\n    props.detailAccessory,\n    treeContext.detailAccessory,\n  ])\n\n  const detailHoverDisclosure = undefinedCoalesce([\n    props.detailHoverDisclosure,\n    treeContext.detailHoverDisclosure,\n  ])\n\n  const handleClick = (event: MouseEvent<HTMLDivElement>) => {\n    if (\n      detailRef.current &&\n      detailRef.current.contains(event.target as Node) &&\n      detailAccessory\n    ) {\n      event.stopPropagation()\n      return\n    }\n\n    setFocusVisible(false)\n    onClick && onClick()\n  }\n\n  const handleKeyUp = (event: KeyboardEvent<HTMLDivElement>) => {\n    if (event.keyCode === 9 && event.currentTarget === event.target)\n      setFocusVisible(true)\n\n    onKeyUp && onKeyUp(event)\n  }\n\n  const handleKeyDown = (event: KeyboardEvent<HTMLDivElement>) => {\n    if (\n      detailRef.current &&\n      detailRef.current.contains(event.target as Node) &&\n      detailAccessory\n    ) {\n      event.stopPropagation()\n      return\n    }\n\n    if (event.keyCode === 13 && event.target === event.currentTarget) {\n      onClick && onClick()\n    }\n\n    onKeyDown && onKeyDown(event)\n  }\n\n  const handleBlur = (event: FocusEvent<HTMLDivElement>) => {\n    setFocusVisible(false)\n    onBlur && onBlur(event)\n  }\n\n  const defaultIconSize = 12\n\n  const detail = (\n    <HoverDisclosure visible={!detailHoverDisclosure}>\n      <TreeItemDetail detailAccessory={detailAccessory} ref={detailRef}>\n        {props.detail}\n      </TreeItemDetail>\n    </HoverDisclosure>\n  )\n\n  return (\n    <HoverDisclosureContext.Provider value={{ visible: isHovered }}>\n      <TreeItemSpace\n        className={className}\n        focusVisible={isFocusVisible}\n        gap=\"none\"\n        onBlur={handleBlur}\n        onClick={handleClick}\n        onKeyDown={handleKeyDown}\n        onKeyUp={handleKeyUp}\n        ref={itemRef}\n        tabIndex={onClick ? 0 : -1}\n        {...restProps}\n      >\n        <TreeItemLabel gap={gapSize} hovered={isHovered} selected={selected}>\n          {props.icon && (\n            <PrimaryIcon name={props.icon} size={defaultIconSize} />\n          )}\n          <FlexItem flex=\"1\">{children}</FlexItem>\n          {!detailAccessory && detail}\n        </TreeItemLabel>\n        {detailAccessory && detail}\n      </TreeItemSpace>\n    </HoverDisclosureContext.Provider>\n  )\n}\n\nconst PrimaryIcon = styled(Icon)`\n  opacity: 0.5;\n`\n\ninterface TreeItemSpaceProps {\n  focusVisible: boolean\n}\n\nexport const TreeItemSpace = styled(Space)<TreeItemSpaceProps>`\n  align-items: center;\n  border: 1px solid transparent;\n  border-color: ${({ focusVisible, theme }) =>\n    focusVisible && theme.colors.keyFocus};\n  cursor: pointer;\n  height: 25px;\n  outline: none;\n`\n\ninterface TreeItemLabelProps {\n  hovered: boolean\n  selected?: boolean\n}\n\nexport const TreeItemLabel = styled(Space)<TreeItemLabelProps>`\n  background-color: ${({ hovered, selected }) =>\n    selected ? uiTransparencyBlend(1) : hovered && uiTransparencyBlend(2)};\n  flex: 1;\n  font-size: ${({ theme: { fontSizes } }) => fontSizes.xsmall};\n  height: 100%;\n  outline: none;\n  padding: ${({ theme: { space } }) => space.xxsmall};\n`\n\nconst TreeItemDetail = styled.div<{ detailAccessory: boolean }>`\n  align-items: center;\n  display: flex;\n  height: 100%;\n  padding-right: ${({ detailAccessory, theme }) =>\n    detailAccessory && theme.space.xxsmall};\n`\n\nexport const TreeItem = styled(TreeItemLayout)`\n  /*\n    Note: first-child pseudo-selector is here to give this selector\n    more specificity over TreeGroup.\n  */\n  ${TreeItemLabel}:first-child {\n    ${color}\n  }\n`\n"],"file":"TreeItem.js"}