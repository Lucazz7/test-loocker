"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReplaceText = void 0;

var _react = _interopRequireWildcard(require("react"));

var _isRegExp = _interopRequireDefault(require("lodash/isRegExp"));

var _escapeRegExp = _interopRequireDefault(require("lodash/escapeRegExp"));

var _isString = _interopRequireDefault(require("lodash/isString"));

var _flatten = _interopRequireDefault(require("lodash/flatten"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function replaceString(str, match, replace) {
  var curCharStart = 0;
  var curCharLen = 0;
  var re = match;

  if (!(0, _isRegExp.default)(re)) {
    re = new RegExp('(' + (0, _escapeRegExp.default)(re) + ')', 'gi');
  }

  var stringArr = str.split(re);
  return stringArr.map((stringItem, i) => {
    if (i % 2 === 1) {
      curCharLen = stringItem.length;
      curCharStart += stringArr[i - 1].length;
      curCharStart += curCharLen;
      return replace(stringItem, i, curCharStart);
    }

    return stringItem;
  });
}

var ReplaceText = (_ref) => {
  var {
    children,
    match,
    replace
  } = _ref;
  return _react.default.createElement(_react.default.Fragment, null, (0, _flatten.default)(_react.Children.map(children, child => {
    return (0, _isString.default)(child) ? replaceString(child, match, replace) : child;
  })));
};

exports.ReplaceText = ReplaceText;
//# sourceMappingURL=ReplaceText.js.map