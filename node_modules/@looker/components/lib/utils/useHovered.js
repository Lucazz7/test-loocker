"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useHovered = useHovered;

var _react = require("react");

var _getCurrentNode = require("./getCurrentNode");

var _useCallbackRef = require("./useCallbackRef");

function useHovered(hoverElement) {
  var [newElement, callbackRef] = (0, _useCallbackRef.useCallbackRef)();
  var element = typeof hoverElement === 'undefined' ? newElement : hoverElement;
  var [isHovered, setIsHovered] = (0, _react.useState)(hoverElement === undefined);
  (0, _react.useEffect)(() => {
    function handleMouseEnter() {
      setIsHovered(true);
    }

    function handleMouseLeave() {
      window.requestAnimationFrame(() => {
        var node = (0, _getCurrentNode.getCurrentNode)(element);
        var relationship = node.compareDocumentPosition(document.activeElement);
        var activeElementIsChildOfNode = relationship === Node.DOCUMENT_POSITION_FOLLOWING + Node.DOCUMENT_POSITION_CONTAINED_BY;
        if (!activeElementIsChildOfNode) setIsHovered(false);
      });
    }

    var node = (0, _getCurrentNode.getCurrentNode)(element);

    if (node) {
      node.addEventListener('mouseleave', handleMouseLeave);
      node.addEventListener('mouseenter', handleMouseEnter);
      node.addEventListener('focusout', handleMouseLeave);
      node.addEventListener('focusin', handleMouseEnter);
    }

    return () => {
      if (node) {
        node.removeEventListener('mouseleave', handleMouseLeave);
        node.removeEventListener('mouseenter', handleMouseEnter);
        node.removeEventListener('focusout', handleMouseLeave);
        node.removeEventListener('focusin', handleMouseEnter);
      }
    };
  }, [element]);
  return [isHovered, callbackRef];
}
//# sourceMappingURL=useHovered.js.map