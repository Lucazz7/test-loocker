"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useScrollLock = useScrollLock;

var _once = _interopRequireDefault(require("lodash/once"));

var _react = require("react");

var _DialogContext = require("../Dialog/DialogContext");

var _useToggle = require("./useToggle");

var _useCallbackRef = require("./useCallbackRef");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function setBodyOverflowHidden() {
  if (typeof document !== 'undefined') {
    document.body.style.overflow = 'hidden';
  }
}

function useScrollLock() {
  var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var useCapture = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var allowScrollWithin = arguments.length > 2 ? arguments[2] : undefined;
  var [newElement, callbackRef] = (0, _useCallbackRef.useCallbackRef)();
  var element = typeof allowScrollWithin === 'undefined' ? newElement : allowScrollWithin;
  var {
    disableScrollLock,
    enableScrollLock
  } = (0, _react.useContext)(_DialogContext.DialogContext);
  var {
    value,
    setOn,
    setOff
  } = (0, _useToggle.useToggle)(enabled);
  var bodyOverflowRef = (0, _react.useRef)(typeof document !== 'undefined' ? document.body.style.overflow : '');
  (0, _react.useEffect)(() => {
    if (typeof document === 'undefined' || typeof window === 'undefined') return;
    var scrollTop = window.scrollY;
    var scrollTarget = document;
    var bodyOverflowCurrent = bodyOverflowRef.current;
    var setBodyOverflowOnce = (0, _once.default)(setBodyOverflowHidden);

    function stopScroll(e) {
      setBodyOverflowOnce();

      if (e.target !== null && e.target !== scrollTarget) {
        scrollTarget = e.target;
        scrollTop = scrollTarget instanceof Element ? scrollTarget.scrollTop : window.scrollY;
      }

      if (scrollTarget instanceof Element && !(element && element.contains(scrollTarget))) {
        scrollTarget.scrollTop = scrollTop;
      } else if (scrollTarget === document) {
        window.scrollTo({
          top: scrollTop
        });
      }
    }

    if (element && value) {
      window.addEventListener('scroll', stopScroll, true);
      disableScrollLock && disableScrollLock();
      setBodyOverflowHidden();
    } else {
      window.removeEventListener('scroll', stopScroll, true);
      enableScrollLock && enableScrollLock();
      document.body.style.overflow = bodyOverflowCurrent;
    }

    return () => {
      window.removeEventListener('scroll', stopScroll, true);
      document.body.style.overflow = bodyOverflowCurrent;
    };
  }, [value, element, useCapture, disableScrollLock, enableScrollLock]);
  return {
    callbackRef,
    disable: setOff,
    element: element || null,
    enable: setOn,
    isEnabled: value
  };
}
//# sourceMappingURL=useScrollLock.js.map