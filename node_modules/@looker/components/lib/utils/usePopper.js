"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePopper = usePopper;

var _cloneDeep = _interopRequireDefault(require("lodash/cloneDeep"));

var _concat = _interopRequireDefault(require("lodash/concat"));

var _merge = _interopRequireDefault(require("lodash/merge"));

var _react = require("react");

var _core = require("@popperjs/core");

var _getCurrentNode = require("./getCurrentNode");

var _useCallbackRef = require("./useCallbackRef");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function usePopper(_ref) {
  var {
    anchor,
    target,
    arrow = true,
    options
  } = _ref;
  var [styles, setStyles] = (0, _react.useState)({
    arrow: {
      position: 'absolute'
    },
    popper: {
      left: '0',
      margin: '0',
      position: 'fixed',
      top: '0'
    }
  });
  var [truePlacement, setTruePlacement] = (0, _react.useState)(options.placement);
  var popperInstanceRef = (0, _react.useRef)();
  var [targetElement, targetRef] = (0, _useCallbackRef.useCallbackRef)();
  var [arrowElement, arrowRef] = (0, _useCallbackRef.useCallbackRef)();
  var mergedOptions = (0, _react.useMemo)(() => (0, _merge.default)(options, {
    modifiers: (0, _concat.default)(options && options.modifiers, [...(arrow ? [{
      name: 'arrow',
      options: {
        element: arrowElement,
        padding: 5
      }
    }] : []), {
      enabled: false,
      name: 'applyStyles'
    }, {
      enabled: true,
      fn: (_ref2) => {
        var {
          state: {
            placement
          }
        } = _ref2;
        return setTruePlacement(placement);
      },
      name: 'update-placement',
      phase: 'afterWrite'
    }, {
      enabled: true,
      fn: (_ref3) => {
        var {
          state: {
            styles
          }
        } = _ref3;
        return setStyles((0, _cloneDeep.default)(styles));
      },
      name: 'update-styles',
      phase: 'afterWrite'
    }, {
      enabled: true,
      name: 'preventOverflow',
      options: {
        boundary: 'viewport',
        padding: 8
      }
    }]),
    strategy: 'fixed'
  }), [arrow, arrowElement, options]);
  (0, _react.useEffect)(() => {
    var anchorNode = (0, _getCurrentNode.getCurrentNode)(anchor);
    var targetNode = target ? (0, _getCurrentNode.getCurrentNode)(target) : targetElement;

    if (anchorNode && targetNode) {
      popperInstanceRef.current = (0, _core.createPopper)(anchorNode, targetNode, mergedOptions);
    }

    return () => {
      popperInstanceRef.current && popperInstanceRef.current.destroy();
    };
  }, [anchor, target, targetElement, arrow, arrowElement, mergedOptions]);
  return {
    arrowProps: {
      ref: arrowRef,
      style: styles.arrow
    },
    placement: truePlacement,
    popperInstanceRef,
    style: styles.popper,
    targetRef
  };
}
//# sourceMappingURL=usePopper.js.map