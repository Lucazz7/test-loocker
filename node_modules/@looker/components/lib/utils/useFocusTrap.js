"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFocusTrap = useFocusTrap;

var _focusTrap = _interopRequireDefault(require("focus-trap"));

var _react = require("react");

var _DialogContext = require("../Dialog/DialogContext");

var _useToggle = require("./useToggle");

var _useCallbackRef = require("./useCallbackRef");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function checkFocusLost() {
  return document.activeElement ? document.activeElement.tagName === 'BODY' : true;
}

function useFocusTrap() {
  var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
  var keepFocusWithin = arguments.length > 1 ? arguments[1] : undefined;
  var trapRef = (0, _react.useRef)();
  var [newElement, callbackRef] = (0, _useCallbackRef.useCallbackRef)();
  var element = typeof keepFocusWithin === 'undefined' ? newElement : keepFocusWithin;
  var {
    disableFocusTrap,
    enableFocusTrap
  } = (0, _react.useContext)(_DialogContext.DialogContext);
  var {
    value,
    setOn,
    setOff
  } = (0, _useToggle.useToggle)(enabled);
  (0, _react.useEffect)(() => {
    function removeTrap() {
      trapRef.current && trapRef.current.deactivate({
        returnFocus: checkFocusLost()
      });
      trapRef.current = undefined;
      enableFocusTrap && enableFocusTrap();
    }

    if (element && value) {
      var autoFocusElement = element.querySelector('[data-autofocus="true"]');

      if (trapRef.current) {
        trapRef.current.unpause();
      } else {
        trapRef.current = (0, _focusTrap.default)(element, _objectSpread({
          clickOutsideDeactivates: true,
          escapeDeactivates: false,
          fallbackFocus: element,
          onDeactivate: () => setOff()
        }, autoFocusElement ? {
          initialFocus: autoFocusElement
        } : {}));
      }

      disableFocusTrap && disableFocusTrap();
      window.setTimeout(() => trapRef.current && trapRef.current.activate(), 0);
    } else {
      if (element) {
        trapRef.current && trapRef.current.pause();
      } else {
        removeTrap();
      }
    }

    return () => {
      if (!element || document.body.compareDocumentPosition(element) !== 20) {
        removeTrap();
      }
    };
  }, [value, element, disableFocusTrap, enableFocusTrap, setOff]);
  return {
    callbackRef,
    disable: setOff,
    element: element || null,
    enable: setOn,
    isEnabled: value,
    trapRef
  };
}
//# sourceMappingURL=useFocusTrap.js.map