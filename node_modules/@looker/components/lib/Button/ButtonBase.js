"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonBase = exports.buttonCSS = void 0;

var _designTokens = require("@looker/design-tokens");

var _polished = require("polished");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _styledSystem = require("styled-system");

var _size = require("./size");

var _icon = require("./icon");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var buttonCSS = (0, _styledComponents.css)(["", " ", " ", " ", " ", " align-items:center;border-radius:", ";cursor:pointer;display:inline-flex;font-weight:600;justify-content:center;line-height:1;outline:none;transition:border 80ms;vertical-align:middle;white-space:nowrap;&[disabled]{cursor:default;filter:grayscale(0.3);opacity:0.25;}", " ", ""], _designTokens.reset, _styledSystem.maxWidth, _styledSystem.minWidth, _styledSystem.width, props => props.focusVisible && "\n    box-shadow: 0 0 0 0.15rem\n      ".concat((0, _polished.rgba)(props.theme.colors[props.color || 'key'], 0.25), ";\n  "), (_ref) => {
  var {
    theme
  } = _ref;
  return theme.radii.medium;
}, _size.buttonSize, _designTokens.space);
exports.buttonCSS = buttonCSS;

var ButtonOuter = _styledComponents.default.button.withConfig({
  displayName: "ButtonBase__ButtonOuter",
  componentId: "sc-1bpio6j-0"
})(["", " ", ""], buttonCSS, props => props.fullWidth && "width: 100%;");

var ButtonJSX = (0, _react.forwardRef)((props, ref) => {
  var {
    children,
    iconBefore,
    iconAfter,
    onBlur,
    onKeyUp
  } = props,
      restProps = _objectWithoutProperties(props, ["children", "iconBefore", "iconAfter", "onBlur", "onKeyUp"]);

  var [isFocusVisible, setFocusVisible] = (0, _react.useState)(false);

  var handleOnKeyUp = event => {
    setFocusVisible(true);
    onKeyUp && onKeyUp(event);
  };

  var handleOnBlur = event => {
    setFocusVisible(false);
    onBlur && onBlur(event);
  };

  return _react.default.createElement(ButtonOuter, _extends({}, restProps, {
    focusVisible: isFocusVisible,
    onKeyUp: handleOnKeyUp,
    onBlur: handleOnBlur,
    ref: ref
  }), iconBefore && _react.default.createElement(_icon.ButtonIcon, {
    name: iconBefore
  }), children, iconAfter && _react.default.createElement(_icon.ButtonIcon, {
    name: iconAfter
  }));
});
ButtonJSX.displayName = 'ButtonJSX';
var ButtonBase = (0, _styledComponents.default)(ButtonJSX).withConfig({
  displayName: "ButtonBase",
  componentId: "sc-1bpio6j-1"
})(["", ""], _icon.buttonIcon);
exports.ButtonBase = ButtonBase;
ButtonBase.defaultProps = {
  size: 'medium'
};
//# sourceMappingURL=ButtonBase.js.map