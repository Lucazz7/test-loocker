"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonSet = exports.ButtonSetLayout = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _simple = require("../Layout/utils/simple");

var _utils = require("../utils");

var _ButtonSetContext = require("./ButtonSetContext");

var _ButtonItem = require("./ButtonItem");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var ButtonSetLayout = (0, _react.forwardRef)((_ref, forwardedRef) => {
  var {
    children,
    className,
    disabled,
    onItemClick,
    options,
    value
  } = _ref,
      props = _objectWithoutProperties(_ref, ["children", "className", "disabled", "onItemClick", "options", "value"]);

  if (children && options) {
    console.warn('Use children or options but not both at the same time.');
  }

  var context = {
    disabled,
    onItemClick,
    value
  };
  var [isWrapping, setIsWrapping] = (0, _react.useState)(false);
  var measureRef = (0, _react.useCallback)(node => {
    if (node) {
      var {
        height
      } = node.getBoundingClientRect();
      var firstItem = node.childNodes[0];
      var rowHeight = firstItem ? firstItem.getBoundingClientRect().height : _ButtonItem.buttonItemHeight;

      if (height >= rowHeight * 2) {
        setIsWrapping(true);
      } else {
        setIsWrapping(false);
      }
    }
  }, [options]);
  var ref = (0, _utils.useForkedRef)(measureRef, forwardedRef);
  var optionItems = options && options.map((_ref2) => {
    var {
      disabled,
      label,
      value
    } = _ref2;
    return _react.default.createElement(_ButtonItem.ButtonItem, {
      key: value,
      disabled: disabled,
      value: value
    }, label || value);
  });
  return _react.default.createElement(_ButtonSetContext.ButtonSetContext.Provider, {
    value: context
  }, _react.default.createElement("div", _extends({
    role: "group",
    className: "".concat(isWrapping ? 'wrapping ' : '').concat(className),
    ref: ref
  }, props), children || optionItems));
});
exports.ButtonSetLayout = ButtonSetLayout;
ButtonSetLayout.displayName = 'ButtonSetLayout';
var ButtonSet = (0, _styledComponents.default)(ButtonSetLayout).withConfig({
  displayName: "ButtonSet",
  componentId: "b1ia7f-0"
})(["", " align-items:center;display:inline-flex;flex-wrap:wrap;font-size:", ";text-align:center;"], _simple.simpleLayoutCSS, (_ref3) => {
  var {
    theme
  } = _ref3;
  return theme.fontSizes.small;
});
exports.ButtonSet = ButtonSet;
//# sourceMappingURL=ButtonSet.js.map