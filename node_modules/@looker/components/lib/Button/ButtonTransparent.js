"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ButtonTransparent = void 0;

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _styledSystem = require("styled-system");

var _ButtonBase = require("./ButtonBase");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var transparentButtonPadding = (0, _styledSystem.variant)({
  prop: 'size',
  variants: {
    xxsmall: {
      px: 'xsmall'
    },
    xsmall: {
      px: 'xsmall'
    },
    small: {
      px: 'small'
    },
    medium: {
      px: 'large'
    },
    large: {
      px: 'large'
    }
  }
});
var ButtonTransparent = (0, _styledComponents.default)(_ButtonBase.ButtonBase).withConfig({
  displayName: "ButtonTransparent",
  componentId: "sc-799h13-0"
})(["background:transparent;border:1px solid transparent;color:", ";", " &:hover,&:focus,&.hover{background:", ";border-color:", ";color:", ";}&:active,&.active{background:", ";border-color:", ";color:", ";}&[disabled]{&:hover,&:active,&:focus{background-color:transparent;border-color:transparent;color:", ";}}"], (_ref) => {
  var {
    theme,
    color = 'key'
  } = _ref;
  return theme.colors[color];
}, props => props.iconBefore || props.iconAfter ? transparentButtonPadding : "padding: 0 ".concat(props.theme.space.xsmall, ";"), (_ref2) => {
  var {
    theme,
    color = 'key'
  } = _ref2;
  return theme.colors["".concat(color, "Subtle")];
}, (_ref3) => {
  var {
    theme,
    color = 'key'
  } = _ref3;
  return theme.colors["".concat(color, "Subtle")];
}, (_ref4) => {
  var {
    theme,
    color = 'key'
  } = _ref4;
  return theme.colors["".concat(color, "Border")];
}, (_ref5) => {
  var {
    theme,
    color = 'key'
  } = _ref5;
  return theme.colors["".concat(color, "Accent")];
}, (_ref6) => {
  var {
    theme,
    color = 'key'
  } = _ref6;
  return theme.colors["".concat(color, "Accent")];
}, (_ref7) => {
  var {
    theme,
    color = 'key'
  } = _ref7;
  return theme.colors["".concat(color, "Border")];
}, (_ref8) => {
  var {
    theme,
    color = 'key'
  } = _ref8;
  return theme.colors[color];
});
exports.ButtonTransparent = ButtonTransparent;
//# sourceMappingURL=ButtonTransparent.js.map