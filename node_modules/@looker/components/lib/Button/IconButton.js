"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IconButton = exports.IconButtonStyle = void 0;

var _some = _interopRequireDefault(require("lodash/some"));

var _isFunction = _interopRequireDefault(require("lodash/isFunction"));

var _styledComponents = _interopRequireWildcard(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _Icon = require("../Icon");

var _Tooltip = require("../Tooltip");

var _utils = require("../utils");

var _VisuallyHidden = require("../VisuallyHidden");

var _ButtonBase = require("./ButtonBase");

var _size = require("./size");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var iconButtonDefaultColor = 'neutral';

var IconButtonStyle = _styledComponents.default.button.withConfig({
  displayName: "IconButton__IconButtonStyle",
  componentId: "n9jti8-0"
})(["", " height:auto;"], _ButtonBase.buttonCSS);

exports.IconButtonStyle = IconButtonStyle;
var IconButtonComponent = (0, _react.forwardRef)((props, forwardRef) => {
  var {
    icon,
    id,
    size = 'xsmall',
    label,
    color,
    tooltipDisabled,
    tooltipPlacement,
    tooltipTextAlign,
    onFocus: propsOnFocus,
    onBlur: propsOnBlur,
    onMouseOver: propsOnMouseOver,
    onMouseOut: propsOnMouseOut
  } = props,
      rest = _objectWithoutProperties(props, ["icon", "id", "size", "label", "color", "tooltipDisabled", "tooltipPlacement", "tooltipTextAlign", "onFocus", "onBlur", "onMouseOver", "onMouseOut"]);

  var hasOuterTooltip = (0, _some.default)([propsOnFocus, propsOnBlur, propsOnMouseOver, propsOnMouseOut], _isFunction.default);
  var {
    'aria-describedby': ariaDescribedBy,
    ref,
    tooltip,
    onFocus,
    onBlur,
    onMouseOver,
    onMouseOut
  } = (0, _Tooltip.useTooltip)({
    content: label,
    disabled: tooltipDisabled || hasOuterTooltip,
    id: id ? "".concat(id, "-tooltip") : undefined,
    placement: tooltipPlacement,
    textAlign: tooltipTextAlign
  });
  var eventHandlers = {
    onBlur: (0, _utils.useWrapEvent)(onBlur, propsOnBlur),
    onFocus: (0, _utils.useWrapEvent)(onFocus, propsOnFocus),
    onMouseOut: (0, _utils.useWrapEvent)(onMouseOut, propsOnMouseOut),
    onMouseOver: (0, _utils.useWrapEvent)(onMouseOver, propsOnMouseOver)
  };
  var actualRef = (0, _utils.useForkedRef)(forwardRef, ref);
  return _react.default.createElement(_ButtonBase.ButtonBase, _extends({
    "aria-describedby": ariaDescribedBy,
    ref: actualRef,
    color: color,
    p: "none",
    size: size,
    width: _size.buttonSizeMap[size]
  }, eventHandlers, rest), _react.default.createElement(_VisuallyHidden.VisuallyHidden, null, label), _react.default.createElement(_Icon.Icon, {
    name: icon,
    size: _size.buttonSizeMap[size] - 6,
    "aria-hidden": true
  }), tooltip);
});
IconButtonComponent.displayName = 'IconButtonComponent';

var outlineCSS = props => {
  var {
    shape,
    color = iconButtonDefaultColor
  } = props;
  return (0, _styledComponents.css)(["border:1px solid ", ";", " &:hover,&:focus,&.hover{border-color:", ";}&:active,&.active{border-color:", ";}&[disabled]{&:hover,&:active,&:focus{border-color:", ";}}"], (_ref) => {
    var {
      theme: {
        colors
      }
    } = _ref;
    return colors.ui3;
  }, shape === 'round' && 'border-radius: 100%;', (_ref2) => {
    var {
      theme: {
        colors
      }
    } = _ref2;
    return colors[color];
  }, (_ref3) => {
    var {
      theme: {
        colors
      }
    } = _ref3;
    return colors["".concat(color, "Interactive")];
  }, (_ref4) => {
    var {
      theme: {
        colors
      }
    } = _ref4;
    return colors.ui3;
  });
};

var IconButton = (0, _styledComponents.default)(IconButtonComponent).withConfig({
  displayName: "IconButton",
  componentId: "n9jti8-1"
})(["", " ", " background:none;border:none;color:", ";padding:0;&:hover,&:focus,&.hover{color:", ";}&:active,&.active{color:", ";}", " svg{pointer-events:none;}"], _designTokens.reset, _designTokens.space, (_ref5) => {
  var {
    theme,
    color = iconButtonDefaultColor
  } = _ref5;
  return theme.colors[color];
}, (_ref6) => {
  var {
    theme,
    color = iconButtonDefaultColor
  } = _ref6;
  return theme.colors["".concat(color, "Interactive")];
}, (_ref7) => {
  var {
    theme,
    color = iconButtonDefaultColor
  } = _ref7;
  return theme.colors["".concat(color, "Pressed")];
}, props => props.outline && outlineCSS);
exports.IconButton = IconButton;
IconButton.defaultProps = {
  type: 'button'
};
//# sourceMappingURL=IconButton.js.map