{"version":3,"sources":["../../src/Dialog/Dialog.tsx"],"names":["Dialog","backdrop","children","isOpen","onClose","maxWidth","surfaceStyles","width","callbackRef","focusRef","disable","disableFocusTrap","enable","enableFocusTrap","isEnabled","focusTrapEnabled","trapRef","focusTrapRef","scrollRef","disableScrollLock","enableScrollLock","scrollLockEnabled","handleClose","closeModal","enter","exit","state","node","undefined"],"mappings":";;;;;;;AA0BA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;;;AAoCO,IAAMA,MAAuB,GAAG,UAQjC;AAAA,MARkC;AACtCC,IAAAA,QADsC;AAEtCC,IAAAA,QAFsC;AAGtCC,IAAAA,MAHsC;AAItCC,IAAAA,OAJsC;AAKtCC,IAAAA,QALsC;AAMtCC,IAAAA,aANsC;AAOtCC,IAAAA;AAPsC,GAQlC;AACJ,MAAM;AACJC,IAAAA,WAAW,EAAEC,QADT;AAEJC,IAAAA,OAAO,EAAEC,gBAFL;AAGJC,IAAAA,MAAM,EAAEC,eAHJ;AAIJC,IAAAA,SAAS,EAAEC,gBAJP;AAKJC,IAAAA,OAAO,EAAEC;AALL,MAMF,yBAAad,MAAb,CANJ;AAOA,MAAM;AACJK,IAAAA,WAAW,EAAEU,SADT;AAEJR,IAAAA,OAAO,EAAES,iBAFL;AAGJP,IAAAA,MAAM,EAAEQ,gBAHJ;AAIJN,IAAAA,SAAS,EAAEO;AAJP,MAKF,0BAAclB,MAAd,EAAsB,KAAtB,CALJ;;AAOA,MAAMmB,WAAW,GAAG,MAAM;AACxBlB,IAAAA,OAAO,IAAIA,OAAO,EAAlB;AACD,GAFD;;AAIA,SACE,6BAAC,4BAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLmB,MAAAA,UAAU,EAAED,WADP;AAELX,MAAAA,gBAFK;AAGLQ,MAAAA,iBAHK;AAILN,MAAAA,eAJK;AAKLO,MAAAA,gBALK;AAMLL,MAAAA,gBANK;AAOLE,MAAAA,YAPK;AAQLI,MAAAA;AARK;AADT,KAYE,6BAAC,mCAAD;AACE,IAAA,UAAU,EAAC,OADb;AAEE,IAAA,YAAY,MAFd;AAGE,IAAA,aAAa,MAHf;AAIE,IAAA,EAAE,EAAElB,MAJN;AAKE,IAAA,OAAO,EAAE;AAAEqB,MAAAA,KAAK,EAAE,CAAT;AAAYC,MAAAA,IAAI,EAAE;AAAlB;AALX,KAOIC,KAAD,IACC,6BAAC,cAAD;AACE,IAAA,GAAG,EAAGC,IAAD,IAAU;AACblB,MAAAA,QAAQ,CAACkB,IAAD,CAAR;AACAT,MAAAA,SAAS,CAACS,IAAD,CAAT;AACD;AAJH,KAME,6BAAC,kBAAD;AACE,IAAA,SAAS,EAAED,KADb;AAEE,IAAA,OAAO,EAAEtB,OAFX;AAGE,IAAA,OAAO,EAAEH,QAAQ,KAAK2B,SAAb,GAAyB,IAAzB,GAAgC,CAAC,CAAC3B,QAH7C;AAIE,IAAA,KAAK,EACH,CAAC,CAACA,QAAF,IAAcA,QAAQ,KAAK,IAA3B,GACKA,QADL,GAEI2B;AAPR,IANF,EAgBE,6BAAC,gBAAD;AACE,IAAA,KAAK,EAAEtB,aADT;AAEE,IAAA,SAAS,EAAEoB,KAFb;AAGE,IAAA,KAAK,EAAEnB,KAHT;AAIE,IAAA,QAAQ,EAAEF;AAJZ,KAMGH,QANH,CAhBF,CARJ,CAZF,CADF;AAkDD,CA7EM","sourcesContent":["/*\n\n MIT License\n\n Copyright (c) 2020 Looker Data Sciences, Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n\n */\n\nimport React, { CSSProperties, FC } from 'react'\nimport { CSSTransition } from 'react-transition-group'\nimport { CSSObject } from 'styled-components'\nimport { ResponsiveValue } from 'styled-system'\nimport { Portal } from '../Portal'\nimport { useFocusTrap, useScrollLock } from '../utils'\nimport { Backdrop } from './Backdrop'\nimport { DialogContext } from './DialogContext'\nimport { Surface } from './Surface'\n\nexport interface DialogProps {\n  /**\n   * When true, renders the Backdrop, Surface and it's contained content.\n   * @default false\n   */\n  isOpen?: boolean\n\n  /**\n   * Specify a callback to be called each time this Dialog is closed\n   */\n  onClose?: () => void\n\n  /**\n   * Optional backdrop styles to merge with the Backdrop implementation. These\n   * must be a CSSProperty compatible key / value paired object. For example\n   * {backgroundColor: 'pink'}.\n   */\n  backdrop?: CSSProperties\n\n  /**\n   * Optional surface styles to merge with the Surface implementation. These\n   * must be a CSSProperty compatible key / value paired object.\n   */\n  surfaceStyles?: CSSProperties\n\n  /**\n   * Explicitly specifying a width will set the Surface to be the lesser of the specified width or the viewport width.\n   * You can also specify `auto` if you want the Surface to auto-size to its content.\n   * @default auto\n   */\n  width?: ResponsiveValue<string>\n  maxWidth?: ResponsiveValue<string>\n}\n\nexport const Dialog: FC<DialogProps> = ({\n  backdrop,\n  children,\n  isOpen,\n  onClose,\n  maxWidth,\n  surfaceStyles,\n  width,\n}) => {\n  const {\n    callbackRef: focusRef,\n    disable: disableFocusTrap,\n    enable: enableFocusTrap,\n    isEnabled: focusTrapEnabled,\n    trapRef: focusTrapRef,\n  } = useFocusTrap(isOpen)\n  const {\n    callbackRef: scrollRef,\n    disable: disableScrollLock,\n    enable: enableScrollLock,\n    isEnabled: scrollLockEnabled,\n  } = useScrollLock(isOpen, false)\n\n  const handleClose = () => {\n    onClose && onClose()\n  }\n\n  return (\n    <DialogContext.Provider\n      value={{\n        closeModal: handleClose,\n        disableFocusTrap,\n        disableScrollLock,\n        enableFocusTrap,\n        enableScrollLock,\n        focusTrapEnabled,\n        focusTrapRef,\n        scrollLockEnabled,\n      }}\n    >\n      <CSSTransition\n        classNames=\"modal\"\n        mountOnEnter\n        unmountOnExit\n        in={isOpen}\n        timeout={{ enter: 0, exit: 250 }}\n      >\n        {(state: string) => (\n          <Portal\n            ref={(node) => {\n              focusRef(node)\n              scrollRef(node)\n            }}\n          >\n            <Backdrop\n              className={state}\n              onClick={onClose}\n              visible={backdrop === undefined ? true : !!backdrop}\n              style={\n                !!backdrop && backdrop !== true\n                  ? (backdrop as CSSObject)\n                  : undefined\n              }\n            />\n            <Surface\n              style={surfaceStyles}\n              className={state}\n              width={width}\n              maxWidth={maxWidth}\n            >\n              {children}\n            </Surface>\n          </Portal>\n        )}\n      </CSSTransition>\n    </DialogContext.Provider>\n  )\n}\n"],"file":"Dialog.js"}