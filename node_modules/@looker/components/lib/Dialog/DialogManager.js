"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DialogManager = void 0;

var _omit = _interopRequireDefault(require("lodash/omit"));

var _react = _interopRequireWildcard(require("react"));

var _Dialog = require("./Dialog");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function isRenderProp(children) {
  return typeof children === 'function';
}

var DialogManager = (_ref) => {
  var {
    canClose,
    content,
    children,
    onClose
  } = _ref,
      props = _objectWithoutProperties(_ref, ["canClose", "content", "children", "onClose"]);

  var [isOpen, setOpen] = (0, _react.useState)(props.isOpen || false);

  var open = () => setOpen(true);

  var close = () => {
    if (canClose && !canClose()) return;
    onClose && onClose();
    setOpen(false);
  };

  var dialogPropsLabeled = {
    'aria-expanded': isOpen,
    className: isOpen ? 'active' : '',
    onClick: open,
    role: 'button'
  };

  var dialog = _react.default.createElement(_Dialog.Dialog, _extends({
    isOpen: isOpen,
    onClose: close
  }, (0, _omit.default)(props, 'isOpen')), content);

  var target = children;

  if ((0, _react.isValidElement)(children)) {
    target = (0, _react.cloneElement)(children, _objectSpread(_objectSpread({}, dialogPropsLabeled), {}, {
      className: isOpen ? "".concat(children.props.className, " active") : children.props.className
    }));
  } else if (isRenderProp(children)) {
    target = children(dialogPropsLabeled);
  } else {
    console.warn("Element \"".concat(typeof target, "\" can't be used as target for DialogManager"));
  }

  return _react.default.createElement(_react.default.Fragment, null, dialog, target);
};

exports.DialogManager = DialogManager;
//# sourceMappingURL=DialogManager.js.map