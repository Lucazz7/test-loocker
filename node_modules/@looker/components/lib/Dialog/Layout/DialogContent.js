"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DialogContent = void 0;

var _designTokens = require("@looker/design-tokens");

var _react = _interopRequireWildcard(require("react"));

var _reactResizeDetector = _interopRequireDefault(require("react-resize-detector"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _omit = _interopRequireDefault(require("lodash/omit"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Internal extends _react.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "ref", void 0);

    this.state = {
      overflow: false
    };
    this.ref = (0, _react.createRef)();
  }

  hasOverflow(e) {
    return e.offsetHeight < e.scrollHeight;
  }

  componentDidUpdate(prevProps) {
    if (prevProps.renderedHeight !== this.props.renderedHeight) {
      this.ref.current && this.setState({
        overflow: this.hasOverflow(this.ref.current)
      });
    }
  }

  render() {
    var _this$props = this.props,
        {
      borderBottom,
      children,
      className,
      innerProps
    } = _this$props,
        props = _objectWithoutProperties(_this$props, ["borderBottom", "children", "className", "innerProps"]);

    if (innerProps && innerProps.p && !innerProps.px) {
      innerProps.px = innerProps.p;
    }

    return _react.default.createElement(Outer, _extends({
      borderBottom: borderBottom,
      className: "".concat(className, " ").concat(this.state.overflow && 'overflow'),
      ref: this.ref
    }, (0, _omit.default)(props, ['renderedHeight'])), _react.default.createElement(Inner, innerProps, children));
  }

}

var DialogContent = props => {
  return _react.default.createElement(_reactResizeDetector.default, {
    handleHeight: true
  }, height => _react.default.createElement(Internal, _extends({
    renderedHeight: height
  }, props)));
};

exports.DialogContent = DialogContent;

var Outer = _styledComponents.default.div.withConfig({
  displayName: "DialogContent__Outer",
  componentId: "rfzesr-0"
})(["", " ", " ", " flex:8;overflow:auto;&.overflow{border-bottom:1px solid ", ";border-top:1px solid ", ";box-shadow:inset 0 -4px 4px -4px ", ";}"], _designTokens.reset, _designTokens.layout, (_ref) => {
  var {
    borderBottom,
    theme: {
      colors
    }
  } = _ref;
  return borderBottom && "border-bottom: 1px solid ".concat(colors.ui2, ";");
}, (_ref2) => {
  var {
    theme
  } = _ref2;
  return theme.colors.ui2;
}, (_ref3) => {
  var {
    theme
  } = _ref3;
  return theme.colors.ui2;
}, (_ref4) => {
  var {
    theme
  } = _ref4;
  return theme.colors.ui2;
});

var Inner = _styledComponents.default.div.withConfig({
  displayName: "DialogContent__Inner",
  componentId: "rfzesr-1"
})(["", " ", ""], _designTokens.reset, _designTokens.space);

Inner.defaultProps = {
  px: 'xlarge',
  py: 'large'
};
//# sourceMappingURL=DialogContent.js.map