"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DialogHeader = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _Button = require("../../Button");

var _Text = require("../../Text");

var _DialogContext = require("../DialogContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var DialogHeaderLayout = (_ref) => {
  var {
    children,
    closeIcon = 'Close',
    hideClose,
    detail,
    fontSize,
    fontWeight
  } = _ref,
      props = _objectWithoutProperties(_ref, ["children", "closeIcon", "hideClose", "detail", "fontSize", "fontWeight"]);

  var {
    closeModal
  } = (0, _react.useContext)(_DialogContext.DialogContext);
  var {
    id
  } = props;
  return _react.default.createElement("header", (0, _designTokens.omitStyledProps)(props), _react.default.createElement(_Text.Heading, {
    as: "h3",
    mr: "xlarge",
    fontSize: fontSize || undefined,
    fontWeight: fontWeight || 'semiBold',
    style: {
      gridArea: 'text'
    },
    truncate: true
  }, children), detail ? _react.default.createElement(Detail, null, detail) : !hideClose && _react.default.createElement(Detail, null, _react.default.createElement(_Button.IconButton, {
    id: id ? "".concat(id, "-iconButton") : undefined,
    tabIndex: -1,
    color: "neutral",
    size: "small",
    onClick: closeModal,
    label: "Close",
    icon: closeIcon
  })));
};

var Detail = _styledComponents.default.div.withConfig({
  displayName: "DialogHeader__Detail",
  componentId: "sc-12qdj5f-0"
})(["grid-area:close;"]);

var DialogHeader = (0, _styledComponents.default)(DialogHeaderLayout).withConfig({
  displayName: "DialogHeader",
  componentId: "sc-12qdj5f-1"
})(["", " ", " align-items:center;display:grid;grid-template-columns:[text] 1fr [close] auto;"], _designTokens.reset, _designTokens.space);
exports.DialogHeader = DialogHeader;
DialogHeader.defaultProps = {
  p: 'large',
  pr: 'medium',
  px: 'xlarge'
};
//# sourceMappingURL=DialogHeader.js.map