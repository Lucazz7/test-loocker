"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PromptDialog = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Button = require("../../Button");

var _Form = require("../../Form");

var _VisuallyHidden = require("../../VisuallyHidden");

var _ = require("..");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var PromptDialog = (_ref) => {
  var {
    saveLabel = 'Save',
    cancelColor = 'neutral',
    cancelLabel = 'Cancel',
    onSave,
    onCancel,
    inputLabel,
    title,
    secondary,
    defaultValue = '',
    close,
    isOpen
  } = _ref;
  var [value, setValue] = (0, _react.useState)(defaultValue);
  var hasValue = !!value.trim();
  (0, _react.useEffect)(() => {
    setValue(defaultValue);
  }, [defaultValue]);
  var handleClose = (0, _react.useCallback)(() => {
    setValue('');
    close();
  }, [close]);

  var onChange = event => {
    setValue(event.currentTarget.value);
  };

  var onSubmit = (0, _react.useCallback)(() => {
    onSave(value, handleClose);
  }, [handleClose, onSave, value]);
  var cancel = (0, _react.useCallback)(() => {
    if (onCancel) {
      onCancel(handleClose);
    } else {
      handleClose();
    }
  }, [handleClose, onCancel]);

  var onKeyDown = event => {
    if (event.key === 'Enter' && hasValue) {
      onSubmit();
    } else if (event.key === 'Escape') {
      cancel();
    }
  };

  return _react.default.createElement(_.Dialog, {
    width: "30rem",
    isOpen: isOpen,
    onClose: cancel
  }, _react.default.createElement(_.DialogHeader, {
    hideClose: true
  }, title), _react.default.createElement(_.DialogContent, null, _react.default.createElement(_VisuallyHidden.VisuallyHidden, null, _react.default.createElement(_Form.Label, {
    htmlFor: "promptInput"
  }, inputLabel)), _react.default.createElement(_Form.InputText, {
    onKeyDown: onKeyDown,
    id: "promptInput",
    placeholder: inputLabel,
    onChange: onChange,
    width: "100%",
    value: value
  })), _react.default.createElement(_.DialogFooter, {
    secondary: secondary
  }, _react.default.createElement(_Button.Button, {
    disabled: !hasValue,
    type: "submit",
    onClick: onSubmit,
    color: "key"
  }, saveLabel), _react.default.createElement(_Button.ButtonTransparent, {
    type: "reset",
    color: cancelColor,
    onClick: cancel
  }, cancelLabel)));
};

exports.PromptDialog = PromptDialog;
//# sourceMappingURL=PromptDialog.js.map