"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AccordionDisclosure = exports.AccordionDisclosureStyle = exports.AccordionDisclosureLayout = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _designTokens = require("@looker/design-tokens");

var _AccordionContext = require("./AccordionContext");

var _AccordionDisclosureGrid = require("./AccordionDisclosureGrid");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var AccordionDisclosureLayout = (0, _react.forwardRef)((_ref, ref) => {
  var {
    children,
    className
  } = _ref;
  var [isFocusVisible, setFocusVisible] = (0, _react.useState)(false);

  var _useContext = (0, _react.useContext)(_AccordionContext.AccordionContext),
      {
    isOpen,
    toggleOpen,
    onClose,
    onOpen
  } = _useContext,
      props = _objectWithoutProperties(_useContext, ["isOpen", "toggleOpen", "onClose", "onOpen"]);

  var handleOpen = () => onOpen && onOpen();

  var handleClose = () => onClose && onClose();

  var handleToggle = () => {
    isOpen ? handleClose() : handleOpen();
    toggleOpen(!isOpen);
  };

  var handleKeyDown = event => {
    if (event.keyCode === 13) {
      handleToggle();
    }
  };

  var handleKeyUp = event => {
    if (event.keyCode === 9 && event.currentTarget === event.target) setFocusVisible(true);
  };

  var handleClick = () => {
    setFocusVisible(false);
    handleToggle();
  };

  var handleBlur = () => {
    setFocusVisible(false);
  };

  return _react.default.createElement(AccordionDisclosureStyle, {
    className: className,
    focusVisible: isFocusVisible,
    onBlur: handleBlur,
    onClick: handleClick,
    onKeyDown: handleKeyDown,
    onKeyUp: handleKeyUp,
    ref: ref,
    tabIndex: 0
  }, _react.default.createElement(_AccordionDisclosureGrid.AccordionDisclosureGrid, _extends({}, props, {
    isOpen: isOpen
  }), children));
});
exports.AccordionDisclosureLayout = AccordionDisclosureLayout;
AccordionDisclosureLayout.displayName = 'AccordionDisclosureLayout';

var AccordionDisclosureStyle = _styledComponents.default.div.withConfig({
  displayName: "AccordionDisclosure__AccordionDisclosureStyle",
  componentId: "sc-8407zi-0"
})(["align-items:center;border:1px solid transparent;border-color:", ";cursor:pointer;display:flex;outline:none;padding:", ";width:100%;"], (_ref2) => {
  var {
    focusVisible,
    theme
  } = _ref2;
  return focusVisible && theme.colors.keyFocus;
}, (_ref3) => {
  var {
    theme: {
      space
    }
  } = _ref3;
  return "".concat(space.xsmall, " ").concat(space.none);
});

exports.AccordionDisclosureStyle = AccordionDisclosureStyle;
var AccordionDisclosure = (0, _styledComponents.default)(AccordionDisclosureLayout).withConfig({
  displayName: "AccordionDisclosure",
  componentId: "sc-8407zi-1"
})(["", ""], _designTokens.typography);
exports.AccordionDisclosure = AccordionDisclosure;
AccordionDisclosure.defaultProps = {
  fontSize: 'small',
  fontWeight: 'semiBold'
};
//# sourceMappingURL=AccordionDisclosure.js.map