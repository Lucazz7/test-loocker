"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Accordion = exports.AccordionControlPropKeys = exports.AccordionIndicatorPropKeys = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _simple = require("../Layout/utils/simple");

var _AccordionContext = require("./AccordionContext");

var _AccordionContent = require("./AccordionContent");

var _AccordionDisclosure = require("./AccordionDisclosure");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var AccordionIndicatorPropKeys = ['indicatorPosition', 'indicatorSize', 'indicatorGap', 'indicatorIcons'];
exports.AccordionIndicatorPropKeys = AccordionIndicatorPropKeys;
var AccordionControlPropKeys = ['defaultOpen', 'isOpen', 'toggleOpen', 'onClose', 'onOpen'];
exports.AccordionControlPropKeys = AccordionControlPropKeys;

var AccordionLayout = (_ref) => {
  var {
    children,
    className,
    defaultOpen,
    indicatorGap,
    indicatorSize,
    indicatorIcons,
    indicatorPosition
  } = _ref,
      props = _objectWithoutProperties(_ref, ["children", "className", "defaultOpen", "indicatorGap", "indicatorSize", "indicatorIcons", "indicatorPosition"]);

  var [isOpen, setIsOpen] = (0, _react.useState)(!!defaultOpen);
  if (props.isOpen && props.toggleOpen === undefined || props.isOpen === undefined && props.toggleOpen) console.warn('Please provide both an isOpen prop and a toggleOpen prop if you wish to control a Accordion state. If you would like an uncontrolled Accordion, avoid passing in either prop into your Accordion element.');

  var context = _objectSpread(_objectSpread({}, _AccordionContext.accordionContextDefaults), {}, {
    indicatorGap: indicatorGap || _AccordionContext.accordionContextDefaults.indicatorGap,
    indicatorIcons: indicatorIcons || _AccordionContext.accordionContextDefaults.indicatorIcons,
    indicatorPosition: indicatorPosition || _AccordionContext.accordionContextDefaults.indicatorPosition,
    indicatorSize: indicatorSize || _AccordionContext.accordionContextDefaults.indicatorSize,
    isOpen: props.isOpen === undefined ? isOpen : props.isOpen,
    onClose: props.onClose,
    onOpen: props.onOpen,
    toggleOpen: props.toggleOpen === undefined ? setIsOpen : props.toggleOpen
  });

  return _react.default.createElement(_AccordionContext.AccordionContext.Provider, {
    value: context
  }, _react.default.createElement("div", {
    className: className
  }, children));
};

var Accordion = (0, _styledComponents.default)(AccordionLayout).withConfig({
  displayName: "Accordion",
  componentId: "egrkwf-0"
})(["", ",", "{", "}"], _AccordionDisclosure.AccordionDisclosure, _AccordionContent.AccordionContent, _simple.simpleLayoutCSS);
exports.Accordion = Accordion;
Accordion.defaultProps = {
  indicatorGap: _AccordionContext.accordionContextDefaults.indicatorGap,
  indicatorPosition: _AccordionContext.accordionContextDefaults.indicatorPosition,
  indicatorSize: _AccordionContext.accordionContextDefaults.indicatorSize,
  width: '100%'
};
//# sourceMappingURL=Accordion.js.map