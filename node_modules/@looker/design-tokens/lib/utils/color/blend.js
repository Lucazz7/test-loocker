"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateBlendColors = exports.generateIntentShade = exports.intentUIBlend = exports.mixScaledColors = exports.mixColors = exports.uiTransparencyBlend = exports.blendColorTransparency = exports.uiBlends = void 0;

var _polished = require("polished");

var _styledComponents = require("styled-components");

var _tintOrShadeUiColor = require("./tintOrShadeUiColor");

var _scaleMixAmount = require("./scaleMixAmount");

var textBlends = [45, 65, 78, 88, 95, 99];
var uiBlends = [4, 12, 23, 34, 85];
exports.uiBlends = uiBlends;

var blendColorTransparency = (color, level) => (0, _polished.rgba)(color, uiBlends[level - 1] / 100);

exports.blendColorTransparency = blendColorTransparency;

var uiTransparencyBlend = level => (0, _styledComponents.css)(["", ""], (_ref) => {
  var {
    theme: {
      colors
    }
  } = _ref;
  return blendColorTransparency(colors.text, level);
});

exports.uiTransparencyBlend = uiTransparencyBlend;

var mixColors = (mixAmount, foreground, background) => {
  return (0, _polished.mix)(mixAmount / 100, foreground, background);
};

exports.mixColors = mixColors;

var mixScaledColors = (mixAmount, foreground, background) => {
  var colorLuminance = (0, _polished.getLuminance)(background);
  var lumnisanceAdjustmentScale = {
    lower: 1.3,
    lowest: 1.7
  };
  var adjustment = mixAmount;

  if (colorLuminance < 0.16 && colorLuminance > 0.08) {
    adjustment = lumnisanceAdjustmentScale.lower;
  } else if (colorLuminance < 0.08) {
    adjustment = lumnisanceAdjustmentScale.lowest;
  }

  var mixAdjustment = colorLuminance > 0.3 ? mixAmount : (0, _scaleMixAmount.scaleMixAmount)(mixAmount, adjustment);
  return (0, _polished.mix)(mixAdjustment / 100, foreground, background);
};

exports.mixScaledColors = mixScaledColors;

var intentUIBlend = (intent, level) => (0, _styledComponents.css)(["", ""], (_ref2) => {
  var {
    theme: {
      colors
    }
  } = _ref2;
  return mixScaledColors(uiBlends[level], colors[intent], colors.background);
});

exports.intentUIBlend = intentUIBlend;

var generateIntentShade = color => {
  var intentColorLuminance = (0, _polished.getLuminance)(color);
  var adjustAmount = intentColorLuminance > 0.3 ? intentColorLuminance * 0.55 : 0.125;
  return (0, _styledComponents.css)(["", ""], (_ref3) => {
    var {
      theme: {
        colors
      }
    } = _ref3;
    return (0, _polished.getLuminance)(colors.background) > 0.5 ? (0, _polished.darken)(adjustAmount, color) : (0, _polished.lighten)(adjustAmount, color);
  });
};

exports.generateIntentShade = generateIntentShade;

var generateBlendColors = colors => {
  var {
    background,
    text
  } = colors;
  return {
    ui1: (0, _tintOrShadeUiColor.tintOrShadeUiColor)(uiBlends[0], background),
    ui2: (0, _tintOrShadeUiColor.tintOrShadeUiColor)(uiBlends[1], background),
    ui3: (0, _tintOrShadeUiColor.tintOrShadeUiColor)(uiBlends[2], background),
    ui4: (0, _tintOrShadeUiColor.tintOrShadeUiColor)(uiBlends[3], background),
    ui5: (0, _tintOrShadeUiColor.tintOrShadeUiColor)(uiBlends[4], background),
    text1: mixColors(textBlends[0], text, background),
    text2: mixColors(textBlends[1], text, background),
    text3: mixColors(textBlends[2], text, background),
    text4: mixColors(textBlends[3], text, background),
    text5: mixColors(textBlends[4], text, background)
  };
};

exports.generateBlendColors = generateBlendColors;
//# sourceMappingURL=blend.js.map