/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import isEqual from 'lodash/isEqual'
import React, { useState } from 'react'
import { MemoryRouter } from 'react-router-dom'
import { LookerExtensionSDK, connectExtensionHost } from '@looker/extension-sdk'
import { Looker31SDK } from '@looker/sdk/lib/sdk/3.1/methods'
import { ExtensionProviderProps, ExtensionContextData, RouteData } from './types'
import { RouteChangeListener } from './components/RouteChangeListener'
import { registerCore31SDK, registerCore40SDK, unregisterCore31SDK, unregisterCore40SDK } from '../../sdk/core_sdk'
import { Looker40SDK } from '@looker/sdk/lib/sdk/4.0/methods'
import { getInitialRouteEntries } from './utils/get_initial_route_entries'

/**
 * React context provider for extension API and SDK
 */
export const ExtensionContext = React.createContext<ExtensionContextData>(
  undefined as any // no one will ever see this undefined!
)

/**
 * ExtensionProvider component. Provides access to the extension API and SDK (use
 * ExtensionContext) and react routing services.
 */
export const ExtensionProvider: React.FC<ExtensionProviderProps> = ({
  onPathnameChange,
  onRouteChange,
  hostTracksRoute = true,
  loadingComponent,
  requiredLookerVersion,
  children,
}) => {
  const [initialRouteData, setInitialRouteData] = useState<RouteData>()
  const [hostRouteData, setHostRouteData] = useState<RouteData>({ route: '' })
  const [initializing, setInitializing] = useState(true)
  const [initializeError, setInitializeError] = useState<string>()
  const [extensionData, setExtensionData] = React.useState<ExtensionContextData>({} as ExtensionContextData)

  const setInitialRouteAndRouteState = (route: string, routeState?: any) => {
    if (hostTracksRoute) {
      setInitialRouteData({ route, routeState })
    }
  }

  const hostChangedRoute = (_route: string, routeState?: any) => {
    const route = _route.startsWith('/') ? _route : '/' + _route
    if (route !== hostRouteData.route || !isEqual(routeState, hostRouteData.routeState)) {
      setHostRouteData({ route, routeState })
      setExtensionData((previousState: ExtensionContextData) => {
        return {
          ...previousState,
          route,
          routeState,
        }
      })
    }
  }

  React.useEffect(() => {
    const initialize = async () => {
      try {
        const extensionHost = await connectExtensionHost({
          setInitialRoute: setInitialRouteAndRouteState,
          requiredLookerVersion,
          hostChangedRoute,
        })
        const core31SDK: Looker31SDK = LookerExtensionSDK.create31Client(extensionHost)
        const core40SDK: Looker40SDK = LookerExtensionSDK.create40Client(extensionHost)
        // Provide global access for use by redux if needed
        registerCore31SDK(core31SDK)
        registerCore40SDK(core40SDK)
        setExtensionData((previousState: ExtensionContextData) => {
          return {
            ...previousState,
            extensionSDK: extensionHost,
            coreSDK: core31SDK,
            core31SDK,
            core40SDK,
          }
        })
        setInitializing(false)
      } catch (error) {
        console.error(error)
        unregisterCore31SDK()
        unregisterCore40SDK()
        setInitializeError(error.message || 'Extension failed to initialize.')
        setInitializing(false)
      }
    }
    initialize()
    return () => {
      unregisterCore31SDK()
      unregisterCore40SDK()
    }
  }, [])

  React.useEffect(() => {
    const onBodyMousedown = () => {
      if (extensionData && extensionData.extensionSDK) {
        extensionData.extensionSDK.closeHostPopovers()
      }
    }
    let body: HTMLBodyElement | undefined | null
    if (!initializing) {
      body = document.querySelector('body')
      if (body) {
        body.addEventListener('mousedown', onBodyMousedown)
      }
    }
    return () => {
      if (body) {
        body.removeEventListener('mousedown', onBodyMousedown)
      }
    }
  }, [initializing])

  return (
    <>
      {initializing ? (
        loadingComponent
      ) : (
        <>
          {!!initializeError ? (
            <div
              id='extension-initialization-error'
              aria-live='polite'
              role='status'
              style={{
                width: '100%',
                margin: '-8px',
                padding: '12px 16px',
                background: '#FFE5E9',
                borderRadius: '4px',
                font: '0.875rem "Helvetica", san-serif',
              }}
            >
              {initializeError}
            </div>
          ) : (
            <>
              {hostTracksRoute ? (
                <MemoryRouter initialEntries={getInitialRouteEntries(initialRouteData)}>
                  <RouteChangeListener
                    onRouteChange={onRouteChange}
                    onPathnameChange={onPathnameChange}
                    extensionHost={extensionData!.extensionSDK}
                    hostRoute={hostRouteData.route}
                    hostRouteState={hostRouteData.routeState}
                  />
                  <ExtensionContext.Provider value={extensionData!}>{children}</ExtensionContext.Provider>
                </MemoryRouter>
              ) : (
                <ExtensionContext.Provider value={extensionData!}>{children}</ExtensionContext.Provider>
              )}
            </>
          )}
        </>
      )}
    </>
  )
}
