"use strict";
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fetch_proxy_1 = require("./fetch_proxy");
var types_1 = require("./types");
var semver = __importStar(require("semver"));
exports.EXTENSION_SDK_VERSION = '0.10.5';
var ExtensionHostApiImpl = /** @class */ (function () {
    function ExtensionHostApiImpl(configuration) {
        this._configuration = configuration;
        var _a = this._configuration, chattyHost = _a.chattyHost, setInitialRoute = _a.setInitialRoute, hostChangedRoute = _a.hostChangedRoute;
        this.chattyHost = chattyHost;
        this.setInitialRoute = setInitialRoute;
        this.hostChangedRoute = hostChangedRoute;
    }
    Object.defineProperty(ExtensionHostApiImpl.prototype, "lookerHostData", {
        get: function () {
            return this._lookerHostData;
        },
        enumerable: true,
        configurable: true
    });
    ExtensionHostApiImpl.prototype.handleNotification = function (message) {
        var _a;
        var _b = message || {}, type = _b.type, payload = _b.payload;
        switch (type) {
            case types_1.ExtensionNotificationType.ROUTE_CHANGED:
                if (this.hostChangedRoute && payload) {
                    var _c = payload, route = _c.route, routeState = _c.routeState;
                    if (route) {
                        this.hostChangedRoute(route, routeState);
                    }
                }
                return undefined;
            case types_1.ExtensionNotificationType.INITIALIZE:
                this._lookerHostData = payload;
                this.contextData = (_a = this.lookerHostData) === null || _a === void 0 ? void 0 : _a.contextData;
                var errorMessage = void 0;
                if (this._configuration.requiredLookerVersion &&
                    this._lookerHostData &&
                    this._lookerHostData.lookerVersion) {
                    errorMessage = this.verifyLookerVersion(this._configuration.requiredLookerVersion);
                    if (errorMessage) {
                        console.error(errorMessage);
                    }
                }
                if (this.setInitialRoute && payload) {
                    var _d = payload, route = _d.route, routeState = _d.routeState;
                    if (route) {
                        this.setInitialRoute(route, routeState);
                    }
                }
                return {
                    extensionSdkVersion: exports.EXTENSION_SDK_VERSION,
                    errorMessage: errorMessage,
                };
            default:
                console.error('Unrecognized extension notification', message);
                throw new Error("Unrecognized extension notification type " + type);
        }
    };
    ExtensionHostApiImpl.prototype.createSecretKeyTag = function (keyName) {
        var _a;
        var errorMessage = this.verifyLookerVersion('>=7.11');
        if (errorMessage) {
            throw new Error(errorMessage);
        }
        if (!keyName.match(/^[A-Za-z0-9_.]+$/)) {
            throw new Error('Unsupported characters in key name');
        }
        return "{{" + ((_a = this._lookerHostData) === null || _a === void 0 ? void 0 : _a.extensionId.replace(/::|-/g, '_')) + "_" + keyName + "}}";
    };
    ExtensionHostApiImpl.prototype.verifyHostConnection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.VERIFY_HOST)];
            });
        });
    };
    ExtensionHostApiImpl.prototype.invokeCoreSdk = function (httpMethod, path, params, body, authenticator, options, apiVersion) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.INVOKE_CORE_SDK, {
                        httpMethod: httpMethod,
                        path: path,
                        params: params,
                        body: body,
                        authenticator: authenticator,
                        options: options,
                        apiVersion: apiVersion,
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.invokeCoreSdkRaw = function (httpMethod, path, params, body, apiVersion) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.RAW_INVOKE_CORE_SDK, {
                        httpMethod: httpMethod,
                        path: path,
                        params: params,
                        body: body,
                        apiVersion: apiVersion,
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.updateTitle = function (title) {
        this.send(types_1.ExtensionRequestType.UPDATE_TITLE, { title: title });
    };
    ExtensionHostApiImpl.prototype.updateLocation = function (url, state, target) {
        this.send(types_1.ExtensionRequestType.UPDATE_LOCATION, { url: url, state: state, target: target });
    };
    ExtensionHostApiImpl.prototype.spartanLogout = function () {
        this.send(types_1.ExtensionRequestType.SPARTAN_LOGOUT);
    };
    ExtensionHostApiImpl.prototype.openBrowserWindow = function (url, target) {
        this.send(types_1.ExtensionRequestType.UPDATE_LOCATION, {
            url: url,
            undefined: undefined,
            target: target || '_blank',
        });
    };
    ExtensionHostApiImpl.prototype.closeHostPopovers = function () {
        this.send(types_1.ExtensionRequestType.CLOSE_HOST_POPOVERS);
    };
    ExtensionHostApiImpl.prototype.clientRouteChanged = function (route, routeState) {
        this.send(types_1.ExtensionRequestType.ROUTE_CHANGED, {
            route: route,
            routeState: routeState,
        });
    };
    ExtensionHostApiImpl.prototype.localStorageSetItem = function (name, value) {
        if (value === void 0) { value = ''; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this._lookerHostData && !this._lookerHostData.lookerVersion) {
                    return [2 /*return*/, Promise.reject(new Error('localStorageSetItem not supported by the current Looker host'))];
                }
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.LOCAL_STORAGE, {
                        type: 'set',
                        name: name,
                        value: value,
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.localStorageGetItem = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this._lookerHostData && !this._lookerHostData.lookerVersion) {
                    return [2 /*return*/, Promise.reject(new Error('localStorageGetItem not supported by the current Looker host'))];
                }
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.LOCAL_STORAGE, {
                        type: 'get',
                        name: name,
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.localStorageRemoveItem = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this._lookerHostData && !this._lookerHostData.lookerVersion) {
                    return [2 /*return*/, Promise.reject(new Error('localStorageRemoveItem not supported by the current Looker host'))];
                }
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.LOCAL_STORAGE, {
                        type: 'remove',
                        name: name,
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.userAttributeSetItem = function (name, value) {
        if (value === void 0) { value = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var errorMessage;
            return __generator(this, function (_a) {
                errorMessage = this.verifyLookerVersion('>=7.13');
                if (errorMessage) {
                    return [2 /*return*/, Promise.reject(new Error(errorMessage))];
                }
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.USER_ATTRIBUTE, {
                        type: 'set',
                        name: name,
                        value: value,
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.userAttributeGetItem = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var errorMessage;
            return __generator(this, function (_a) {
                errorMessage = this.verifyLookerVersion('>=7.13');
                if (errorMessage) {
                    return [2 /*return*/, Promise.reject(new Error(errorMessage))];
                }
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.USER_ATTRIBUTE, {
                        type: 'get',
                        name: name,
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.userAttributeResetItem = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            var errorMessage;
            return __generator(this, function (_a) {
                errorMessage = this.verifyLookerVersion('>=7.13');
                if (errorMessage) {
                    return [2 /*return*/, Promise.reject(new Error(errorMessage))];
                }
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.USER_ATTRIBUTE, {
                        type: 'reset',
                        name: name,
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.getContextData = function () {
        var errorMessage = this.verifyLookerVersion('>=7.13');
        if (errorMessage) {
            throw new Error(errorMessage);
        }
        if (this.contextData) {
            return JSON.parse(this.contextData);
        }
        else {
            return undefined;
        }
    };
    ExtensionHostApiImpl.prototype.saveContextData = function (context) {
        return __awaiter(this, void 0, void 0, function () {
            var errorMessage, contextData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        errorMessage = this.verifyLookerVersion('>=7.13');
                        if (errorMessage) {
                            return [2 /*return*/, Promise.reject(new Error(errorMessage))];
                        }
                        if (context) {
                            try {
                                contextData = JSON.stringify(context);
                            }
                            catch (err) {
                                return [2 /*return*/, Promise.reject(new Error('context cannot be serialized'))];
                            }
                        }
                        else {
                            contextData = undefined;
                        }
                        return [4 /*yield*/, this.sendAndReceive(types_1.ExtensionRequestType.CONTEXT_DATA, {
                                type: 'save',
                                contextData: contextData,
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.getContextData()];
                }
            });
        });
    };
    ExtensionHostApiImpl.prototype.refreshContextData = function () {
        return __awaiter(this, void 0, void 0, function () {
            var errorMessage, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        errorMessage = this.verifyLookerVersion('>=7.13');
                        if (errorMessage) {
                            return [2 /*return*/, Promise.reject(new Error(errorMessage))];
                        }
                        _a = this;
                        return [4 /*yield*/, this.sendAndReceive(types_1.ExtensionRequestType.CONTEXT_DATA, {
                                type: 'refresh',
                            })];
                    case 1:
                        _a.contextData = _b.sent();
                        return [2 /*return*/, this.getContextData()];
                }
            });
        });
    };
    ExtensionHostApiImpl.prototype.track = function (name, trackAction, attributes) {
        this.send(types_1.ExtensionRequestType.TRACK_ACTION, {
            name: name,
            trackAction: trackAction,
            attributes: attributes,
        });
    };
    ExtensionHostApiImpl.prototype.error = function (errorEvent) {
        if (this._lookerHostData) {
            var _a = errorEvent || {}, message = _a.message, filename = _a.filename, lineno = _a.lineno, colno = _a.colno, error = _a.error;
            this.send(types_1.ExtensionRequestType.ERROR_EVENT, {
                message: message,
                filename: filename,
                lineno: lineno,
                colno: colno,
                error: error,
            });
        }
        else {
            console.error('Unhandled error but Looker host connection not established', errorEvent);
        }
    };
    ExtensionHostApiImpl.prototype.unloaded = function () {
        this.send(types_1.ExtensionRequestType.EXTENSION_UNLOADED, {});
    };
    ExtensionHostApiImpl.prototype.createFetchProxy = function (baseUrl, init, responseBodyType) {
        return new fetch_proxy_1.FetchProxyImpl(this, baseUrl, init, responseBodyType);
    };
    ExtensionHostApiImpl.prototype.fetchProxy = function (resource, init, responseBodyType) {
        return __awaiter(this, void 0, void 0, function () {
            var errorMessage;
            return __generator(this, function (_a) {
                errorMessage = this.verifyLookerVersion('>=7.9');
                if (errorMessage) {
                    return [2 /*return*/, Promise.reject(new Error(errorMessage))];
                }
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.INVOKE_EXTERNAL_API, {
                        type: 'fetch',
                        payload: {
                            resource: resource,
                            init: init,
                            responseBodyType: responseBodyType,
                        },
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.serverProxy = function (resource, init, responseBodyType) {
        return __awaiter(this, void 0, void 0, function () {
            var errorMessage;
            return __generator(this, function (_a) {
                errorMessage = this.verifyLookerVersion('>=7.11');
                if (errorMessage) {
                    return [2 /*return*/, Promise.reject(new Error(errorMessage))];
                }
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.INVOKE_EXTERNAL_API, {
                        type: 'server-proxy',
                        payload: {
                            resource: resource,
                            init: init,
                            responseBodyType: responseBodyType,
                        },
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.oauth2Authenticate = function (authEndpoint, authParameters, httpMethod) {
        if (httpMethod === void 0) { httpMethod = 'POST'; }
        return __awaiter(this, void 0, void 0, function () {
            var errorMessage;
            return __generator(this, function (_a) {
                errorMessage = this.verifyLookerVersion('>=7.9');
                if (errorMessage) {
                    return [2 /*return*/, Promise.reject(new Error(errorMessage))];
                }
                errorMessage = this.validateAuthParameters(authParameters);
                if (errorMessage) {
                    return [2 /*return*/, Promise.reject(new Error(errorMessage))];
                }
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.INVOKE_EXTERNAL_API, {
                        type: 'oauth2_authenticate',
                        payload: {
                            authEndpoint: authEndpoint,
                            authParameters: authParameters,
                            httpMethod: httpMethod,
                        },
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.oauth2ExchangeCodeForToken = function (authEndpoint, authParameters) {
        return __awaiter(this, void 0, void 0, function () {
            var errorMessage;
            return __generator(this, function (_a) {
                errorMessage = this.verifyLookerVersion('>=7.11');
                if (errorMessage) {
                    return [2 /*return*/, Promise.reject(new Error(errorMessage))];
                }
                return [2 /*return*/, this.sendAndReceive(types_1.ExtensionRequestType.INVOKE_EXTERNAL_API, {
                        type: 'oauth2_exchange_code',
                        payload: {
                            authEndpoint: authEndpoint,
                            authParameters: authParameters,
                        },
                    })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.sendAndReceive = function (type, payload) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this._lookerHostData) {
                    return [2 /*return*/, Promise.reject(new Error('Looker host connection not established'))];
                }
                return [2 /*return*/, this.chattyHost
                        .sendAndReceive(types_1.ExtensionEvent.EXTENSION_API_REQUEST, {
                        type: type,
                        payload: payload,
                    })
                        .then(function (values) { return values[0]; })];
            });
        });
    };
    ExtensionHostApiImpl.prototype.send = function (type, payload) {
        if (!this._lookerHostData) {
            throw new Error('Looker host connection not established');
        }
        this.chattyHost.send(types_1.ExtensionEvent.EXTENSION_API_REQUEST, {
            type: type,
            payload: payload,
        });
    };
    ExtensionHostApiImpl.prototype.verifyLookerVersion = function (version) {
        // Default version to 7.0 as that's the first Looker version that officially
        // supported extensions. Version 6.24 has some support for extensions but most
        // likely will fail before reaching this point
        var lookerVersion = this._lookerHostData
            ? this._lookerHostData.lookerVersion || '7.0'
            : '7.0';
        if (!this._lookerHostData ||
            !semver.intersects(version, lookerVersion, true)) {
            return "Extension requires Looker version " + version + ", got " + lookerVersion;
        }
        return undefined;
    };
    ExtensionHostApiImpl.prototype.validateAuthParameters = function (authParameters) {
        if (!authParameters.client_id) {
            return 'client_id missing';
        }
        if (authParameters.redirect_uri) {
            return 'redirect_uri must NOT be included';
        }
        if (authParameters.response_type !== 'token' &&
            authParameters.response_type !== 'code') {
            return "invalid response_type, must be token or code, " + authParameters.response_type;
        }
        return undefined;
    };
    return ExtensionHostApiImpl;
}());
exports.ExtensionHostApiImpl = ExtensionHostApiImpl;
